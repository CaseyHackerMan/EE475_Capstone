
EE_475_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013980  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  08013b10  08013b10  00023b10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080142a0  080142a0  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  080142a0  080142a0  000242a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080142a8  080142a8  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080142a8  080142a8  000242a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080142ac  080142ac  000242ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  080142b0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030218  2**0
                  CONTENTS
 10 .bss          00000cc8  20000218  20000218  00030218  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000ee0  20000ee0  00030218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c5fd  00000000  00000000  0003028b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003fcc  00000000  00000000  0004c888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001868  00000000  00000000  00050858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001307  00000000  00000000  000520c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025865  00000000  00000000  000533c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ec5e  00000000  00000000  00078c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6fcc  00000000  00000000  0009788a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008400  00000000  00000000  0016e858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  00176c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013af8 	.word	0x08013af8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08013af8 	.word	0x08013af8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a28      	ldr	r2, [pc, #160]	; (800109c <HAL_UART_RxCpltCallback+0xac>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d122      	bne.n	8001046 <HAL_UART_RxCpltCallback+0x56>
		uint8_t c = UART3_Rx_buf[UART3_Rx_count++];
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <HAL_UART_RxCpltCallback+0xb0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	4926      	ldr	r1, [pc, #152]	; (80010a0 <HAL_UART_RxCpltCallback+0xb0>)
 8001008:	600a      	str	r2, [r1, #0]
 800100a:	4a26      	ldr	r2, [pc, #152]	; (80010a4 <HAL_UART_RxCpltCallback+0xb4>)
 800100c:	5cd3      	ldrb	r3, [r2, r3]
 800100e:	73bb      	strb	r3, [r7, #14]

		if(c == '\n' || UART3_Rx_count >= 100) {
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	2b0a      	cmp	r3, #10
 8001014:	d003      	beq.n	800101e <HAL_UART_RxCpltCallback+0x2e>
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <HAL_UART_RxCpltCallback+0xb0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b63      	cmp	r3, #99	; 0x63
 800101c:	dd08      	ble.n	8001030 <HAL_UART_RxCpltCallback+0x40>
			parse_GPS(UART3_Rx_buf, UART3_Rx_count);
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <HAL_UART_RxCpltCallback+0xb0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4619      	mov	r1, r3
 8001024:	481f      	ldr	r0, [pc, #124]	; (80010a4 <HAL_UART_RxCpltCallback+0xb4>)
 8001026:	f000 fabb 	bl	80015a0 <parse_GPS>
			UART3_Rx_count = 0;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_UART_RxCpltCallback+0xb0>)
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart3, (uint8_t*) UART3_Rx_buf + UART3_Rx_count, 1);
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <HAL_UART_RxCpltCallback+0xb0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_UART_RxCpltCallback+0xb4>)
 8001038:	4413      	add	r3, r2
 800103a:	2201      	movs	r2, #1
 800103c:	4619      	mov	r1, r3
 800103e:	4817      	ldr	r0, [pc, #92]	; (800109c <HAL_UART_RxCpltCallback+0xac>)
 8001040:	f007 f9c7 	bl	80083d2 <HAL_UART_Receive_IT>
			UART5_Rx_count = 0;
		}

		HAL_UART_Receive_IT(&huart5, (uint8_t*) UART5_Rx_buf + UART5_Rx_count, 1);
	}
}
 8001044:	e025      	b.n	8001092 <HAL_UART_RxCpltCallback+0xa2>
	} else if (huart == &huart5) {
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <HAL_UART_RxCpltCallback+0xb8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d121      	bne.n	8001092 <HAL_UART_RxCpltCallback+0xa2>
		char c = UART5_Rx_buf[UART5_Rx_count++];
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <HAL_UART_RxCpltCallback+0xbc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	4915      	ldr	r1, [pc, #84]	; (80010ac <HAL_UART_RxCpltCallback+0xbc>)
 8001056:	600a      	str	r2, [r1, #0]
 8001058:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <HAL_UART_RxCpltCallback+0xc0>)
 800105a:	5cd3      	ldrb	r3, [r2, r3]
 800105c:	73fb      	strb	r3, [r7, #15]
		if(c == '\n' || UART5_Rx_count >= 100) {
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	2b0a      	cmp	r3, #10
 8001062:	d003      	beq.n	800106c <HAL_UART_RxCpltCallback+0x7c>
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_UART_RxCpltCallback+0xbc>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b63      	cmp	r3, #99	; 0x63
 800106a:	dd08      	ble.n	800107e <HAL_UART_RxCpltCallback+0x8e>
			parse_lora(UART5_Rx_buf, UART5_Rx_count);
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_UART_RxCpltCallback+0xbc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	480f      	ldr	r0, [pc, #60]	; (80010b0 <HAL_UART_RxCpltCallback+0xc0>)
 8001074:	f000 f9da 	bl	800142c <parse_lora>
			UART5_Rx_count = 0;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_UART_RxCpltCallback+0xbc>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart5, (uint8_t*) UART5_Rx_buf + UART5_Rx_count, 1);
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_UART_RxCpltCallback+0xbc>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_UART_RxCpltCallback+0xc0>)
 8001086:	4413      	add	r3, r2
 8001088:	2201      	movs	r2, #1
 800108a:	4619      	mov	r1, r3
 800108c:	4806      	ldr	r0, [pc, #24]	; (80010a8 <HAL_UART_RxCpltCallback+0xb8>)
 800108e:	f007 f9a0 	bl	80083d2 <HAL_UART_Receive_IT>
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	200003b8 	.word	0x200003b8
 80010a0:	200005c4 	.word	0x200005c4
 80010a4:	200004fc 	.word	0x200004fc
 80010a8:	20000328 	.word	0x20000328
 80010ac:	200005c8 	.word	0x200005c8
 80010b0:	20000560 	.word	0x20000560
 80010b4:	00000000 	.word	0x00000000

080010b8 <update_target>:

void update_target() {
 80010b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010bc:	ed2d 8b02 	vpush	{d8}
 80010c0:	b098      	sub	sp, #96	; 0x60
 80010c2:	af00      	add	r7, sp, #0
    double lat, lon, tar_lat, tar_lon;

    // Convert latitude and longitude from degrees to radians
    lat = DEG2RAD(latitude);
 80010c4:	4bd0      	ldr	r3, [pc, #832]	; (8001408 <update_target+0x350>)
 80010c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ca:	a3c5      	add	r3, pc, #788	; (adr r3, 80013e0 <update_target+0x328>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff fa92 	bl	80005f8 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4bca      	ldr	r3, [pc, #808]	; (800140c <update_target+0x354>)
 80010e2:	f7ff fbb3 	bl	800084c <__aeabi_ddiv>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    lon = DEG2RAD(longitude);
 80010ee:	4bc8      	ldr	r3, [pc, #800]	; (8001410 <update_target+0x358>)
 80010f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010f4:	a3ba      	add	r3, pc, #744	; (adr r3, 80013e0 <update_target+0x328>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff fa7d 	bl	80005f8 <__aeabi_dmul>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	4bc0      	ldr	r3, [pc, #768]	; (800140c <update_target+0x354>)
 800110c:	f7ff fb9e 	bl	800084c <__aeabi_ddiv>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    tar_lat = DEG2RAD(target_latitude);
 8001118:	4bbe      	ldr	r3, [pc, #760]	; (8001414 <update_target+0x35c>)
 800111a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800111e:	a3b0      	add	r3, pc, #704	; (adr r3, 80013e0 <update_target+0x328>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff fa68 	bl	80005f8 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4bb5      	ldr	r3, [pc, #724]	; (800140c <update_target+0x354>)
 8001136:	f7ff fb89 	bl	800084c <__aeabi_ddiv>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    tar_lon = DEG2RAD(target_longitude);
 8001142:	4bb5      	ldr	r3, [pc, #724]	; (8001418 <update_target+0x360>)
 8001144:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001148:	a3a5      	add	r3, pc, #660	; (adr r3, 80013e0 <update_target+0x328>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f7ff fa53 	bl	80005f8 <__aeabi_dmul>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4bab      	ldr	r3, [pc, #684]	; (800140c <update_target+0x354>)
 8001160:	f7ff fb74 	bl	800084c <__aeabi_ddiv>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double dlon = tar_lon - lon;
 800116c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001170:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001174:	f7ff f888 	bl	8000288 <__aeabi_dsub>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double dlat = tar_lat - lat;
 8001180:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001184:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001188:	f7ff f87e 	bl	8000288 <__aeabi_dsub>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    // Calculate the bearing(direction)
    double y = sin(dlon) * cos(tar_lat);
 8001194:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001198:	f010 fab2 	bl	8011700 <sin>
 800119c:	ec55 4b10 	vmov	r4, r5, d0
 80011a0:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80011a4:	f010 fa58 	bl	8011658 <cos>
 80011a8:	ec53 2b10 	vmov	r2, r3, d0
 80011ac:	4620      	mov	r0, r4
 80011ae:	4629      	mov	r1, r5
 80011b0:	f7ff fa22 	bl	80005f8 <__aeabi_dmul>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double x = cos(lat) * sin(tar_lat) - sin(lat) * cos(lat) * cos(dlon);
 80011bc:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80011c0:	f010 fa4a 	bl	8011658 <cos>
 80011c4:	ec55 4b10 	vmov	r4, r5, d0
 80011c8:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80011cc:	f010 fa98 	bl	8011700 <sin>
 80011d0:	ec53 2b10 	vmov	r2, r3, d0
 80011d4:	4620      	mov	r0, r4
 80011d6:	4629      	mov	r1, r5
 80011d8:	f7ff fa0e 	bl	80005f8 <__aeabi_dmul>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4614      	mov	r4, r2
 80011e2:	461d      	mov	r5, r3
 80011e4:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80011e8:	f010 fa8a 	bl	8011700 <sin>
 80011ec:	ec59 8b10 	vmov	r8, r9, d0
 80011f0:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80011f4:	f010 fa30 	bl	8011658 <cos>
 80011f8:	ec53 2b10 	vmov	r2, r3, d0
 80011fc:	4640      	mov	r0, r8
 80011fe:	4649      	mov	r1, r9
 8001200:	f7ff f9fa 	bl	80005f8 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4690      	mov	r8, r2
 800120a:	4699      	mov	r9, r3
 800120c:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001210:	f010 fa22 	bl	8011658 <cos>
 8001214:	ec53 2b10 	vmov	r2, r3, d0
 8001218:	4640      	mov	r0, r8
 800121a:	4649      	mov	r1, r9
 800121c:	f7ff f9ec 	bl	80005f8 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4620      	mov	r0, r4
 8001226:	4629      	mov	r1, r5
 8001228:	f7ff f82e 	bl	8000288 <__aeabi_dsub>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double heading_rad = atan2(y, x);
 8001234:	ed97 1b08 	vldr	d1, [r7, #32]
 8001238:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800123c:	f010 f93e 	bl	80114bc <atan2>
 8001240:	ed87 0b06 	vstr	d0, [r7, #24]
    double heading_deg = heading_rad * (180 / M_PI);
 8001244:	a368      	add	r3, pc, #416	; (adr r3, 80013e8 <update_target+0x330>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800124e:	f7ff f9d3 	bl	80005f8 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	e9c7 2304 	strd	r2, r3, [r7, #16]
    target_heading = fmod(heading_deg + 360, 360);
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b6f      	ldr	r3, [pc, #444]	; (800141c <update_target+0x364>)
 8001260:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001264:	f7ff f812 	bl	800028c <__adddf3>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	ec43 2b17 	vmov	d7, r2, r3
 8001270:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 80013f0 <update_target+0x338>
 8001274:	eeb0 0a47 	vmov.f32	s0, s14
 8001278:	eef0 0a67 	vmov.f32	s1, s15
 800127c:	f010 f920 	bl	80114c0 <fmod>
 8001280:	eeb0 7a40 	vmov.f32	s14, s0
 8001284:	eef0 7a60 	vmov.f32	s15, s1
 8001288:	4b65      	ldr	r3, [pc, #404]	; (8001420 <update_target+0x368>)
 800128a:	ed83 7b00 	vstr	d7, [r3]

    // Calculate distance
    double a = pow(sin(dlat / 2), 2) + cos(lat) * cos(tar_lat) * pow(sin(dlon / 2), 2);
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001296:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800129a:	f7ff fad7 	bl	800084c <__aeabi_ddiv>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	ec43 2b17 	vmov	d7, r2, r3
 80012a6:	eeb0 0a47 	vmov.f32	s0, s14
 80012aa:	eef0 0a67 	vmov.f32	s1, s15
 80012ae:	f010 fa27 	bl	8011700 <sin>
 80012b2:	eeb0 7a40 	vmov.f32	s14, s0
 80012b6:	eef0 7a60 	vmov.f32	s15, s1
 80012ba:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 80013f8 <update_target+0x340>
 80012be:	eeb0 0a47 	vmov.f32	s0, s14
 80012c2:	eef0 0a67 	vmov.f32	s1, s15
 80012c6:	f010 f929 	bl	801151c <pow>
 80012ca:	ec59 8b10 	vmov	r8, r9, d0
 80012ce:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 80012d2:	f010 f9c1 	bl	8011658 <cos>
 80012d6:	ec55 4b10 	vmov	r4, r5, d0
 80012da:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 80012de:	f010 f9bb 	bl	8011658 <cos>
 80012e2:	ec53 2b10 	vmov	r2, r3, d0
 80012e6:	4620      	mov	r0, r4
 80012e8:	4629      	mov	r1, r5
 80012ea:	f7ff f985 	bl	80005f8 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4614      	mov	r4, r2
 80012f4:	461d      	mov	r5, r3
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001302:	f7ff faa3 	bl	800084c <__aeabi_ddiv>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	ec43 2b17 	vmov	d7, r2, r3
 800130e:	eeb0 0a47 	vmov.f32	s0, s14
 8001312:	eef0 0a67 	vmov.f32	s1, s15
 8001316:	f010 f9f3 	bl	8011700 <sin>
 800131a:	eeb0 7a40 	vmov.f32	s14, s0
 800131e:	eef0 7a60 	vmov.f32	s15, s1
 8001322:	ed9f 1b35 	vldr	d1, [pc, #212]	; 80013f8 <update_target+0x340>
 8001326:	eeb0 0a47 	vmov.f32	s0, s14
 800132a:	eef0 0a67 	vmov.f32	s1, s15
 800132e:	f010 f8f5 	bl	801151c <pow>
 8001332:	ec53 2b10 	vmov	r2, r3, d0
 8001336:	4620      	mov	r0, r4
 8001338:	4629      	mov	r1, r5
 800133a:	f7ff f95d 	bl	80005f8 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4640      	mov	r0, r8
 8001344:	4649      	mov	r1, r9
 8001346:	f7fe ffa1 	bl	800028c <__adddf3>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    double c = 2 * atan2(sqrt(a), sqrt(1 - a));
 8001352:	ed97 0b02 	vldr	d0, [r7, #8]
 8001356:	f010 f951 	bl	80115fc <sqrt>
 800135a:	eeb0 8a40 	vmov.f32	s16, s0
 800135e:	eef0 8a60 	vmov.f32	s17, s1
 8001362:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001366:	f04f 0000 	mov.w	r0, #0
 800136a:	492e      	ldr	r1, [pc, #184]	; (8001424 <update_target+0x36c>)
 800136c:	f7fe ff8c 	bl	8000288 <__aeabi_dsub>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	ec43 2b17 	vmov	d7, r2, r3
 8001378:	eeb0 0a47 	vmov.f32	s0, s14
 800137c:	eef0 0a67 	vmov.f32	s1, s15
 8001380:	f010 f93c 	bl	80115fc <sqrt>
 8001384:	eeb0 7a40 	vmov.f32	s14, s0
 8001388:	eef0 7a60 	vmov.f32	s15, s1
 800138c:	eeb0 1a47 	vmov.f32	s2, s14
 8001390:	eef0 1a67 	vmov.f32	s3, s15
 8001394:	eeb0 0a48 	vmov.f32	s0, s16
 8001398:	eef0 0a68 	vmov.f32	s1, s17
 800139c:	f010 f88e 	bl	80114bc <atan2>
 80013a0:	ec51 0b10 	vmov	r0, r1, d0
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	f7fe ff70 	bl	800028c <__adddf3>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	e9c7 2300 	strd	r2, r3, [r7]
    target_distance = 6371000 * c;
 80013b4:	a312      	add	r3, pc, #72	; (adr r3, 8001400 <update_target+0x348>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013be:	f7ff f91b 	bl	80005f8 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4918      	ldr	r1, [pc, #96]	; (8001428 <update_target+0x370>)
 80013c8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80013cc:	bf00      	nop
 80013ce:	3760      	adds	r7, #96	; 0x60
 80013d0:	46bd      	mov	sp, r7
 80013d2:	ecbd 8b02 	vpop	{d8}
 80013d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013da:	bf00      	nop
 80013dc:	f3af 8000 	nop.w
 80013e0:	54442d18 	.word	0x54442d18
 80013e4:	400921fb 	.word	0x400921fb
 80013e8:	1a63c1f8 	.word	0x1a63c1f8
 80013ec:	404ca5dc 	.word	0x404ca5dc
 80013f0:	00000000 	.word	0x00000000
 80013f4:	40768000 	.word	0x40768000
 80013f8:	00000000 	.word	0x00000000
 80013fc:	40000000 	.word	0x40000000
 8001400:	00000000 	.word	0x00000000
 8001404:	41584dae 	.word	0x41584dae
 8001408:	20000468 	.word	0x20000468
 800140c:	40668000 	.word	0x40668000
 8001410:	20000470 	.word	0x20000470
 8001414:	20000000 	.word	0x20000000
 8001418:	20000008 	.word	0x20000008
 800141c:	40768000 	.word	0x40768000
 8001420:	20000488 	.word	0x20000488
 8001424:	3ff00000 	.word	0x3ff00000
 8001428:	20000490 	.word	0x20000490

0800142c <parse_lora>:

void parse_lora(char* buf, int count) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af02      	add	r7, sp, #8
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
	if (count == 0) return;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f000 8094 	beq.w	8001566 <parse_lora+0x13a>
	// PRINT_N(buf, count);

	int i = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
	char* items[4];
	char* ptr = buf;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	61bb      	str	r3, [r7, #24]
	items[i++] = ptr;
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	61fa      	str	r2, [r7, #28]
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	3320      	adds	r3, #32
 8001450:	443b      	add	r3, r7
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	f843 2c18 	str.w	r2, [r3, #-24]

	while (ptr < buf+count) {
 8001458:	e016      	b.n	8001488 <parse_lora+0x5c>
		if (*ptr == ' ') {
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b20      	cmp	r3, #32
 8001460:	d10f      	bne.n	8001482 <parse_lora+0x56>
			*ptr = '\0';
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
			if (i < 4) items[i++] = ptr+1;
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2b03      	cmp	r3, #3
 800146c:	dc13      	bgt.n	8001496 <parse_lora+0x6a>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	61fa      	str	r2, [r7, #28]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	3201      	adds	r2, #1
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	3320      	adds	r3, #32
 800147c:	443b      	add	r3, r7
 800147e:	f843 2c18 	str.w	r2, [r3, #-24]
			else break;
		}
		ptr++;
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	3301      	adds	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
	while (ptr < buf+count) {
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	429a      	cmp	r2, r3
 8001492:	d3e2      	bcc.n	800145a <parse_lora+0x2e>
 8001494:	e000      	b.n	8001498 <parse_lora+0x6c>
			else break;
 8001496:	bf00      	nop
	}
	if (i < 2) return;
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	2b01      	cmp	r3, #1
 800149c:	dd65      	ble.n	800156a <parse_lora+0x13e>

	if (strncmp(items[1], "SET", 3) == 0) {
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2203      	movs	r2, #3
 80014a2:	4934      	ldr	r1, [pc, #208]	; (8001574 <parse_lora+0x148>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f00d fa98 	bl	800e9da <strncmp>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d132      	bne.n	8001516 <parse_lora+0xea>
		if (i >= 4) {
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	dd5a      	ble.n	800156c <parse_lora+0x140>
			target_latitude = atof(items[2]);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00b fc0d 	bl	800ccd8 <atof>
 80014be:	eeb0 7a40 	vmov.f32	s14, s0
 80014c2:	eef0 7a60 	vmov.f32	s15, s1
 80014c6:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <parse_lora+0x14c>)
 80014c8:	ed83 7b00 	vstr	d7, [r3]
			target_longitude = atof(items[3]);
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f00b fc02 	bl	800ccd8 <atof>
 80014d4:	eeb0 7a40 	vmov.f32	s14, s0
 80014d8:	eef0 7a60 	vmov.f32	s15, s1
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <parse_lora+0x150>)
 80014de:	ed83 7b00 	vstr	d7, [r3]
			sprintf(UART2_Tx_buf, "New target received! %f %f\r\n",
 80014e2:	4b25      	ldr	r3, [pc, #148]	; (8001578 <parse_lora+0x14c>)
 80014e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <parse_lora+0x150>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	e9cd 2300 	strd	r2, r3, [sp]
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4922      	ldr	r1, [pc, #136]	; (8001580 <parse_lora+0x154>)
 80014f8:	4822      	ldr	r0, [pc, #136]	; (8001584 <parse_lora+0x158>)
 80014fa:	f00d fa03 	bl	800e904 <siprintf>
					target_latitude, target_longitude);
			PRINT(UART2_Tx_buf);
 80014fe:	4821      	ldr	r0, [pc, #132]	; (8001584 <parse_lora+0x158>)
 8001500:	f7fe feb6 	bl	8000270 <strlen>
 8001504:	4603      	mov	r3, r0
 8001506:	b29a      	uxth	r2, r3
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	491d      	ldr	r1, [pc, #116]	; (8001584 <parse_lora+0x158>)
 800150e:	481e      	ldr	r0, [pc, #120]	; (8001588 <parse_lora+0x15c>)
 8001510:	f006 fed4 	bl	80082bc <HAL_UART_Transmit>
 8001514:	e02a      	b.n	800156c <parse_lora+0x140>
		}
	} else if (strncmp(items[1], "STOP", 4) == 0) {
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2204      	movs	r2, #4
 800151a:	491c      	ldr	r1, [pc, #112]	; (800158c <parse_lora+0x160>)
 800151c:	4618      	mov	r0, r3
 800151e:	f00d fa5c 	bl	800e9da <strncmp>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10a      	bne.n	800153e <parse_lora+0x112>
		enable = 0;
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <parse_lora+0x164>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
		PRINT("Stop received!\r\n");
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	2210      	movs	r2, #16
 8001534:	4917      	ldr	r1, [pc, #92]	; (8001594 <parse_lora+0x168>)
 8001536:	4814      	ldr	r0, [pc, #80]	; (8001588 <parse_lora+0x15c>)
 8001538:	f006 fec0 	bl	80082bc <HAL_UART_Transmit>
 800153c:	e016      	b.n	800156c <parse_lora+0x140>
	} else if (strncmp(items[1], "START", 5) == 0) {
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2205      	movs	r2, #5
 8001542:	4915      	ldr	r1, [pc, #84]	; (8001598 <parse_lora+0x16c>)
 8001544:	4618      	mov	r0, r3
 8001546:	f00d fa48 	bl	800e9da <strncmp>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d10d      	bne.n	800156c <parse_lora+0x140>
		enable = 1;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <parse_lora+0x164>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
		PRINT("Start received!\r\n");
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 800155a:	2211      	movs	r2, #17
 800155c:	490f      	ldr	r1, [pc, #60]	; (800159c <parse_lora+0x170>)
 800155e:	480a      	ldr	r0, [pc, #40]	; (8001588 <parse_lora+0x15c>)
 8001560:	f006 feac 	bl	80082bc <HAL_UART_Transmit>
 8001564:	e002      	b.n	800156c <parse_lora+0x140>
	if (count == 0) return;
 8001566:	bf00      	nop
 8001568:	e000      	b.n	800156c <parse_lora+0x140>
	if (i < 2) return;
 800156a:	bf00      	nop
	}
}
 800156c:	3720      	adds	r7, #32
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	08013b10 	.word	0x08013b10
 8001578:	20000000 	.word	0x20000000
 800157c:	20000008 	.word	0x20000008
 8001580:	08013b14 	.word	0x08013b14
 8001584:	20000498 	.word	0x20000498
 8001588:	20000370 	.word	0x20000370
 800158c:	08013b34 	.word	0x08013b34
 8001590:	200005cc 	.word	0x200005cc
 8001594:	08013b3c 	.word	0x08013b3c
 8001598:	08013b50 	.word	0x08013b50
 800159c:	08013b58 	.word	0x08013b58

080015a0 <parse_GPS>:

void parse_GPS(char* buf, int count) {
 80015a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015a4:	b090      	sub	sp, #64	; 0x40
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]
	// $GPRMC,011725.00,A,4739.21106,N,12218.32692,W,0.019,,190224,,,D*6A
	// 0      1         2 3          4 5           6

	if (strncmp((char*) buf, "$GPRMC", 6)) return;
 80015ac:	2206      	movs	r2, #6
 80015ae:	4955      	ldr	r1, [pc, #340]	; (8001704 <parse_GPS+0x164>)
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f00d fa12 	bl	800e9da <strncmp>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f040 809d 	bne.w	80016f8 <parse_GPS+0x158>

	int i = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	char* items[11];
	char* ptr = buf;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	63bb      	str	r3, [r7, #56]	; 0x38
	items[i++] = ptr;
 80015c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	63fa      	str	r2, [r7, #60]	; 0x3c
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	3340      	adds	r3, #64	; 0x40
 80015d0:	443b      	add	r3, r7
 80015d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015d4:	f843 2c34 	str.w	r2, [r3, #-52]

	while (ptr < buf+count) {
 80015d8:	e016      	b.n	8001608 <parse_GPS+0x68>
		if (*ptr == ',') {
 80015da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b2c      	cmp	r3, #44	; 0x2c
 80015e0:	d10f      	bne.n	8001602 <parse_GPS+0x62>
			*ptr = '\0';
 80015e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
			if (i < 11) items[i++] = ptr+1;
 80015e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ea:	2b0a      	cmp	r3, #10
 80015ec:	dc13      	bgt.n	8001616 <parse_GPS+0x76>
 80015ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	63fa      	str	r2, [r7, #60]	; 0x3c
 80015f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015f6:	3201      	adds	r2, #1
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	3340      	adds	r3, #64	; 0x40
 80015fc:	443b      	add	r3, r7
 80015fe:	f843 2c34 	str.w	r2, [r3, #-52]
			else break;
		}
		ptr++;
 8001602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001604:	3301      	adds	r3, #1
 8001606:	63bb      	str	r3, [r7, #56]	; 0x38
	while (ptr < buf+count) {
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001610:	429a      	cmp	r2, r3
 8001612:	d3e2      	bcc.n	80015da <parse_GPS+0x3a>
 8001614:	e000      	b.n	8001618 <parse_GPS+0x78>
			else break;
 8001616:	bf00      	nop
	}

	if (*items[2] == 'A') time = atof((char*) items[1]);
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b41      	cmp	r3, #65	; 0x41
 800161e:	d10a      	bne.n	8001636 <parse_GPS+0x96>
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4618      	mov	r0, r3
 8001624:	f00b fb58 	bl	800ccd8 <atof>
 8001628:	eeb0 7a40 	vmov.f32	s14, s0
 800162c:	eef0 7a60 	vmov.f32	s15, s1
 8001630:	4b35      	ldr	r3, [pc, #212]	; (8001708 <parse_GPS+0x168>)
 8001632:	ed83 7b00 	vstr	d7, [r3]
	if (*items[4] == 'N') {
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b4e      	cmp	r3, #78	; 0x4e
 800163c:	d10e      	bne.n	800165c <parse_GPS+0xbc>
		GPS_location_ready = 1;
 800163e:	4b33      	ldr	r3, [pc, #204]	; (800170c <parse_GPS+0x16c>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]
		latitude = format_NMEA(items[3]);
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f86a 	bl	8001720 <format_NMEA>
 800164c:	eeb0 7a40 	vmov.f32	s14, s0
 8001650:	eef0 7a60 	vmov.f32	s15, s1
 8001654:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <parse_GPS+0x170>)
 8001656:	ed83 7b00 	vstr	d7, [r3]
 800165a:	e012      	b.n	8001682 <parse_GPS+0xe2>
	} else if (*items[4] == 'S') {
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b53      	cmp	r3, #83	; 0x53
 8001662:	d10e      	bne.n	8001682 <parse_GPS+0xe2>
		GPS_location_ready = 1;
 8001664:	4b29      	ldr	r3, [pc, #164]	; (800170c <parse_GPS+0x16c>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
		latitude = -format_NMEA(items[3]);
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	4618      	mov	r0, r3
 800166e:	f000 f857 	bl	8001720 <format_NMEA>
 8001672:	ec53 2b10 	vmov	r2, r3, d0
 8001676:	4690      	mov	r8, r2
 8001678:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800167c:	4b24      	ldr	r3, [pc, #144]	; (8001710 <parse_GPS+0x170>)
 800167e:	e9c3 8900 	strd	r8, r9, [r3]
	}
	if (*items[6] == 'E') {
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b45      	cmp	r3, #69	; 0x45
 8001688:	d10e      	bne.n	80016a8 <parse_GPS+0x108>
		GPS_location_ready = 1;
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <parse_GPS+0x16c>)
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
		longitude = format_NMEA(items[5]);
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	4618      	mov	r0, r3
 8001694:	f000 f844 	bl	8001720 <format_NMEA>
 8001698:	eeb0 7a40 	vmov.f32	s14, s0
 800169c:	eef0 7a60 	vmov.f32	s15, s1
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <parse_GPS+0x174>)
 80016a2:	ed83 7b00 	vstr	d7, [r3]
 80016a6:	e012      	b.n	80016ce <parse_GPS+0x12e>
	} else if (*items[6] == 'W') {
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b57      	cmp	r3, #87	; 0x57
 80016ae:	d10e      	bne.n	80016ce <parse_GPS+0x12e>
		GPS_location_ready = 1;
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <parse_GPS+0x16c>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
		longitude = -format_NMEA(items[5]);
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f831 	bl	8001720 <format_NMEA>
 80016be:	ec53 2b10 	vmov	r2, r3, d0
 80016c2:	4614      	mov	r4, r2
 80016c4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <parse_GPS+0x174>)
 80016ca:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (*items[8] != '\0') {
 80016ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d011      	beq.n	80016fa <parse_GPS+0x15a>
		GPS_heading_ready = 1;
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <parse_GPS+0x178>)
 80016d8:	2201      	movs	r2, #1
 80016da:	701a      	strb	r2, [r3, #0]
		GPS_heading = atof((char*) items[8]);
 80016dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016de:	4618      	mov	r0, r3
 80016e0:	f00b fafa 	bl	800ccd8 <atof>
 80016e4:	ec53 2b10 	vmov	r2, r3, d0
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fa7c 	bl	8000be8 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <parse_GPS+0x17c>)
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e000      	b.n	80016fa <parse_GPS+0x15a>
	if (strncmp((char*) buf, "$GPRMC", 6)) return;
 80016f8:	bf00      	nop
	}
}
 80016fa:	3740      	adds	r7, #64	; 0x40
 80016fc:	46bd      	mov	sp, r7
 80016fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001702:	bf00      	nop
 8001704:	08013b6c 	.word	0x08013b6c
 8001708:	20000460 	.word	0x20000460
 800170c:	20000481 	.word	0x20000481
 8001710:	20000468 	.word	0x20000468
 8001714:	20000470 	.word	0x20000470
 8001718:	20000480 	.word	0x20000480
 800171c:	20000478 	.word	0x20000478

08001720 <format_NMEA>:

double format_NMEA(char* buf) {
 8001720:	b5b0      	push	{r4, r5, r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	double val = atof(buf);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f00b fad5 	bl	800ccd8 <atof>
 800172e:	ed87 0b04 	vstr	d0, [r7, #16]
	int deg = val/100;
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <format_NMEA+0x8c>)
 8001738:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800173c:	f7ff f886 	bl	800084c <__aeabi_ddiv>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	f7ff fa06 	bl	8000b58 <__aeabi_d2iz>
 800174c:	4603      	mov	r3, r0
 800174e:	60fb      	str	r3, [r7, #12]
	return (val - deg*100)/60 + deg;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2264      	movs	r2, #100	; 0x64
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fee3 	bl	8000524 <__aeabi_i2d>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001766:	f7fe fd8f 	bl	8000288 <__aeabi_dsub>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <format_NMEA+0x90>)
 8001778:	f7ff f868 	bl	800084c <__aeabi_ddiv>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4614      	mov	r4, r2
 8001782:	461d      	mov	r5, r3
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f7fe fecd 	bl	8000524 <__aeabi_i2d>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4620      	mov	r0, r4
 8001790:	4629      	mov	r1, r5
 8001792:	f7fe fd7b 	bl	800028c <__adddf3>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	ec43 2b17 	vmov	d7, r2, r3
}
 800179e:	eeb0 0a47 	vmov.f32	s0, s14
 80017a2:	eef0 0a67 	vmov.f32	s1, s15
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bdb0      	pop	{r4, r5, r7, pc}
 80017ac:	40590000 	.word	0x40590000
 80017b0:	404e0000 	.word	0x404e0000

080017b4 <update_IMU_heading>:
	sprintf(UART2_Tx_buf, "Time=%d:%d:%d Latitude=%f, Longitude=%f\r\n",
			Hours, Min, Sec, Lat, Long);
	PRINT(UART2_Tx_buf);
}

void update_IMU_heading() {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af04      	add	r7, sp, #16
	uint8_t data[2];
	HAL_I2C_Mem_Read(&hi2c1, BNO055_ADDRESS << 1, BNO055_ADDR_HEADING, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2302      	movs	r3, #2
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	221a      	movs	r2, #26
 80017cc:	2150      	movs	r1, #80	; 0x50
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <update_IMU_heading+0x4c>)
 80017d0:	f004 fb38 	bl	8005e44 <HAL_I2C_Mem_Read>
	IMU_heading = (float)((int16_t)(data[1] << 8 | data[0])) / 16.0;
 80017d4:	797b      	ldrb	r3, [r7, #5]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	b21a      	sxth	r2, r3
 80017da:	793b      	ldrb	r3, [r7, #4]
 80017dc:	b21b      	sxth	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ea:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80017ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <update_IMU_heading+0x50>)
 80017f4:	edc3 7a00 	vstr	s15, [r3]
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000234 	.word	0x20000234
 8001804:	2000047c 	.word	0x2000047c

08001808 <set_steering>:

void set_steering(float direction) {
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	ed87 0a01 	vstr	s0, [r7, #4]
	int pulse = direction*500+1500;
 8001812:	edd7 7a01 	vldr	s15, [r7, #4]
 8001816:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001860 <set_steering+0x58>
 800181a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001864 <set_steering+0x5c>
 8001822:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800182a:	ee17 3a90 	vmov	r3, s15
 800182e:	60fb      	str	r3, [r7, #12]
	if (pulse > 2000) pulse = 2000;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001836:	dd02      	ble.n	800183e <set_steering+0x36>
 8001838:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800183c:	60fb      	str	r3, [r7, #12]
	if (pulse < 1000) pulse = 1000;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001844:	da02      	bge.n	800184c <set_steering+0x44>
 8001846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <set_steering+0x60>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	43fa0000 	.word	0x43fa0000
 8001864:	44bb8000 	.word	0x44bb8000
 8001868:	200002e0 	.word	0x200002e0

0800186c <set_speed>:

void set_speed(float speed) {
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	ed87 0a01 	vstr	s0, [r7, #4]
	int pulse = speed*200+1500;
 8001876:	edd7 7a01 	vldr	s15, [r7, #4]
 800187a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80018c8 <set_speed+0x5c>
 800187e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001882:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80018cc <set_speed+0x60>
 8001886:	ee77 7a87 	vadd.f32	s15, s15, s14
 800188a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800188e:	ee17 3a90 	vmov	r3, s15
 8001892:	60fb      	str	r3, [r7, #12]
	if (pulse > 1700) pulse = 1700;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800189a:	4293      	cmp	r3, r2
 800189c:	dd02      	ble.n	80018a4 <set_speed+0x38>
 800189e:	f240 63a4 	movw	r3, #1700	; 0x6a4
 80018a2:	60fb      	str	r3, [r7, #12]
	if (pulse < 1500) pulse = 1500;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f240 52db 	movw	r2, #1499	; 0x5db
 80018aa:	4293      	cmp	r3, r2
 80018ac:	dc02      	bgt.n	80018b4 <set_speed+0x48>
 80018ae:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80018b2:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse);
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <set_speed+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	639a      	str	r2, [r3, #56]	; 0x38
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	43480000 	.word	0x43480000
 80018cc:	44bb8000 	.word	0x44bb8000
 80018d0:	200002e0 	.word	0x200002e0

080018d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018da:	f001 f881 	bl	80029e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018de:	f000 f99f 	bl	8001c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e2:	f000 fbb9 	bl	8002058 <MX_GPIO_Init>
  MX_DMA_Init();
 80018e6:	f000 fb97 	bl	8002018 <MX_DMA_Init>
  MX_I2C1_Init();
 80018ea:	f000 fa03 	bl	8001cf4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80018ee:	f000 fa2f 	bl	8001d50 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80018f2:	f00a fee7 	bl	800c6c4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80018f6:	f000 fb3b 	bl	8001f70 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80018fa:	f000 fa5f 	bl	8001dbc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80018fe:	f000 fb61 	bl	8001fc4 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8001902:	f000 fb0b 	bl	8001f1c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  PRINT("Hello!\r\n");
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	2208      	movs	r2, #8
 800190c:	49aa      	ldr	r1, [pc, #680]	; (8001bb8 <main+0x2e4>)
 800190e:	48ab      	ldr	r0, [pc, #684]	; (8001bbc <main+0x2e8>)
 8001910:	f006 fcd4 	bl	80082bc <HAL_UART_Transmit>
  enable = 0;
 8001914:	4baa      	ldr	r3, [pc, #680]	; (8001bc0 <main+0x2ec>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800191a:	2100      	movs	r1, #0
 800191c:	48a9      	ldr	r0, [pc, #676]	; (8001bc4 <main+0x2f0>)
 800191e:	f005 fe41 	bl	80075a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001922:	2104      	movs	r1, #4
 8001924:	48a7      	ldr	r0, [pc, #668]	; (8001bc4 <main+0x2f0>)
 8001926:	f005 fe3d 	bl	80075a4 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, (uint8_t*) UART3_Rx_buf, 1);
 800192a:	2201      	movs	r2, #1
 800192c:	49a6      	ldr	r1, [pc, #664]	; (8001bc8 <main+0x2f4>)
 800192e:	48a7      	ldr	r0, [pc, #668]	; (8001bcc <main+0x2f8>)
 8001930:	f006 fd4f 	bl	80083d2 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, (uint8_t*) UART5_Rx_buf, 1);
 8001934:	2201      	movs	r2, #1
 8001936:	49a6      	ldr	r1, [pc, #664]	; (8001bd0 <main+0x2fc>)
 8001938:	48a6      	ldr	r0, [pc, #664]	; (8001bd4 <main+0x300>)
 800193a:	f006 fd4a 	bl	80083d2 <HAL_UART_Receive_IT>

  uint8_t mode = BNO055_MODE_IMU;
 800193e:	2308      	movs	r3, #8
 8001940:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c1, BNO055_ADDRESS << 1, BNO055_ADDR_OPRMODE, I2C_MEMADD_SIZE_8BIT, &mode, 1, HAL_MAX_DELAY);
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	9302      	str	r3, [sp, #8]
 8001948:	2301      	movs	r3, #1
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	1cfb      	adds	r3, r7, #3
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2301      	movs	r3, #1
 8001952:	223d      	movs	r2, #61	; 0x3d
 8001954:	2150      	movs	r1, #80	; 0x50
 8001956:	48a0      	ldr	r0, [pc, #640]	; (8001bd8 <main+0x304>)
 8001958:	f004 f97a 	bl	8005c50 <HAL_I2C_Mem_Write>

  set_steering(0);
 800195c:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 8001bdc <main+0x308>
 8001960:	f7ff ff52 	bl	8001808 <set_steering>
  set_speed(0);
 8001964:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8001bdc <main+0x308>
 8001968:	f7ff ff80 	bl	800186c <set_speed>
  HAL_Delay(2000);
 800196c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001970:	f001 f8a8 	bl	8002ac4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001974:	f00a fecc 	bl	800c710 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    update_IMU_heading();
 8001978:	f7ff ff1c 	bl	80017b4 <update_IMU_heading>

    if (GPS_location_ready) {
 800197c:	4b98      	ldr	r3, [pc, #608]	; (8001be0 <main+0x30c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d026      	beq.n	80019d2 <main+0xfe>
    	GPS_location_ready = 0;
 8001984:	4b96      	ldr	r3, [pc, #600]	; (8001be0 <main+0x30c>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
    	update_target();
 800198a:	f7ff fb95 	bl	80010b8 <update_target>
    	sprintf(UART2_Tx_buf, "Distance: %f Heading: %f\r\n",
 800198e:	4b95      	ldr	r3, [pc, #596]	; (8001be4 <main+0x310>)
 8001990:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001994:	4b94      	ldr	r3, [pc, #592]	; (8001be8 <main+0x314>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	e9cd 2300 	strd	r2, r3, [sp]
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4992      	ldr	r1, [pc, #584]	; (8001bec <main+0x318>)
 80019a4:	4892      	ldr	r0, [pc, #584]	; (8001bf0 <main+0x31c>)
 80019a6:	f00c ffad 	bl	800e904 <siprintf>
    				target_distance, target_heading);
    	// PRINT(UART2_Tx_buf);
    	run = (target_distance > 2);
 80019aa:	4b8e      	ldr	r3, [pc, #568]	; (8001be4 <main+0x310>)
 80019ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019b0:	2301      	movs	r3, #1
 80019b2:	461c      	mov	r4, r3
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019bc:	f7ff f8ac 	bl	8000b18 <__aeabi_dcmpgt>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <main+0xf6>
 80019c6:	2300      	movs	r3, #0
 80019c8:	461c      	mov	r4, r3
 80019ca:	b2e3      	uxtb	r3, r4
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b89      	ldr	r3, [pc, #548]	; (8001bf4 <main+0x320>)
 80019d0:	701a      	strb	r2, [r3, #0]
    }

    if (run && enable) {
 80019d2:	4b88      	ldr	r3, [pc, #544]	; (8001bf4 <main+0x320>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 80e2 	beq.w	8001ba0 <main+0x2cc>
 80019dc:	4b78      	ldr	r3, [pc, #480]	; (8001bc0 <main+0x2ec>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 80dd 	beq.w	8001ba0 <main+0x2cc>
    	float heading = IMU_heading + IMU_heading_offset;
 80019e6:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <main+0x324>)
 80019e8:	ed93 7a00 	vldr	s14, [r3]
 80019ec:	4b83      	ldr	r3, [pc, #524]	; (8001bfc <main+0x328>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f6:	edc7 7a03 	vstr	s15, [r7, #12]
    	if (heading >= 360) heading -= 360;
 80019fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80019fe:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001c00 <main+0x32c>
 8001a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0a:	db07      	blt.n	8001a1c <main+0x148>
 8001a0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a10:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001c00 <main+0x32c>
 8001a14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a18:	edc7 7a03 	vstr	s15, [r7, #12]

    	if (GPS_heading_ready) {
 8001a1c:	4b79      	ldr	r3, [pc, #484]	; (8001c04 <main+0x330>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d063      	beq.n	8001aec <main+0x218>
    		GPS_heading_ready = 0;
 8001a24:	4b77      	ldr	r3, [pc, #476]	; (8001c04 <main+0x330>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
    		float error = heading - GPS_heading;
 8001a2a:	4b77      	ldr	r3, [pc, #476]	; (8001c08 <main+0x334>)
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a38:	edc7 7a02 	vstr	s15, [r7, #8]
    		if (error < -180) error += 360;
 8001a3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a40:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001c0c <main+0x338>
 8001a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4c:	d508      	bpl.n	8001a60 <main+0x18c>
 8001a4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a52:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001c00 <main+0x32c>
 8001a56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a5a:	edc7 7a02 	vstr	s15, [r7, #8]
 8001a5e:	e010      	b.n	8001a82 <main+0x1ae>
    		else if (error >= 180) error -= 360;
 8001a60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a64:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001c10 <main+0x33c>
 8001a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	db07      	blt.n	8001a82 <main+0x1ae>
 8001a72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a76:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001c00 <main+0x32c>
 8001a7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a7e:	edc7 7a02 	vstr	s15, [r7, #8]
    		IMU_heading_offset -= error/5;
 8001a82:	4b5e      	ldr	r3, [pc, #376]	; (8001bfc <main+0x328>)
 8001a84:	ed93 7a00 	vldr	s14, [r3]
 8001a88:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a8c:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8001a90:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a98:	4b58      	ldr	r3, [pc, #352]	; (8001bfc <main+0x328>)
 8001a9a:	edc3 7a00 	vstr	s15, [r3]
    		if (IMU_heading_offset < 0) IMU_heading_offset += 360;
 8001a9e:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <main+0x328>)
 8001aa0:	edd3 7a00 	vldr	s15, [r3]
 8001aa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aac:	d50a      	bpl.n	8001ac4 <main+0x1f0>
 8001aae:	4b53      	ldr	r3, [pc, #332]	; (8001bfc <main+0x328>)
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001c00 <main+0x32c>
 8001ab8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001abc:	4b4f      	ldr	r3, [pc, #316]	; (8001bfc <main+0x328>)
 8001abe:	edc3 7a00 	vstr	s15, [r3]
 8001ac2:	e013      	b.n	8001aec <main+0x218>
    		else if (IMU_heading_offset >= 360) IMU_heading_offset -= 360;
 8001ac4:	4b4d      	ldr	r3, [pc, #308]	; (8001bfc <main+0x328>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001c00 <main+0x32c>
 8001ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	db09      	blt.n	8001aec <main+0x218>
 8001ad8:	4b48      	ldr	r3, [pc, #288]	; (8001bfc <main+0x328>)
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001c00 <main+0x32c>
 8001ae2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ae6:	4b45      	ldr	r3, [pc, #276]	; (8001bfc <main+0x328>)
 8001ae8:	edc3 7a00 	vstr	s15, [r3]
    	}

    	float target_error = heading - target_heading;
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f7fe fd2b 	bl	8000548 <__aeabi_f2d>
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <main+0x314>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fbc6 	bl	8000288 <__aeabi_dsub>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7ff f870 	bl	8000be8 <__aeabi_d2f>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	607b      	str	r3, [r7, #4]
    	if (target_error < -180) target_error += 360;
 8001b0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b10:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001c0c <main+0x338>
 8001b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1c:	d508      	bpl.n	8001b30 <main+0x25c>
 8001b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b22:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001c00 <main+0x32c>
 8001b26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b2a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b2e:	e010      	b.n	8001b52 <main+0x27e>
    	else if (target_error >= 180) target_error -= 360;
 8001b30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b34:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001c10 <main+0x33c>
 8001b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b40:	db07      	blt.n	8001b52 <main+0x27e>
 8001b42:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b46:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001c00 <main+0x32c>
 8001b4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b4e:	edc7 7a01 	vstr	s15, [r7, #4]

    	set_steering(target_error/180.0*steer_Pk);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7fe fcf8 	bl	8000548 <__aeabi_f2d>
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <main+0x340>)
 8001b5e:	f7fe fe75 	bl	800084c <__aeabi_ddiv>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4614      	mov	r4, r2
 8001b68:	461d      	mov	r5, r3
 8001b6a:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <main+0x344>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fcea 	bl	8000548 <__aeabi_f2d>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4620      	mov	r0, r4
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	f7fe fd3c 	bl	80005f8 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4610      	mov	r0, r2
 8001b86:	4619      	mov	r1, r3
 8001b88:	f7ff f82e 	bl	8000be8 <__aeabi_d2f>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	ee00 3a10 	vmov	s0, r3
 8001b92:	f7ff fe39 	bl	8001808 <set_steering>
    	set_speed(.7);
 8001b96:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001c1c <main+0x348>
 8001b9a:	f7ff fe67 	bl	800186c <set_speed>
    if (run && enable) {
 8001b9e:	e007      	b.n	8001bb0 <main+0x2dc>
    } else {
    	set_steering(0);
 8001ba0:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001bdc <main+0x308>
 8001ba4:	f7ff fe30 	bl	8001808 <set_steering>
    	set_speed(0);
 8001ba8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001bdc <main+0x308>
 8001bac:	f7ff fe5e 	bl	800186c <set_speed>
    }

    HAL_Delay(LOOP_DELAY);
 8001bb0:	2064      	movs	r0, #100	; 0x64
 8001bb2:	f000 ff87 	bl	8002ac4 <HAL_Delay>
    MX_USB_HOST_Process();
 8001bb6:	e6dd      	b.n	8001974 <main+0xa0>
 8001bb8:	08013ba0 	.word	0x08013ba0
 8001bbc:	20000370 	.word	0x20000370
 8001bc0:	200005cc 	.word	0x200005cc
 8001bc4:	200002e0 	.word	0x200002e0
 8001bc8:	200004fc 	.word	0x200004fc
 8001bcc:	200003b8 	.word	0x200003b8
 8001bd0:	20000560 	.word	0x20000560
 8001bd4:	20000328 	.word	0x20000328
 8001bd8:	20000234 	.word	0x20000234
 8001bdc:	00000000 	.word	0x00000000
 8001be0:	20000481 	.word	0x20000481
 8001be4:	20000490 	.word	0x20000490
 8001be8:	20000488 	.word	0x20000488
 8001bec:	08013bac 	.word	0x08013bac
 8001bf0:	20000498 	.word	0x20000498
 8001bf4:	200005cd 	.word	0x200005cd
 8001bf8:	2000047c 	.word	0x2000047c
 8001bfc:	20000484 	.word	0x20000484
 8001c00:	43b40000 	.word	0x43b40000
 8001c04:	20000480 	.word	0x20000480
 8001c08:	20000478 	.word	0x20000478
 8001c0c:	c3340000 	.word	0xc3340000
 8001c10:	43340000 	.word	0x43340000
 8001c14:	40668000 	.word	0x40668000
 8001c18:	20000010 	.word	0x20000010
 8001c1c:	3f333333 	.word	0x3f333333

08001c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b094      	sub	sp, #80	; 0x50
 8001c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c26:	f107 0320 	add.w	r3, r7, #32
 8001c2a:	2230      	movs	r2, #48	; 0x30
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f00c fecb 	bl	800e9ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	4b28      	ldr	r3, [pc, #160]	; (8001cec <SystemClock_Config+0xcc>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	4a27      	ldr	r2, [pc, #156]	; (8001cec <SystemClock_Config+0xcc>)
 8001c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c52:	6413      	str	r3, [r2, #64]	; 0x40
 8001c54:	4b25      	ldr	r3, [pc, #148]	; (8001cec <SystemClock_Config+0xcc>)
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c60:	2300      	movs	r3, #0
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	4b22      	ldr	r3, [pc, #136]	; (8001cf0 <SystemClock_Config+0xd0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <SystemClock_Config+0xd0>)
 8001c6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <SystemClock_Config+0xd0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c86:	2302      	movs	r3, #2
 8001c88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c90:	2308      	movs	r3, #8
 8001c92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c94:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001c98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca2:	f107 0320 	add.w	r3, r7, #32
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 feb2 	bl	8006a10 <HAL_RCC_OscConfig>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001cb2:	f000 faef 	bl	8002294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb6:	230f      	movs	r3, #15
 8001cb8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ccc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	2105      	movs	r1, #5
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f005 f913 	bl	8006f00 <HAL_RCC_ClockConfig>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ce0:	f000 fad8 	bl	8002294 <Error_Handler>
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3750      	adds	r7, #80	; 0x50
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40007000 	.word	0x40007000

08001cf4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001cfa:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <MX_I2C1_Init+0x54>)
 8001cfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d00:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <MX_I2C1_Init+0x58>)
 8001d02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d30:	4804      	ldr	r0, [pc, #16]	; (8001d44 <MX_I2C1_Init+0x50>)
 8001d32:	f003 fe49 	bl	80059c8 <HAL_I2C_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d3c:	f000 faaa 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000234 	.word	0x20000234
 8001d48:	40005400 	.word	0x40005400
 8001d4c:	000186a0 	.word	0x000186a0

08001d50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d56:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <MX_SPI1_Init+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d62:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d9c:	220a      	movs	r2, #10
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001da2:	f005 facd 	bl	8007340 <HAL_SPI_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dac:	f000 fa72 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000288 	.word	0x20000288
 8001db8:	40013000 	.word	0x40013000

08001dbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b096      	sub	sp, #88	; 0x58
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	611a      	str	r2, [r3, #16]
 8001dea:	615a      	str	r2, [r3, #20]
 8001dec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2220      	movs	r2, #32
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f00c fde8 	bl	800e9ca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dfa:	4b46      	ldr	r3, [pc, #280]	; (8001f14 <MX_TIM1_Init+0x158>)
 8001dfc:	4a46      	ldr	r2, [pc, #280]	; (8001f18 <MX_TIM1_Init+0x15c>)
 8001dfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 8001e00:	4b44      	ldr	r3, [pc, #272]	; (8001f14 <MX_TIM1_Init+0x158>)
 8001e02:	22a8      	movs	r2, #168	; 0xa8
 8001e04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b43      	ldr	r3, [pc, #268]	; (8001f14 <MX_TIM1_Init+0x158>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001e0c:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <MX_TIM1_Init+0x158>)
 8001e0e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001e12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e14:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <MX_TIM1_Init+0x158>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e1a:	4b3e      	ldr	r3, [pc, #248]	; (8001f14 <MX_TIM1_Init+0x158>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e20:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <MX_TIM1_Init+0x158>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e26:	483b      	ldr	r0, [pc, #236]	; (8001f14 <MX_TIM1_Init+0x158>)
 8001e28:	f005 fb13 	bl	8007452 <HAL_TIM_Base_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e32:	f000 fa2f 	bl	8002294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e40:	4619      	mov	r1, r3
 8001e42:	4834      	ldr	r0, [pc, #208]	; (8001f14 <MX_TIM1_Init+0x158>)
 8001e44:	f005 fd38 	bl	80078b8 <HAL_TIM_ConfigClockSource>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001e4e:	f000 fa21 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e52:	4830      	ldr	r0, [pc, #192]	; (8001f14 <MX_TIM1_Init+0x158>)
 8001e54:	f005 fb4c 	bl	80074f0 <HAL_TIM_PWM_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001e5e:	f000 fa19 	bl	8002294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4828      	ldr	r0, [pc, #160]	; (8001f14 <MX_TIM1_Init+0x158>)
 8001e72:	f006 f905 	bl	8008080 <HAL_TIMEx_MasterConfigSynchronization>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001e7c:	f000 fa0a 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e80:	2360      	movs	r3, #96	; 0x60
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	481b      	ldr	r0, [pc, #108]	; (8001f14 <MX_TIM1_Init+0x158>)
 8001ea8:	f005 fc44 	bl	8007734 <HAL_TIM_PWM_ConfigChannel>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001eb2:	f000 f9ef 	bl	8002294 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4814      	ldr	r0, [pc, #80]	; (8001f14 <MX_TIM1_Init+0x158>)
 8001ec4:	f005 fc36 	bl	8007734 <HAL_TIM_PWM_ConfigChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001ece:	f000 f9e1 	bl	8002294 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4807      	ldr	r0, [pc, #28]	; (8001f14 <MX_TIM1_Init+0x158>)
 8001ef6:	f006 f93f 	bl	8008178 <HAL_TIMEx_ConfigBreakDeadTime>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001f00:	f000 f9c8 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f04:	4803      	ldr	r0, [pc, #12]	; (8001f14 <MX_TIM1_Init+0x158>)
 8001f06:	f000 faa5 	bl	8002454 <HAL_TIM_MspPostInit>

}
 8001f0a:	bf00      	nop
 8001f0c:	3758      	adds	r7, #88	; 0x58
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200002e0 	.word	0x200002e0
 8001f18:	40010000 	.word	0x40010000

08001f1c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <MX_UART5_Init+0x4c>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <MX_UART5_Init+0x50>)
 8001f24:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 38400;
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <MX_UART5_Init+0x4c>)
 8001f28:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001f2c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <MX_UART5_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <MX_UART5_Init+0x4c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <MX_UART5_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MX_UART5_Init+0x4c>)
 8001f42:	220c      	movs	r2, #12
 8001f44:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f46:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <MX_UART5_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <MX_UART5_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <MX_UART5_Init+0x4c>)
 8001f54:	f006 f962 	bl	800821c <HAL_UART_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001f5e:	f000 f999 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000328 	.word	0x20000328
 8001f6c:	40005000 	.word	0x40005000

08001f70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f74:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <MX_USART2_UART_Init+0x50>)
 8001f78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001f7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001f96:	220c      	movs	r2, #12
 8001f98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_USART2_UART_Init+0x4c>)
 8001fa8:	f006 f938 	bl	800821c <HAL_UART_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fb2:	f000 f96f 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000370 	.word	0x20000370
 8001fc0:	40004400 	.word	0x40004400

08001fc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <MX_USART3_UART_Init+0x50>)
 8001fcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001fea:	220c      	movs	r2, #12
 8001fec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <MX_USART3_UART_Init+0x4c>)
 8001ffc:	f006 f90e 	bl	800821c <HAL_UART_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002006:	f000 f945 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200003b8 	.word	0x200003b8
 8002014:	40004800 	.word	0x40004800

08002018 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MX_DMA_Init+0x3c>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <MX_DMA_Init+0x3c>)
 8002028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <MX_DMA_Init+0x3c>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	200c      	movs	r0, #12
 8002040:	f000 fe3f 	bl	8002cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002044:	200c      	movs	r0, #12
 8002046:	f000 fe58 	bl	8002cfa <HAL_NVIC_EnableIRQ>

}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800

08002058 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08c      	sub	sp, #48	; 0x30
 800205c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205e:	f107 031c 	add.w	r3, r7, #28
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]
 8002068:	609a      	str	r2, [r3, #8]
 800206a:	60da      	str	r2, [r3, #12]
 800206c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	4b82      	ldr	r3, [pc, #520]	; (800227c <MX_GPIO_Init+0x224>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a81      	ldr	r2, [pc, #516]	; (800227c <MX_GPIO_Init+0x224>)
 8002078:	f043 0310 	orr.w	r3, r3, #16
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b7f      	ldr	r3, [pc, #508]	; (800227c <MX_GPIO_Init+0x224>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	4b7b      	ldr	r3, [pc, #492]	; (800227c <MX_GPIO_Init+0x224>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a7a      	ldr	r2, [pc, #488]	; (800227c <MX_GPIO_Init+0x224>)
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b78      	ldr	r3, [pc, #480]	; (800227c <MX_GPIO_Init+0x224>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	4b74      	ldr	r3, [pc, #464]	; (800227c <MX_GPIO_Init+0x224>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a73      	ldr	r2, [pc, #460]	; (800227c <MX_GPIO_Init+0x224>)
 80020b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b71      	ldr	r3, [pc, #452]	; (800227c <MX_GPIO_Init+0x224>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b6d      	ldr	r3, [pc, #436]	; (800227c <MX_GPIO_Init+0x224>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a6c      	ldr	r2, [pc, #432]	; (800227c <MX_GPIO_Init+0x224>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b6a      	ldr	r3, [pc, #424]	; (800227c <MX_GPIO_Init+0x224>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	4b66      	ldr	r3, [pc, #408]	; (800227c <MX_GPIO_Init+0x224>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a65      	ldr	r2, [pc, #404]	; (800227c <MX_GPIO_Init+0x224>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b63      	ldr	r3, [pc, #396]	; (800227c <MX_GPIO_Init+0x224>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	4b5f      	ldr	r3, [pc, #380]	; (800227c <MX_GPIO_Init+0x224>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a5e      	ldr	r2, [pc, #376]	; (800227c <MX_GPIO_Init+0x224>)
 8002104:	f043 0308 	orr.w	r3, r3, #8
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b5c      	ldr	r3, [pc, #368]	; (800227c <MX_GPIO_Init+0x224>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002116:	2200      	movs	r2, #0
 8002118:	2108      	movs	r1, #8
 800211a:	4859      	ldr	r0, [pc, #356]	; (8002280 <MX_GPIO_Init+0x228>)
 800211c:	f001 fb20 	bl	8003760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002120:	2201      	movs	r2, #1
 8002122:	2101      	movs	r1, #1
 8002124:	4857      	ldr	r0, [pc, #348]	; (8002284 <MX_GPIO_Init+0x22c>)
 8002126:	f001 fb1b 	bl	8003760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800212a:	2200      	movs	r2, #0
 800212c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002130:	4855      	ldr	r0, [pc, #340]	; (8002288 <MX_GPIO_Init+0x230>)
 8002132:	f001 fb15 	bl	8003760 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002136:	2308      	movs	r3, #8
 8002138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2300      	movs	r3, #0
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002146:	f107 031c 	add.w	r3, r7, #28
 800214a:	4619      	mov	r1, r3
 800214c:	484c      	ldr	r0, [pc, #304]	; (8002280 <MX_GPIO_Init+0x228>)
 800214e:	f001 f96b 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002152:	2301      	movs	r3, #1
 8002154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002156:	2301      	movs	r3, #1
 8002158:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	2300      	movs	r3, #0
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002162:	f107 031c 	add.w	r3, r7, #28
 8002166:	4619      	mov	r1, r3
 8002168:	4846      	ldr	r0, [pc, #280]	; (8002284 <MX_GPIO_Init+0x22c>)
 800216a:	f001 f95d 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800216e:	2308      	movs	r3, #8
 8002170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002172:	2302      	movs	r3, #2
 8002174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800217e:	2305      	movs	r3, #5
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002182:	f107 031c 	add.w	r3, r7, #28
 8002186:	4619      	mov	r1, r3
 8002188:	483e      	ldr	r0, [pc, #248]	; (8002284 <MX_GPIO_Init+0x22c>)
 800218a:	f001 f94d 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800218e:	2301      	movs	r3, #1
 8002190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002192:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	4619      	mov	r1, r3
 80021a2:	483a      	ldr	r0, [pc, #232]	; (800228c <MX_GPIO_Init+0x234>)
 80021a4:	f001 f940 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021a8:	2310      	movs	r3, #16
 80021aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021b8:	2306      	movs	r3, #6
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	4619      	mov	r1, r3
 80021c2:	4832      	ldr	r0, [pc, #200]	; (800228c <MX_GPIO_Init+0x234>)
 80021c4:	f001 f930 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80021c8:	2304      	movs	r3, #4
 80021ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80021d4:	f107 031c 	add.w	r3, r7, #28
 80021d8:	4619      	mov	r1, r3
 80021da:	482d      	ldr	r0, [pc, #180]	; (8002290 <MX_GPIO_Init+0x238>)
 80021dc:	f001 f924 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80021e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021f2:	2305      	movs	r3, #5
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80021f6:	f107 031c 	add.w	r3, r7, #28
 80021fa:	4619      	mov	r1, r3
 80021fc:	4824      	ldr	r0, [pc, #144]	; (8002290 <MX_GPIO_Init+0x238>)
 80021fe:	f001 f913 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002202:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002206:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002208:	2301      	movs	r3, #1
 800220a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	481b      	ldr	r0, [pc, #108]	; (8002288 <MX_GPIO_Init+0x230>)
 800221c:	f001 f904 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8002220:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8002224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002232:	2306      	movs	r3, #6
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002236:	f107 031c 	add.w	r3, r7, #28
 800223a:	4619      	mov	r1, r3
 800223c:	4811      	ldr	r0, [pc, #68]	; (8002284 <MX_GPIO_Init+0x22c>)
 800223e:	f001 f8f3 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002242:	2320      	movs	r3, #32
 8002244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800224e:	f107 031c 	add.w	r3, r7, #28
 8002252:	4619      	mov	r1, r3
 8002254:	480c      	ldr	r0, [pc, #48]	; (8002288 <MX_GPIO_Init+0x230>)
 8002256:	f001 f8e7 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800225a:	2302      	movs	r3, #2
 800225c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800225e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	4619      	mov	r1, r3
 800226e:	4804      	ldr	r0, [pc, #16]	; (8002280 <MX_GPIO_Init+0x228>)
 8002270:	f001 f8da 	bl	8003428 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002274:	bf00      	nop
 8002276:	3730      	adds	r7, #48	; 0x30
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	40021000 	.word	0x40021000
 8002284:	40020800 	.word	0x40020800
 8002288:	40020c00 	.word	0x40020c00
 800228c:	40020000 	.word	0x40020000
 8002290:	40020400 	.word	0x40020400

08002294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002298:	b672      	cpsid	i
}
 800229a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800229c:	e7fe      	b.n	800229c <Error_Handler+0x8>
	...

080022a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_MspInit+0x4c>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	4a0f      	ldr	r2, [pc, #60]	; (80022ec <HAL_MspInit+0x4c>)
 80022b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <HAL_MspInit+0x4c>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022be:	607b      	str	r3, [r7, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	603b      	str	r3, [r7, #0]
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_MspInit+0x4c>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a08      	ldr	r2, [pc, #32]	; (80022ec <HAL_MspInit+0x4c>)
 80022cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_MspInit+0x4c>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022de:	2007      	movs	r0, #7
 80022e0:	f000 fce4 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40023800 	.word	0x40023800

080022f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a19      	ldr	r2, [pc, #100]	; (8002374 <HAL_I2C_MspInit+0x84>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d12c      	bne.n	800236c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	4b18      	ldr	r3, [pc, #96]	; (8002378 <HAL_I2C_MspInit+0x88>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	4a17      	ldr	r2, [pc, #92]	; (8002378 <HAL_I2C_MspInit+0x88>)
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	6313      	str	r3, [r2, #48]	; 0x30
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_I2C_MspInit+0x88>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800232e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002334:	2312      	movs	r3, #18
 8002336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002338:	2301      	movs	r3, #1
 800233a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	2300      	movs	r3, #0
 800233e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002340:	2304      	movs	r3, #4
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4619      	mov	r1, r3
 800234a:	480c      	ldr	r0, [pc, #48]	; (800237c <HAL_I2C_MspInit+0x8c>)
 800234c:	f001 f86c 	bl	8003428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_I2C_MspInit+0x88>)
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	4a07      	ldr	r2, [pc, #28]	; (8002378 <HAL_I2C_MspInit+0x88>)
 800235a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800235e:	6413      	str	r3, [r2, #64]	; 0x40
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_I2C_MspInit+0x88>)
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800236c:	bf00      	nop
 800236e:	3728      	adds	r7, #40	; 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40005400 	.word	0x40005400
 8002378:	40023800 	.word	0x40023800
 800237c:	40020400 	.word	0x40020400

08002380 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a19      	ldr	r2, [pc, #100]	; (8002404 <HAL_SPI_MspInit+0x84>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d12b      	bne.n	80023fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_SPI_MspInit+0x88>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	4a17      	ldr	r2, [pc, #92]	; (8002408 <HAL_SPI_MspInit+0x88>)
 80023ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023b0:	6453      	str	r3, [r2, #68]	; 0x44
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <HAL_SPI_MspInit+0x88>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <HAL_SPI_MspInit+0x88>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a10      	ldr	r2, [pc, #64]	; (8002408 <HAL_SPI_MspInit+0x88>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <HAL_SPI_MspInit+0x88>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80023da:	23e0      	movs	r3, #224	; 0xe0
 80023dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023de:	2302      	movs	r3, #2
 80023e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e6:	2300      	movs	r3, #0
 80023e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023ea:	2305      	movs	r3, #5
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4619      	mov	r1, r3
 80023f4:	4805      	ldr	r0, [pc, #20]	; (800240c <HAL_SPI_MspInit+0x8c>)
 80023f6:	f001 f817 	bl	8003428 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023fa:	bf00      	nop
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40013000 	.word	0x40013000
 8002408:	40023800 	.word	0x40023800
 800240c:	40020000 	.word	0x40020000

08002410 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a0b      	ldr	r2, [pc, #44]	; (800244c <HAL_TIM_Base_MspInit+0x3c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d10d      	bne.n	800243e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_TIM_Base_MspInit+0x40>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	4a09      	ldr	r2, [pc, #36]	; (8002450 <HAL_TIM_Base_MspInit+0x40>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6453      	str	r3, [r2, #68]	; 0x44
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <HAL_TIM_Base_MspInit+0x40>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40010000 	.word	0x40010000
 8002450:	40023800 	.word	0x40023800

08002454 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 030c 	add.w	r3, r7, #12
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a12      	ldr	r2, [pc, #72]	; (80024bc <HAL_TIM_MspPostInit+0x68>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d11e      	bne.n	80024b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_TIM_MspPostInit+0x6c>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <HAL_TIM_MspPostInit+0x6c>)
 8002480:	f043 0310 	orr.w	r3, r3, #16
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_TIM_MspPostInit+0x6c>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0310 	and.w	r3, r3, #16
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002492:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002496:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024a4:	2301      	movs	r3, #1
 80024a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	4619      	mov	r1, r3
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <HAL_TIM_MspPostInit+0x70>)
 80024b0:	f000 ffba 	bl	8003428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80024b4:	bf00      	nop
 80024b6:	3720      	adds	r7, #32
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40010000 	.word	0x40010000
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40021000 	.word	0x40021000

080024c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b090      	sub	sp, #64	; 0x40
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a8a      	ldr	r2, [pc, #552]	; (8002710 <HAL_UART_MspInit+0x248>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d153      	bne.n	8002592 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ee:	4b89      	ldr	r3, [pc, #548]	; (8002714 <HAL_UART_MspInit+0x24c>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a88      	ldr	r2, [pc, #544]	; (8002714 <HAL_UART_MspInit+0x24c>)
 80024f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
 80024fa:	4b86      	ldr	r3, [pc, #536]	; (8002714 <HAL_UART_MspInit+0x24c>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
 8002504:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
 800250a:	4b82      	ldr	r3, [pc, #520]	; (8002714 <HAL_UART_MspInit+0x24c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a81      	ldr	r2, [pc, #516]	; (8002714 <HAL_UART_MspInit+0x24c>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b7f      	ldr	r3, [pc, #508]	; (8002714 <HAL_UART_MspInit+0x24c>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	623b      	str	r3, [r7, #32]
 8002526:	4b7b      	ldr	r3, [pc, #492]	; (8002714 <HAL_UART_MspInit+0x24c>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a7a      	ldr	r2, [pc, #488]	; (8002714 <HAL_UART_MspInit+0x24c>)
 800252c:	f043 0308 	orr.w	r3, r3, #8
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b78      	ldr	r3, [pc, #480]	; (8002714 <HAL_UART_MspInit+0x24c>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	623b      	str	r3, [r7, #32]
 800253c:	6a3b      	ldr	r3, [r7, #32]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800253e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	2302      	movs	r3, #2
 8002546:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002550:	2308      	movs	r3, #8
 8002552:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002558:	4619      	mov	r1, r3
 800255a:	486f      	ldr	r0, [pc, #444]	; (8002718 <HAL_UART_MspInit+0x250>)
 800255c:	f000 ff64 	bl	8003428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002560:	2304      	movs	r3, #4
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	2302      	movs	r3, #2
 8002566:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256c:	2303      	movs	r3, #3
 800256e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002570:	2308      	movs	r3, #8
 8002572:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002574:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002578:	4619      	mov	r1, r3
 800257a:	4868      	ldr	r0, [pc, #416]	; (800271c <HAL_UART_MspInit+0x254>)
 800257c:	f000 ff54 	bl	8003428 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	2035      	movs	r0, #53	; 0x35
 8002586:	f000 fb9c 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800258a:	2035      	movs	r0, #53	; 0x35
 800258c:	f000 fbb5 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002590:	e0ba      	b.n	8002708 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a62      	ldr	r2, [pc, #392]	; (8002720 <HAL_UART_MspInit+0x258>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d12c      	bne.n	80025f6 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800259c:	2300      	movs	r3, #0
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	4b5c      	ldr	r3, [pc, #368]	; (8002714 <HAL_UART_MspInit+0x24c>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	4a5b      	ldr	r2, [pc, #364]	; (8002714 <HAL_UART_MspInit+0x24c>)
 80025a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025aa:	6413      	str	r3, [r2, #64]	; 0x40
 80025ac:	4b59      	ldr	r3, [pc, #356]	; (8002714 <HAL_UART_MspInit+0x24c>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	4b55      	ldr	r3, [pc, #340]	; (8002714 <HAL_UART_MspInit+0x24c>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	4a54      	ldr	r2, [pc, #336]	; (8002714 <HAL_UART_MspInit+0x24c>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6313      	str	r3, [r2, #48]	; 0x30
 80025c8:	4b52      	ldr	r3, [pc, #328]	; (8002714 <HAL_UART_MspInit+0x24c>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025d4:	230c      	movs	r3, #12
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e0:	2303      	movs	r3, #3
 80025e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025e4:	2307      	movs	r3, #7
 80025e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ec:	4619      	mov	r1, r3
 80025ee:	484d      	ldr	r0, [pc, #308]	; (8002724 <HAL_UART_MspInit+0x25c>)
 80025f0:	f000 ff1a 	bl	8003428 <HAL_GPIO_Init>
}
 80025f4:	e088      	b.n	8002708 <HAL_UART_MspInit+0x240>
  else if(huart->Instance==USART3)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a4b      	ldr	r2, [pc, #300]	; (8002728 <HAL_UART_MspInit+0x260>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	f040 8083 	bne.w	8002708 <HAL_UART_MspInit+0x240>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	4b43      	ldr	r3, [pc, #268]	; (8002714 <HAL_UART_MspInit+0x24c>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	4a42      	ldr	r2, [pc, #264]	; (8002714 <HAL_UART_MspInit+0x24c>)
 800260c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002610:	6413      	str	r3, [r2, #64]	; 0x40
 8002612:	4b40      	ldr	r3, [pc, #256]	; (8002714 <HAL_UART_MspInit+0x24c>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <HAL_UART_MspInit+0x24c>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a3b      	ldr	r2, [pc, #236]	; (8002714 <HAL_UART_MspInit+0x24c>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b39      	ldr	r3, [pc, #228]	; (8002714 <HAL_UART_MspInit+0x24c>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b35      	ldr	r3, [pc, #212]	; (8002714 <HAL_UART_MspInit+0x24c>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	4a34      	ldr	r2, [pc, #208]	; (8002714 <HAL_UART_MspInit+0x24c>)
 8002644:	f043 0308 	orr.w	r3, r3, #8
 8002648:	6313      	str	r3, [r2, #48]	; 0x30
 800264a:	4b32      	ldr	r3, [pc, #200]	; (8002714 <HAL_UART_MspInit+0x24c>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002656:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265c:	2302      	movs	r3, #2
 800265e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002664:	2303      	movs	r3, #3
 8002666:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002668:	2307      	movs	r3, #7
 800266a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800266c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002670:	4619      	mov	r1, r3
 8002672:	482e      	ldr	r0, [pc, #184]	; (800272c <HAL_UART_MspInit+0x264>)
 8002674:	f000 fed8 	bl	8003428 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267e:	2302      	movs	r3, #2
 8002680:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002686:	2303      	movs	r3, #3
 8002688:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800268a:	2307      	movs	r3, #7
 800268c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800268e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002692:	4619      	mov	r1, r3
 8002694:	4821      	ldr	r0, [pc, #132]	; (800271c <HAL_UART_MspInit+0x254>)
 8002696:	f000 fec7 	bl	8003428 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800269a:	4b25      	ldr	r3, [pc, #148]	; (8002730 <HAL_UART_MspInit+0x268>)
 800269c:	4a25      	ldr	r2, [pc, #148]	; (8002734 <HAL_UART_MspInit+0x26c>)
 800269e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80026a0:	4b23      	ldr	r3, [pc, #140]	; (8002730 <HAL_UART_MspInit+0x268>)
 80026a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026a6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026a8:	4b21      	ldr	r3, [pc, #132]	; (8002730 <HAL_UART_MspInit+0x268>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <HAL_UART_MspInit+0x268>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026b4:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <HAL_UART_MspInit+0x268>)
 80026b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ba:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026bc:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <HAL_UART_MspInit+0x268>)
 80026be:	2200      	movs	r2, #0
 80026c0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026c2:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_UART_MspInit+0x268>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <HAL_UART_MspInit+0x268>)
 80026ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ce:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026d0:	4b17      	ldr	r3, [pc, #92]	; (8002730 <HAL_UART_MspInit+0x268>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <HAL_UART_MspInit+0x268>)
 80026d8:	2200      	movs	r2, #0
 80026da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80026dc:	4814      	ldr	r0, [pc, #80]	; (8002730 <HAL_UART_MspInit+0x268>)
 80026de:	f000 fb27 	bl	8002d30 <HAL_DMA_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_UART_MspInit+0x224>
      Error_Handler();
 80026e8:	f7ff fdd4 	bl	8002294 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a10      	ldr	r2, [pc, #64]	; (8002730 <HAL_UART_MspInit+0x268>)
 80026f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80026f2:	4a0f      	ldr	r2, [pc, #60]	; (8002730 <HAL_UART_MspInit+0x268>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80026f8:	2200      	movs	r2, #0
 80026fa:	2100      	movs	r1, #0
 80026fc:	2027      	movs	r0, #39	; 0x27
 80026fe:	f000 fae0 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002702:	2027      	movs	r0, #39	; 0x27
 8002704:	f000 faf9 	bl	8002cfa <HAL_NVIC_EnableIRQ>
}
 8002708:	bf00      	nop
 800270a:	3740      	adds	r7, #64	; 0x40
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40005000 	.word	0x40005000
 8002714:	40023800 	.word	0x40023800
 8002718:	40020800 	.word	0x40020800
 800271c:	40020c00 	.word	0x40020c00
 8002720:	40004400 	.word	0x40004400
 8002724:	40020000 	.word	0x40020000
 8002728:	40004800 	.word	0x40004800
 800272c:	40020400 	.word	0x40020400
 8002730:	20000400 	.word	0x20000400
 8002734:	40026028 	.word	0x40026028

08002738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800273c:	e7fe      	b.n	800273c <NMI_Handler+0x4>

0800273e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002742:	e7fe      	b.n	8002742 <HardFault_Handler+0x4>

08002744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <MemManage_Handler+0x4>

0800274a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800274e:	e7fe      	b.n	800274e <BusFault_Handler+0x4>

08002750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <UsageFault_Handler+0x4>

08002756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002784:	f000 f97e 	bl	8002a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}

0800278c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <DMA1_Stream1_IRQHandler+0x10>)
 8002792:	f000 fc0d 	bl	8002fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000400 	.word	0x20000400

080027a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <USART3_IRQHandler+0x10>)
 80027a6:	f005 fe39 	bl	800841c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200003b8 	.word	0x200003b8

080027b4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <UART5_IRQHandler+0x10>)
 80027ba:	f005 fe2f 	bl	800841c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000328 	.word	0x20000328

080027c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <OTG_FS_IRQHandler+0x10>)
 80027ce:	f001 fac1 	bl	8003d54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200009b4 	.word	0x200009b4

080027dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  return 1;
 80027e0:	2301      	movs	r3, #1
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <_kill>:

int _kill(int pid, int sig)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027f6:	f00c f95d 	bl	800eab4 <__errno>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2216      	movs	r2, #22
 80027fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002800:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002804:	4618      	mov	r0, r3
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <_exit>:

void _exit (int status)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002814:	f04f 31ff 	mov.w	r1, #4294967295
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ffe7 	bl	80027ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800281e:	e7fe      	b.n	800281e <_exit+0x12>

08002820 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	e00a      	b.n	8002848 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002832:	f3af 8000 	nop.w
 8002836:	4601      	mov	r1, r0
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	60ba      	str	r2, [r7, #8]
 800283e:	b2ca      	uxtb	r2, r1
 8002840:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3301      	adds	r3, #1
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	dbf0      	blt.n	8002832 <_read+0x12>
  }

  return len;
 8002850:	687b      	ldr	r3, [r7, #4]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e009      	b.n	8002880 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	60ba      	str	r2, [r7, #8]
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	3301      	adds	r3, #1
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	429a      	cmp	r2, r3
 8002886:	dbf1      	blt.n	800286c <_write+0x12>
  }
  return len;
 8002888:	687b      	ldr	r3, [r7, #4]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <_close>:

int _close(int file)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ba:	605a      	str	r2, [r3, #4]
  return 0;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <_isatty>:

int _isatty(int file)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028d2:	2301      	movs	r3, #1
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002904:	4a14      	ldr	r2, [pc, #80]	; (8002958 <_sbrk+0x5c>)
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <_sbrk+0x60>)
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <_sbrk+0x64>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d102      	bne.n	800291e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002918:	4b11      	ldr	r3, [pc, #68]	; (8002960 <_sbrk+0x64>)
 800291a:	4a12      	ldr	r2, [pc, #72]	; (8002964 <_sbrk+0x68>)
 800291c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <_sbrk+0x64>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4413      	add	r3, r2
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	429a      	cmp	r2, r3
 800292a:	d207      	bcs.n	800293c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800292c:	f00c f8c2 	bl	800eab4 <__errno>
 8002930:	4603      	mov	r3, r0
 8002932:	220c      	movs	r2, #12
 8002934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
 800293a:	e009      	b.n	8002950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800293c:	4b08      	ldr	r3, [pc, #32]	; (8002960 <_sbrk+0x64>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002942:	4b07      	ldr	r3, [pc, #28]	; (8002960 <_sbrk+0x64>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	4a05      	ldr	r2, [pc, #20]	; (8002960 <_sbrk+0x64>)
 800294c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800294e:	68fb      	ldr	r3, [r7, #12]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20020000 	.word	0x20020000
 800295c:	00000400 	.word	0x00000400
 8002960:	200005d0 	.word	0x200005d0
 8002964:	20000ee0 	.word	0x20000ee0

08002968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <SystemInit+0x20>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	4a05      	ldr	r2, [pc, #20]	; (8002988 <SystemInit+0x20>)
 8002974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800298c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002990:	f7ff ffea 	bl	8002968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002994:	480c      	ldr	r0, [pc, #48]	; (80029c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002996:	490d      	ldr	r1, [pc, #52]	; (80029cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002998:	4a0d      	ldr	r2, [pc, #52]	; (80029d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800299c:	e002      	b.n	80029a4 <LoopCopyDataInit>

0800299e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800299e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029a2:	3304      	adds	r3, #4

080029a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a8:	d3f9      	bcc.n	800299e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029aa:	4a0a      	ldr	r2, [pc, #40]	; (80029d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029ac:	4c0a      	ldr	r4, [pc, #40]	; (80029d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b0:	e001      	b.n	80029b6 <LoopFillZerobss>

080029b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b4:	3204      	adds	r2, #4

080029b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b8:	d3fb      	bcc.n	80029b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029ba:	f00c f881 	bl	800eac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029be:	f7fe ff89 	bl	80018d4 <main>
  bx  lr    
 80029c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80029c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029cc:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80029d0:	080142b0 	.word	0x080142b0
  ldr r2, =_sbss
 80029d4:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80029d8:	20000ee0 	.word	0x20000ee0

080029dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029dc:	e7fe      	b.n	80029dc <ADC_IRQHandler>
	...

080029e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <HAL_Init+0x40>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a0d      	ldr	r2, [pc, #52]	; (8002a20 <HAL_Init+0x40>)
 80029ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_Init+0x40>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <HAL_Init+0x40>)
 80029f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <HAL_Init+0x40>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <HAL_Init+0x40>)
 8002a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a08:	2003      	movs	r0, #3
 8002a0a:	f000 f94f 	bl	8002cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a0e:	2000      	movs	r0, #0
 8002a10:	f000 f808 	bl	8002a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a14:	f7ff fc44 	bl	80022a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023c00 	.word	0x40023c00

08002a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_InitTick+0x54>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_InitTick+0x58>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	4619      	mov	r1, r3
 8002a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f967 	bl	8002d16 <HAL_SYSTICK_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00e      	b.n	8002a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b0f      	cmp	r3, #15
 8002a56:	d80a      	bhi.n	8002a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a60:	f000 f92f 	bl	8002cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a64:	4a06      	ldr	r2, [pc, #24]	; (8002a80 <HAL_InitTick+0x5c>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e000      	b.n	8002a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000014 	.word	0x20000014
 8002a7c:	2000001c 	.word	0x2000001c
 8002a80:	20000018 	.word	0x20000018

08002a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_IncTick+0x20>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_IncTick+0x24>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <HAL_IncTick+0x24>)
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	2000001c 	.word	0x2000001c
 8002aa8:	200005d4 	.word	0x200005d4

08002aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_GetTick+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	200005d4 	.word	0x200005d4

08002ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff ffee 	bl	8002aac <HAL_GetTick>
 8002ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d005      	beq.n	8002aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ade:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <HAL_Delay+0x44>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aea:	bf00      	nop
 8002aec:	f7ff ffde 	bl	8002aac <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d8f7      	bhi.n	8002aec <HAL_Delay+0x28>
  {
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	2000001c 	.word	0x2000001c

08002b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b28:	4013      	ands	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3e:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <__NVIC_SetPriorityGrouping+0x44>)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	60d3      	str	r3, [r2, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <__NVIC_GetPriorityGrouping+0x18>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	0a1b      	lsrs	r3, r3, #8
 8002b5e:	f003 0307 	and.w	r3, r3, #7
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	db0b      	blt.n	8002b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	4907      	ldr	r1, [pc, #28]	; (8002ba8 <__NVIC_EnableIRQ+0x38>)
 8002b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2001      	movs	r0, #1
 8002b92:	fa00 f202 	lsl.w	r2, r0, r2
 8002b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100

08002bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	6039      	str	r1, [r7, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	db0a      	blt.n	8002bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	490c      	ldr	r1, [pc, #48]	; (8002bf8 <__NVIC_SetPriority+0x4c>)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	440b      	add	r3, r1
 8002bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd4:	e00a      	b.n	8002bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4908      	ldr	r1, [pc, #32]	; (8002bfc <__NVIC_SetPriority+0x50>)
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	3b04      	subs	r3, #4
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	440b      	add	r3, r1
 8002bea:	761a      	strb	r2, [r3, #24]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000e100 	.word	0xe000e100
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	; 0x24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f1c3 0307 	rsb	r3, r3, #7
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	bf28      	it	cs
 8002c1e:	2304      	movcs	r3, #4
 8002c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3304      	adds	r3, #4
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d902      	bls.n	8002c30 <NVIC_EncodePriority+0x30>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3b03      	subs	r3, #3
 8002c2e:	e000      	b.n	8002c32 <NVIC_EncodePriority+0x32>
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43da      	mvns	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	401a      	ands	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c48:	f04f 31ff 	mov.w	r1, #4294967295
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	43d9      	mvns	r1, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	4313      	orrs	r3, r2
         );
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c78:	d301      	bcc.n	8002c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00f      	b.n	8002c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <SysTick_Config+0x40>)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c86:	210f      	movs	r1, #15
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f7ff ff8e 	bl	8002bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <SysTick_Config+0x40>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <SysTick_Config+0x40>)
 8002c98:	2207      	movs	r2, #7
 8002c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	e000e010 	.word	0xe000e010

08002cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff29 	bl	8002b0c <__NVIC_SetPriorityGrouping>
}
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd4:	f7ff ff3e 	bl	8002b54 <__NVIC_GetPriorityGrouping>
 8002cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	6978      	ldr	r0, [r7, #20]
 8002ce0:	f7ff ff8e 	bl	8002c00 <NVIC_EncodePriority>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff5d 	bl	8002bac <__NVIC_SetPriority>
}
 8002cf2:	bf00      	nop
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff31 	bl	8002b70 <__NVIC_EnableIRQ>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ffa2 	bl	8002c68 <SysTick_Config>
 8002d24:	4603      	mov	r3, r0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d3c:	f7ff feb6 	bl	8002aac <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e099      	b.n	8002e80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d6c:	e00f      	b.n	8002d8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d6e:	f7ff fe9d 	bl	8002aac <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b05      	cmp	r3, #5
 8002d7a:	d908      	bls.n	8002d8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2203      	movs	r2, #3
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e078      	b.n	8002e80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e8      	bne.n	8002d6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4b38      	ldr	r3, [pc, #224]	; (8002e88 <HAL_DMA_Init+0x158>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d107      	bne.n	8002df8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	4313      	orrs	r3, r2
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f023 0307 	bic.w	r3, r3, #7
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d117      	bne.n	8002e52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00e      	beq.n	8002e52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 fa7b 	bl	8003330 <DMA_CheckFifoParam>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2240      	movs	r2, #64	; 0x40
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e016      	b.n	8002e80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa32 	bl	80032c4 <DMA_CalcBaseAndBitshift>
 8002e60:	4603      	mov	r3, r0
 8002e62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	223f      	movs	r2, #63	; 0x3f
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	f010803f 	.word	0xf010803f

08002e8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e9a:	f7ff fe07 	bl	8002aac <HAL_GetTick>
 8002e9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d008      	beq.n	8002ebe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e052      	b.n	8002f64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0216 	bic.w	r2, r2, #22
 8002ecc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002edc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d103      	bne.n	8002eee <HAL_DMA_Abort+0x62>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0208 	bic.w	r2, r2, #8
 8002efc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0201 	bic.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f0e:	e013      	b.n	8002f38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f10:	f7ff fdcc 	bl	8002aac <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b05      	cmp	r3, #5
 8002f1c:	d90c      	bls.n	8002f38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2203      	movs	r2, #3
 8002f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e015      	b.n	8002f64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e4      	bne.n	8002f10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	223f      	movs	r2, #63	; 0x3f
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d004      	beq.n	8002f8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2280      	movs	r2, #128	; 0x80
 8002f84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e00c      	b.n	8002fa4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2205      	movs	r2, #5
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fbc:	4b8e      	ldr	r3, [pc, #568]	; (80031f8 <HAL_DMA_IRQHandler+0x248>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a8e      	ldr	r2, [pc, #568]	; (80031fc <HAL_DMA_IRQHandler+0x24c>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	0a9b      	lsrs	r3, r3, #10
 8002fc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fda:	2208      	movs	r2, #8
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d01a      	beq.n	800301c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d013      	beq.n	800301c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0204 	bic.w	r2, r2, #4
 8003002:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	2208      	movs	r2, #8
 800300a:	409a      	lsls	r2, r3
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003014:	f043 0201 	orr.w	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	2201      	movs	r2, #1
 8003022:	409a      	lsls	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d012      	beq.n	8003052 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303e:	2201      	movs	r2, #1
 8003040:	409a      	lsls	r2, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	f043 0202 	orr.w	r2, r3, #2
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003056:	2204      	movs	r2, #4
 8003058:	409a      	lsls	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4013      	ands	r3, r2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d012      	beq.n	8003088 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00b      	beq.n	8003088 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003074:	2204      	movs	r2, #4
 8003076:	409a      	lsls	r2, r3
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	f043 0204 	orr.w	r2, r3, #4
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308c:	2210      	movs	r2, #16
 800308e:	409a      	lsls	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d043      	beq.n	8003120 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d03c      	beq.n	8003120 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	2210      	movs	r2, #16
 80030ac:	409a      	lsls	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d018      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d108      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d024      	beq.n	8003120 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
 80030de:	e01f      	b.n	8003120 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01b      	beq.n	8003120 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
 80030f0:	e016      	b.n	8003120 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d107      	bne.n	8003110 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0208 	bic.w	r2, r2, #8
 800310e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003124:	2220      	movs	r2, #32
 8003126:	409a      	lsls	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 808f 	beq.w	8003250 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8087 	beq.w	8003250 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003146:	2220      	movs	r2, #32
 8003148:	409a      	lsls	r2, r3
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b05      	cmp	r3, #5
 8003158:	d136      	bne.n	80031c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0216 	bic.w	r2, r2, #22
 8003168:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003178:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d103      	bne.n	800318a <HAL_DMA_IRQHandler+0x1da>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003186:	2b00      	cmp	r3, #0
 8003188:	d007      	beq.n	800319a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0208 	bic.w	r2, r2, #8
 8003198:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319e:	223f      	movs	r2, #63	; 0x3f
 80031a0:	409a      	lsls	r2, r3
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d07e      	beq.n	80032bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	4798      	blx	r3
        }
        return;
 80031c6:	e079      	b.n	80032bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d01d      	beq.n	8003212 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10d      	bne.n	8003200 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d031      	beq.n	8003250 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	4798      	blx	r3
 80031f4:	e02c      	b.n	8003250 <HAL_DMA_IRQHandler+0x2a0>
 80031f6:	bf00      	nop
 80031f8:	20000014 	.word	0x20000014
 80031fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003204:	2b00      	cmp	r3, #0
 8003206:	d023      	beq.n	8003250 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	4798      	blx	r3
 8003210:	e01e      	b.n	8003250 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10f      	bne.n	8003240 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0210 	bic.w	r2, r2, #16
 800322e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	2b00      	cmp	r3, #0
 8003256:	d032      	beq.n	80032be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d022      	beq.n	80032aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2205      	movs	r2, #5
 8003268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0201 	bic.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	3301      	adds	r3, #1
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	429a      	cmp	r2, r3
 8003286:	d307      	bcc.n	8003298 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f2      	bne.n	800327c <HAL_DMA_IRQHandler+0x2cc>
 8003296:	e000      	b.n	800329a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003298:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	4798      	blx	r3
 80032ba:	e000      	b.n	80032be <HAL_DMA_IRQHandler+0x30e>
        return;
 80032bc:	bf00      	nop
    }
  }
}
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	3b10      	subs	r3, #16
 80032d4:	4a14      	ldr	r2, [pc, #80]	; (8003328 <DMA_CalcBaseAndBitshift+0x64>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032de:	4a13      	ldr	r2, [pc, #76]	; (800332c <DMA_CalcBaseAndBitshift+0x68>)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2b03      	cmp	r3, #3
 80032f0:	d909      	bls.n	8003306 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032fa:	f023 0303 	bic.w	r3, r3, #3
 80032fe:	1d1a      	adds	r2, r3, #4
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	659a      	str	r2, [r3, #88]	; 0x58
 8003304:	e007      	b.n	8003316 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800330e:	f023 0303 	bic.w	r3, r3, #3
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	aaaaaaab 	.word	0xaaaaaaab
 800332c:	08013be4 	.word	0x08013be4

08003330 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d11f      	bne.n	800338a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d856      	bhi.n	80033fe <DMA_CheckFifoParam+0xce>
 8003350:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <DMA_CheckFifoParam+0x28>)
 8003352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003356:	bf00      	nop
 8003358:	08003369 	.word	0x08003369
 800335c:	0800337b 	.word	0x0800337b
 8003360:	08003369 	.word	0x08003369
 8003364:	080033ff 	.word	0x080033ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d046      	beq.n	8003402 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003378:	e043      	b.n	8003402 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003382:	d140      	bne.n	8003406 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003388:	e03d      	b.n	8003406 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003392:	d121      	bne.n	80033d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d837      	bhi.n	800340a <DMA_CheckFifoParam+0xda>
 800339a:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <DMA_CheckFifoParam+0x70>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033b1 	.word	0x080033b1
 80033a4:	080033b7 	.word	0x080033b7
 80033a8:	080033b1 	.word	0x080033b1
 80033ac:	080033c9 	.word	0x080033c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
      break;
 80033b4:	e030      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d025      	beq.n	800340e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c6:	e022      	b.n	800340e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033d0:	d11f      	bne.n	8003412 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033d6:	e01c      	b.n	8003412 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d903      	bls.n	80033e6 <DMA_CheckFifoParam+0xb6>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d003      	beq.n	80033ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033e4:	e018      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
      break;
 80033ea:	e015      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00e      	beq.n	8003416 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
      break;
 80033fc:	e00b      	b.n	8003416 <DMA_CheckFifoParam+0xe6>
      break;
 80033fe:	bf00      	nop
 8003400:	e00a      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
      break;
 8003402:	bf00      	nop
 8003404:	e008      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
      break;
 8003406:	bf00      	nop
 8003408:	e006      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
      break;
 800340a:	bf00      	nop
 800340c:	e004      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
      break;
 800340e:	bf00      	nop
 8003410:	e002      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
      break;   
 8003412:	bf00      	nop
 8003414:	e000      	b.n	8003418 <DMA_CheckFifoParam+0xe8>
      break;
 8003416:	bf00      	nop
    }
  } 
  
  return status; 
 8003418:	7bfb      	ldrb	r3, [r7, #15]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop

08003428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	; 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	e16b      	b.n	800371c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003444:	2201      	movs	r2, #1
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	429a      	cmp	r2, r3
 800345e:	f040 815a 	bne.w	8003716 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d005      	beq.n	800347a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003476:	2b02      	cmp	r3, #2
 8003478:	d130      	bne.n	80034dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	2203      	movs	r2, #3
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4013      	ands	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034b0:	2201      	movs	r2, #1
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	091b      	lsrs	r3, r3, #4
 80034c6:	f003 0201 	and.w	r2, r3, #1
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d017      	beq.n	8003518 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	2203      	movs	r2, #3
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d123      	bne.n	800356c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	08da      	lsrs	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3208      	adds	r2, #8
 800352c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	220f      	movs	r2, #15
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	08da      	lsrs	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3208      	adds	r2, #8
 8003566:	69b9      	ldr	r1, [r7, #24]
 8003568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	2203      	movs	r2, #3
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0203 	and.w	r2, r3, #3
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80b4 	beq.w	8003716 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	4b60      	ldr	r3, [pc, #384]	; (8003734 <HAL_GPIO_Init+0x30c>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	4a5f      	ldr	r2, [pc, #380]	; (8003734 <HAL_GPIO_Init+0x30c>)
 80035b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035bc:	6453      	str	r3, [r2, #68]	; 0x44
 80035be:	4b5d      	ldr	r3, [pc, #372]	; (8003734 <HAL_GPIO_Init+0x30c>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035ca:	4a5b      	ldr	r2, [pc, #364]	; (8003738 <HAL_GPIO_Init+0x310>)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	3302      	adds	r3, #2
 80035d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	220f      	movs	r2, #15
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a52      	ldr	r2, [pc, #328]	; (800373c <HAL_GPIO_Init+0x314>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d02b      	beq.n	800364e <HAL_GPIO_Init+0x226>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a51      	ldr	r2, [pc, #324]	; (8003740 <HAL_GPIO_Init+0x318>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d025      	beq.n	800364a <HAL_GPIO_Init+0x222>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a50      	ldr	r2, [pc, #320]	; (8003744 <HAL_GPIO_Init+0x31c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d01f      	beq.n	8003646 <HAL_GPIO_Init+0x21e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a4f      	ldr	r2, [pc, #316]	; (8003748 <HAL_GPIO_Init+0x320>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d019      	beq.n	8003642 <HAL_GPIO_Init+0x21a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4e      	ldr	r2, [pc, #312]	; (800374c <HAL_GPIO_Init+0x324>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_GPIO_Init+0x216>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a4d      	ldr	r2, [pc, #308]	; (8003750 <HAL_GPIO_Init+0x328>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00d      	beq.n	800363a <HAL_GPIO_Init+0x212>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a4c      	ldr	r2, [pc, #304]	; (8003754 <HAL_GPIO_Init+0x32c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d007      	beq.n	8003636 <HAL_GPIO_Init+0x20e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a4b      	ldr	r2, [pc, #300]	; (8003758 <HAL_GPIO_Init+0x330>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d101      	bne.n	8003632 <HAL_GPIO_Init+0x20a>
 800362e:	2307      	movs	r3, #7
 8003630:	e00e      	b.n	8003650 <HAL_GPIO_Init+0x228>
 8003632:	2308      	movs	r3, #8
 8003634:	e00c      	b.n	8003650 <HAL_GPIO_Init+0x228>
 8003636:	2306      	movs	r3, #6
 8003638:	e00a      	b.n	8003650 <HAL_GPIO_Init+0x228>
 800363a:	2305      	movs	r3, #5
 800363c:	e008      	b.n	8003650 <HAL_GPIO_Init+0x228>
 800363e:	2304      	movs	r3, #4
 8003640:	e006      	b.n	8003650 <HAL_GPIO_Init+0x228>
 8003642:	2303      	movs	r3, #3
 8003644:	e004      	b.n	8003650 <HAL_GPIO_Init+0x228>
 8003646:	2302      	movs	r3, #2
 8003648:	e002      	b.n	8003650 <HAL_GPIO_Init+0x228>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <HAL_GPIO_Init+0x228>
 800364e:	2300      	movs	r3, #0
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	f002 0203 	and.w	r2, r2, #3
 8003656:	0092      	lsls	r2, r2, #2
 8003658:	4093      	lsls	r3, r2
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003660:	4935      	ldr	r1, [pc, #212]	; (8003738 <HAL_GPIO_Init+0x310>)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	089b      	lsrs	r3, r3, #2
 8003666:	3302      	adds	r3, #2
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800366e:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_GPIO_Init+0x334>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	43db      	mvns	r3, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4013      	ands	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003692:	4a32      	ldr	r2, [pc, #200]	; (800375c <HAL_GPIO_Init+0x334>)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003698:	4b30      	ldr	r3, [pc, #192]	; (800375c <HAL_GPIO_Init+0x334>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036bc:	4a27      	ldr	r2, [pc, #156]	; (800375c <HAL_GPIO_Init+0x334>)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036c2:	4b26      	ldr	r3, [pc, #152]	; (800375c <HAL_GPIO_Init+0x334>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	43db      	mvns	r3, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4013      	ands	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036e6:	4a1d      	ldr	r2, [pc, #116]	; (800375c <HAL_GPIO_Init+0x334>)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_GPIO_Init+0x334>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003710:	4a12      	ldr	r2, [pc, #72]	; (800375c <HAL_GPIO_Init+0x334>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3301      	adds	r3, #1
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b0f      	cmp	r3, #15
 8003720:	f67f ae90 	bls.w	8003444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	3724      	adds	r7, #36	; 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800
 8003738:	40013800 	.word	0x40013800
 800373c:	40020000 	.word	0x40020000
 8003740:	40020400 	.word	0x40020400
 8003744:	40020800 	.word	0x40020800
 8003748:	40020c00 	.word	0x40020c00
 800374c:	40021000 	.word	0x40021000
 8003750:	40021400 	.word	0x40021400
 8003754:	40021800 	.word	0x40021800
 8003758:	40021c00 	.word	0x40021c00
 800375c:	40013c00 	.word	0x40013c00

08003760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
 800376c:	4613      	mov	r3, r2
 800376e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003770:	787b      	ldrb	r3, [r7, #1]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003776:	887a      	ldrh	r2, [r7, #2]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800377c:	e003      	b.n	8003786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800377e:	887b      	ldrh	r3, [r7, #2]
 8003780:	041a      	lsls	r2, r3, #16
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	619a      	str	r2, [r3, #24]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b086      	sub	sp, #24
 8003796:	af02      	add	r7, sp, #8
 8003798:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e059      	b.n	8003858 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f008 ffde 	bl	800c780 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2203      	movs	r2, #3
 80037c8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037d2:	d102      	bne.n	80037da <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f005 fde7 	bl	80093b2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	7c1a      	ldrb	r2, [r3, #16]
 80037ec:	f88d 2000 	strb.w	r2, [sp]
 80037f0:	3304      	adds	r3, #4
 80037f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037f4:	f005 fd68 	bl	80092c8 <USB_CoreInit>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2202      	movs	r2, #2
 8003802:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e026      	b.n	8003858 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2101      	movs	r1, #1
 8003810:	4618      	mov	r0, r3
 8003812:	f005 fddf 	bl	80093d4 <USB_SetCurrentMode>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e017      	b.n	8003858 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	7c1a      	ldrb	r2, [r3, #16]
 8003830:	f88d 2000 	strb.w	r2, [sp]
 8003834:	3304      	adds	r3, #4
 8003836:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003838:	f005 ff82 	bl	8009740 <USB_HostInit>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2202      	movs	r2, #2
 8003846:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e004      	b.n	8003858 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b08b      	sub	sp, #44	; 0x2c
 8003864:	af04      	add	r7, sp, #16
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	4608      	mov	r0, r1
 800386a:	4611      	mov	r1, r2
 800386c:	461a      	mov	r2, r3
 800386e:	4603      	mov	r3, r0
 8003870:	70fb      	strb	r3, [r7, #3]
 8003872:	460b      	mov	r3, r1
 8003874:	70bb      	strb	r3, [r7, #2]
 8003876:	4613      	mov	r3, r2
 8003878:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800387a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800387c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_HCD_HC_Init+0x2c>
 8003888:	2302      	movs	r3, #2
 800388a:	e09d      	b.n	80039c8 <HAL_HCD_HC_Init+0x168>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	3319      	adds	r3, #25
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	3314      	adds	r3, #20
 80038b8:	787a      	ldrb	r2, [r7, #1]
 80038ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	3315      	adds	r3, #21
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80038d0:	78fa      	ldrb	r2, [r7, #3]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	3326      	adds	r3, #38	; 0x26
 80038e0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80038e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	78bb      	ldrb	r3, [r7, #2]
 80038ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ee:	b2d8      	uxtb	r0, r3
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	3316      	adds	r3, #22
 80038fe:	4602      	mov	r2, r0
 8003900:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	4619      	mov	r1, r3
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fbc8 	bl	800409c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800390c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003910:	2b00      	cmp	r3, #0
 8003912:	da0a      	bge.n	800392a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003914:	78fa      	ldrb	r2, [r7, #3]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	3317      	adds	r3, #23
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	e009      	b.n	800393e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800392a:	78fa      	ldrb	r2, [r7, #3]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	3317      	adds	r3, #23
 800393a:	2200      	movs	r2, #0
 800393c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f006 f860 	bl	8009a08 <USB_GetHostSpeed>
 8003948:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800394a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800394e:	2b01      	cmp	r3, #1
 8003950:	d10b      	bne.n	800396a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003952:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003956:	2b01      	cmp	r3, #1
 8003958:	d107      	bne.n	800396a <HAL_HCD_HC_Init+0x10a>
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d104      	bne.n	800396a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2bbc      	cmp	r3, #188	; 0xbc
 8003964:	d901      	bls.n	800396a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003966:	23bc      	movs	r3, #188	; 0xbc
 8003968:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	3318      	adds	r3, #24
 800397a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800397e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	b298      	uxth	r0, r3
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	3328      	adds	r3, #40	; 0x28
 8003994:	4602      	mov	r2, r0
 8003996:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	787c      	ldrb	r4, [r7, #1]
 80039a2:	78ba      	ldrb	r2, [r7, #2]
 80039a4:	78f9      	ldrb	r1, [r7, #3]
 80039a6:	9302      	str	r3, [sp, #8]
 80039a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	4623      	mov	r3, r4
 80039b6:	f006 f84f 	bl	8009a58 <USB_HC_Init>
 80039ba:	4603      	mov	r3, r0
 80039bc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd90      	pop	{r4, r7, pc}

080039d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_HCD_HC_Halt+0x1e>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e00f      	b.n	8003a0e <HAL_HCD_HC_Halt+0x3e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	78fa      	ldrb	r2, [r7, #3]
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f006 fbe1 	bl	800a1c6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	4608      	mov	r0, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	461a      	mov	r2, r3
 8003a26:	4603      	mov	r3, r0
 8003a28:	70fb      	strb	r3, [r7, #3]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	70bb      	strb	r3, [r7, #2]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	3317      	adds	r3, #23
 8003a42:	78ba      	ldrb	r2, [r7, #2]
 8003a44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	3326      	adds	r3, #38	; 0x26
 8003a56:	787a      	ldrb	r2, [r7, #1]
 8003a58:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003a5a:	7c3b      	ldrb	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d114      	bne.n	8003a8a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	332a      	adds	r3, #42	; 0x2a
 8003a70:	2203      	movs	r2, #3
 8003a72:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	3319      	adds	r3, #25
 8003a84:	7f3a      	ldrb	r2, [r7, #28]
 8003a86:	701a      	strb	r2, [r3, #0]
 8003a88:	e009      	b.n	8003a9e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	332a      	adds	r3, #42	; 0x2a
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003a9e:	787b      	ldrb	r3, [r7, #1]
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	f200 8102 	bhi.w	8003caa <HAL_HCD_HC_SubmitRequest+0x292>
 8003aa6:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <HAL_HCD_HC_SubmitRequest+0x94>)
 8003aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aac:	08003abd 	.word	0x08003abd
 8003ab0:	08003c95 	.word	0x08003c95
 8003ab4:	08003b81 	.word	0x08003b81
 8003ab8:	08003c0b 	.word	0x08003c0b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003abc:	7c3b      	ldrb	r3, [r7, #16]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	f040 80f5 	bne.w	8003cae <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003ac4:	78bb      	ldrb	r3, [r7, #2]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d12d      	bne.n	8003b26 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003aca:	8b3b      	ldrh	r3, [r7, #24]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d109      	bne.n	8003ae4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	333d      	adds	r3, #61	; 0x3d
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	333d      	adds	r3, #61	; 0x3d
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	332a      	adds	r3, #42	; 0x2a
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003b0e:	e0ce      	b.n	8003cae <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	332a      	adds	r3, #42	; 0x2a
 8003b20:	2202      	movs	r2, #2
 8003b22:	701a      	strb	r2, [r3, #0]
      break;
 8003b24:	e0c3      	b.n	8003cae <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	331a      	adds	r3, #26
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	f040 80b8 	bne.w	8003cae <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	4613      	mov	r3, r2
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	1a9b      	subs	r3, r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	440b      	add	r3, r1
 8003b4c:	333c      	adds	r3, #60	; 0x3c
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	332a      	adds	r3, #42	; 0x2a
 8003b64:	2200      	movs	r2, #0
 8003b66:	701a      	strb	r2, [r3, #0]
      break;
 8003b68:	e0a1      	b.n	8003cae <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	332a      	adds	r3, #42	; 0x2a
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	701a      	strb	r2, [r3, #0]
      break;
 8003b7e:	e096      	b.n	8003cae <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003b80:	78bb      	ldrb	r3, [r7, #2]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d120      	bne.n	8003bc8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	333d      	adds	r3, #61	; 0x3d
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10a      	bne.n	8003bb2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	332a      	adds	r3, #42	; 0x2a
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003bb0:	e07e      	b.n	8003cb0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	332a      	adds	r3, #42	; 0x2a
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	701a      	strb	r2, [r3, #0]
      break;
 8003bc6:	e073      	b.n	8003cb0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003bc8:	78fa      	ldrb	r2, [r7, #3]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	333c      	adds	r3, #60	; 0x3c
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	332a      	adds	r3, #42	; 0x2a
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
      break;
 8003bf2:	e05d      	b.n	8003cb0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	1a9b      	subs	r3, r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	332a      	adds	r3, #42	; 0x2a
 8003c04:	2202      	movs	r2, #2
 8003c06:	701a      	strb	r2, [r3, #0]
      break;
 8003c08:	e052      	b.n	8003cb0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003c0a:	78bb      	ldrb	r3, [r7, #2]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d120      	bne.n	8003c52 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	333d      	adds	r3, #61	; 0x3d
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10a      	bne.n	8003c3c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	332a      	adds	r3, #42	; 0x2a
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003c3a:	e039      	b.n	8003cb0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	332a      	adds	r3, #42	; 0x2a
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	701a      	strb	r2, [r3, #0]
      break;
 8003c50:	e02e      	b.n	8003cb0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	333c      	adds	r3, #60	; 0x3c
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10a      	bne.n	8003c7e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	332a      	adds	r3, #42	; 0x2a
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
      break;
 8003c7c:	e018      	b.n	8003cb0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	332a      	adds	r3, #42	; 0x2a
 8003c8e:	2202      	movs	r2, #2
 8003c90:	701a      	strb	r2, [r3, #0]
      break;
 8003c92:	e00d      	b.n	8003cb0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	332a      	adds	r3, #42	; 0x2a
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	701a      	strb	r2, [r3, #0]
      break;
 8003ca8:	e002      	b.n	8003cb0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003caa:	bf00      	nop
 8003cac:	e000      	b.n	8003cb0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003cae:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	332c      	adds	r3, #44	; 0x2c
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	8b39      	ldrh	r1, [r7, #24]
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4403      	add	r3, r0
 8003cd4:	3334      	adds	r3, #52	; 0x34
 8003cd6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003cd8:	78fa      	ldrb	r2, [r7, #3]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	334c      	adds	r3, #76	; 0x4c
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003cec:	78fa      	ldrb	r2, [r7, #3]
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	3338      	adds	r3, #56	; 0x38
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003d00:	78fa      	ldrb	r2, [r7, #3]
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	3315      	adds	r3, #21
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	334d      	adds	r3, #77	; 0x4d
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	78fa      	ldrb	r2, [r7, #3]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	3310      	adds	r3, #16
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	1d19      	adds	r1, r3, #4
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	799b      	ldrb	r3, [r3, #6]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f005 ffb4 	bl	8009cb0 <USB_HC_StartXfer>
 8003d48:	4603      	mov	r3, r0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop

08003d54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f005 fca8 	bl	80096c0 <USB_GetMode>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	f040 80fb 	bne.w	8003f6e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f005 fc6b 	bl	8009658 <USB_ReadInterrupts>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80f1 	beq.w	8003f6c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f005 fc62 	bl	8009658 <USB_ReadInterrupts>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d9e:	d104      	bne.n	8003daa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003da8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f005 fc52 	bl	8009658 <USB_ReadInterrupts>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dbe:	d104      	bne.n	8003dca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003dc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f005 fc42 	bl	8009658 <USB_ReadInterrupts>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dde:	d104      	bne.n	8003dea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003de8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f005 fc32 	bl	8009658 <USB_ReadInterrupts>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d103      	bne.n	8003e06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2202      	movs	r2, #2
 8003e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f005 fc24 	bl	8009658 <USB_ReadInterrupts>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e1a:	d120      	bne.n	8003e5e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003e24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d113      	bne.n	8003e5e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003e36:	2110      	movs	r1, #16
 8003e38:	6938      	ldr	r0, [r7, #16]
 8003e3a:	f005 fb17 	bl	800946c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003e3e:	6938      	ldr	r0, [r7, #16]
 8003e40:	f005 fb46 	bl	80094d0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	7a5b      	ldrb	r3, [r3, #9]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d105      	bne.n	8003e58 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2101      	movs	r1, #1
 8003e52:	4618      	mov	r0, r3
 8003e54:	f005 fd38 	bl	80098c8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f008 fd0f 	bl	800c87c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f005 fbf8 	bl	8009658 <USB_ReadInterrupts>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e72:	d102      	bne.n	8003e7a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f001 fd33 	bl	80058e0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f005 fbea 	bl	8009658 <USB_ReadInterrupts>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d106      	bne.n	8003e9c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f008 fcd8 	bl	800c844 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2208      	movs	r2, #8
 8003e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f005 fbd9 	bl	8009658 <USB_ReadInterrupts>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eb0:	d139      	bne.n	8003f26 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f006 f974 	bl	800a1a4 <USB_HC_ReadInterrupt>
 8003ebc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e025      	b.n	8003f10 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d018      	beq.n	8003f0a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eee:	d106      	bne.n	8003efe <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f905 	bl	8004106 <HCD_HC_IN_IRQHandler>
 8003efc:	e005      	b.n	8003f0a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	4619      	mov	r1, r3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 ff67 	bl	8004dd8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	795b      	ldrb	r3, [r3, #5]
 8003f14:	461a      	mov	r2, r3
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d3d3      	bcc.n	8003ec4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f005 fb94 	bl	8009658 <USB_ReadInterrupts>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b10      	cmp	r3, #16
 8003f38:	d101      	bne.n	8003f3e <HAL_HCD_IRQHandler+0x1ea>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_HCD_IRQHandler+0x1ec>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d014      	beq.n	8003f6e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699a      	ldr	r2, [r3, #24]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0210 	bic.w	r2, r2, #16
 8003f52:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f001 fbe4 	bl	8005722 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699a      	ldr	r2, [r3, #24]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0210 	orr.w	r2, r2, #16
 8003f68:	619a      	str	r2, [r3, #24]
 8003f6a:	e000      	b.n	8003f6e <HAL_HCD_IRQHandler+0x21a>
      return;
 8003f6c:	bf00      	nop
    }
  }
}
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d101      	bne.n	8003f8a <HAL_HCD_Start+0x16>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e013      	b.n	8003fb2 <HAL_HCD_Start+0x3e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2101      	movs	r1, #1
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f005 fcfc 	bl	8009996 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f005 f9f4 	bl	8009390 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_HCD_Stop+0x16>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e00d      	b.n	8003fec <HAL_HCD_Stop+0x32>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f006 fa4f 	bl	800a480 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f005 fc9e 	bl	8009942 <USB_ResetPort>
 8004006:	4603      	mov	r3, r0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800401c:	78fa      	ldrb	r2, [r7, #3]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	334c      	adds	r3, #76	; 0x4c
 800402c:	781b      	ldrb	r3, [r3, #0]
}
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	460b      	mov	r3, r1
 8004044:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004046:	78fa      	ldrb	r2, [r7, #3]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	3338      	adds	r3, #56	; 0x38
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f005 fce0 	bl	8009a36 <USB_GetCurrentFrame>
 8004076:	4603      	mov	r3, r0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f005 fcbb 	bl	8009a08 <USB_GetHostSpeed>
 8004092:	4603      	mov	r3, r0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80040a8:	78fa      	ldrb	r2, [r7, #3]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	331a      	adds	r3, #26
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80040bc:	78fa      	ldrb	r2, [r7, #3]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	331b      	adds	r3, #27
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	3325      	adds	r3, #37	; 0x25
 80040e0:	2200      	movs	r2, #0
 80040e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80040e4:	78fa      	ldrb	r2, [r7, #3]
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	4613      	mov	r3, r2
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	1a9b      	subs	r3, r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	3324      	adds	r3, #36	; 0x24
 80040f4:	2200      	movs	r2, #0
 80040f6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b086      	sub	sp, #24
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	460b      	mov	r3, r1
 8004110:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	78fa      	ldrb	r2, [r7, #3]
 8004122:	4611      	mov	r1, r2
 8004124:	4618      	mov	r0, r3
 8004126:	f005 faaa 	bl	800967e <USB_ReadChInterrupts>
 800412a:	4603      	mov	r3, r0
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b04      	cmp	r3, #4
 8004132:	d11a      	bne.n	800416a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004134:	78fb      	ldrb	r3, [r7, #3]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4413      	add	r3, r2
 800413c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004140:	461a      	mov	r2, r3
 8004142:	2304      	movs	r3, #4
 8004144:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	334d      	adds	r3, #77	; 0x4d
 8004156:	2207      	movs	r2, #7
 8004158:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	78fa      	ldrb	r2, [r7, #3]
 8004160:	4611      	mov	r1, r2
 8004162:	4618      	mov	r0, r3
 8004164:	f006 f82f 	bl	800a1c6 <USB_HC_Halt>
 8004168:	e09e      	b.n	80042a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	4611      	mov	r1, r2
 8004172:	4618      	mov	r0, r3
 8004174:	f005 fa83 	bl	800967e <USB_ReadChInterrupts>
 8004178:	4603      	mov	r3, r0
 800417a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004182:	d11b      	bne.n	80041bc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4413      	add	r3, r2
 800418c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004190:	461a      	mov	r2, r3
 8004192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004196:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004198:	78fa      	ldrb	r2, [r7, #3]
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	334d      	adds	r3, #77	; 0x4d
 80041a8:	2208      	movs	r2, #8
 80041aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f006 f806 	bl	800a1c6 <USB_HC_Halt>
 80041ba:	e075      	b.n	80042a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	4611      	mov	r1, r2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f005 fa5a 	bl	800967e <USB_ReadChInterrupts>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d11a      	bne.n	800420a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e0:	461a      	mov	r2, r3
 80041e2:	2308      	movs	r3, #8
 80041e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80041e6:	78fa      	ldrb	r2, [r7, #3]
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	4613      	mov	r3, r2
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	440b      	add	r3, r1
 80041f4:	334d      	adds	r3, #77	; 0x4d
 80041f6:	2206      	movs	r2, #6
 80041f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	78fa      	ldrb	r2, [r7, #3]
 8004200:	4611      	mov	r1, r2
 8004202:	4618      	mov	r0, r3
 8004204:	f005 ffdf 	bl	800a1c6 <USB_HC_Halt>
 8004208:	e04e      	b.n	80042a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f005 fa33 	bl	800967e <USB_ReadChInterrupts>
 8004218:	4603      	mov	r3, r0
 800421a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004222:	d11b      	bne.n	800425c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004224:	78fb      	ldrb	r3, [r7, #3]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4413      	add	r3, r2
 800422c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004230:	461a      	mov	r2, r3
 8004232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004236:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004238:	78fa      	ldrb	r2, [r7, #3]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	334d      	adds	r3, #77	; 0x4d
 8004248:	2209      	movs	r2, #9
 800424a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	78fa      	ldrb	r2, [r7, #3]
 8004252:	4611      	mov	r1, r2
 8004254:	4618      	mov	r0, r3
 8004256:	f005 ffb6 	bl	800a1c6 <USB_HC_Halt>
 800425a:	e025      	b.n	80042a8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	4611      	mov	r1, r2
 8004264:	4618      	mov	r0, r3
 8004266:	f005 fa0a 	bl	800967e <USB_ReadChInterrupts>
 800426a:	4603      	mov	r3, r0
 800426c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004270:	2b80      	cmp	r3, #128	; 0x80
 8004272:	d119      	bne.n	80042a8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004274:	78fb      	ldrb	r3, [r7, #3]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4413      	add	r3, r2
 800427c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004280:	461a      	mov	r2, r3
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004286:	78fa      	ldrb	r2, [r7, #3]
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	334d      	adds	r3, #77	; 0x4d
 8004296:	2207      	movs	r2, #7
 8004298:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	4611      	mov	r1, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f005 ff8f 	bl	800a1c6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	78fa      	ldrb	r2, [r7, #3]
 80042ae:	4611      	mov	r1, r2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f005 f9e4 	bl	800967e <USB_ReadChInterrupts>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c0:	d112      	bne.n	80042e8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	78fa      	ldrb	r2, [r7, #3]
 80042c8:	4611      	mov	r1, r2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f005 ff7b 	bl	800a1c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042dc:	461a      	mov	r2, r3
 80042de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042e2:	6093      	str	r3, [r2, #8]
 80042e4:	f000 bd75 	b.w	8004dd2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	78fa      	ldrb	r2, [r7, #3]
 80042ee:	4611      	mov	r1, r2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f005 f9c4 	bl	800967e <USB_ReadChInterrupts>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	f040 8128 	bne.w	8004552 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4413      	add	r3, r2
 800430a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430e:	461a      	mov	r2, r3
 8004310:	2320      	movs	r3, #32
 8004312:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	331b      	adds	r3, #27
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d119      	bne.n	800435e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800432a:	78fa      	ldrb	r2, [r7, #3]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	331b      	adds	r3, #27
 800433a:	2200      	movs	r2, #0
 800433c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4413      	add	r3, r2
 8004346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	0151      	lsls	r1, r2, #5
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	440a      	add	r2, r1
 8004354:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800435c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	799b      	ldrb	r3, [r3, #6]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d01b      	beq.n	800439e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004366:	78fa      	ldrb	r2, [r7, #3]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	3330      	adds	r3, #48	; 0x30
 8004376:	6819      	ldr	r1, [r3, #0]
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4413      	add	r3, r2
 8004380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	1ac9      	subs	r1, r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4403      	add	r3, r0
 800439a:	3338      	adds	r3, #56	; 0x38
 800439c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800439e:	78fa      	ldrb	r2, [r7, #3]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	334d      	adds	r3, #77	; 0x4d
 80043ae:	2201      	movs	r2, #1
 80043b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80043b2:	78fa      	ldrb	r2, [r7, #3]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	3344      	adds	r3, #68	; 0x44
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d2:	461a      	mov	r2, r3
 80043d4:	2301      	movs	r3, #1
 80043d6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043d8:	78fa      	ldrb	r2, [r7, #3]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	3326      	adds	r3, #38	; 0x26
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043ee:	78fa      	ldrb	r2, [r7, #3]
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	3326      	adds	r3, #38	; 0x26
 80043fe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004400:	2b02      	cmp	r3, #2
 8004402:	d110      	bne.n	8004426 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	4611      	mov	r1, r2
 800440c:	4618      	mov	r0, r3
 800440e:	f005 feda 	bl	800a1c6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4413      	add	r3, r2
 800441a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800441e:	461a      	mov	r2, r3
 8004420:	2310      	movs	r3, #16
 8004422:	6093      	str	r3, [r2, #8]
 8004424:	e03d      	b.n	80044a2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	3326      	adds	r3, #38	; 0x26
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b03      	cmp	r3, #3
 800443a:	d00a      	beq.n	8004452 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800443c:	78fa      	ldrb	r2, [r7, #3]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	3326      	adds	r3, #38	; 0x26
 800444c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800444e:	2b01      	cmp	r3, #1
 8004450:	d127      	bne.n	80044a2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4413      	add	r3, r2
 800445a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	78fa      	ldrb	r2, [r7, #3]
 8004462:	0151      	lsls	r1, r2, #5
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	440a      	add	r2, r1
 8004468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800446c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004470:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	334c      	adds	r3, #76	; 0x4c
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	334c      	adds	r3, #76	; 0x4c
 8004496:	781a      	ldrb	r2, [r3, #0]
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	4619      	mov	r1, r3
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f008 f9fb 	bl	800c898 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	799b      	ldrb	r3, [r3, #6]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d13b      	bne.n	8004522 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80044aa:	78fa      	ldrb	r2, [r7, #3]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	3338      	adds	r3, #56	; 0x38
 80044ba:	6819      	ldr	r1, [r3, #0]
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4403      	add	r3, r0
 80044ca:	3328      	adds	r3, #40	; 0x28
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	440b      	add	r3, r1
 80044d0:	1e59      	subs	r1, r3, #1
 80044d2:	78fa      	ldrb	r2, [r7, #3]
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4403      	add	r3, r0
 80044e0:	3328      	adds	r3, #40	; 0x28
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 8470 	beq.w	8004dd2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	333c      	adds	r3, #60	; 0x3c
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	f083 0301 	eor.w	r3, r3, #1
 800450a:	b2d8      	uxtb	r0, r3
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	333c      	adds	r3, #60	; 0x3c
 800451a:	4602      	mov	r2, r0
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	f000 bc58 	b.w	8004dd2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004522:	78fa      	ldrb	r2, [r7, #3]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	333c      	adds	r3, #60	; 0x3c
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	78fa      	ldrb	r2, [r7, #3]
 8004536:	f083 0301 	eor.w	r3, r3, #1
 800453a:	b2d8      	uxtb	r0, r3
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	1a9b      	subs	r3, r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	333c      	adds	r3, #60	; 0x3c
 800454a:	4602      	mov	r2, r0
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	f000 bc40 	b.w	8004dd2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f005 f88f 	bl	800967e <USB_ReadChInterrupts>
 8004560:	4603      	mov	r3, r0
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b20      	cmp	r3, #32
 8004568:	d131      	bne.n	80045ce <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800456a:	78fb      	ldrb	r3, [r7, #3]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4413      	add	r3, r2
 8004572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004576:	461a      	mov	r2, r3
 8004578:	2320      	movs	r3, #32
 800457a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800457c:	78fa      	ldrb	r2, [r7, #3]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	331a      	adds	r3, #26
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b01      	cmp	r3, #1
 8004590:	f040 841f 	bne.w	8004dd2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004594:	78fa      	ldrb	r2, [r7, #3]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	4613      	mov	r3, r2
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	331b      	adds	r3, #27
 80045a4:	2201      	movs	r2, #1
 80045a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	334d      	adds	r3, #77	; 0x4d
 80045b8:	2203      	movs	r2, #3
 80045ba:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	4611      	mov	r1, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f005 fdfe 	bl	800a1c6 <USB_HC_Halt>
 80045ca:	f000 bc02 	b.w	8004dd2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	78fa      	ldrb	r2, [r7, #3]
 80045d4:	4611      	mov	r1, r2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f005 f851 	bl	800967e <USB_ReadChInterrupts>
 80045dc:	4603      	mov	r3, r0
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	f040 8305 	bne.w	8004bf2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80045e8:	78fb      	ldrb	r3, [r7, #3]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f4:	461a      	mov	r2, r3
 80045f6:	2302      	movs	r3, #2
 80045f8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	334d      	adds	r3, #77	; 0x4d
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d114      	bne.n	800463a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004610:	78fa      	ldrb	r2, [r7, #3]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	334d      	adds	r3, #77	; 0x4d
 8004620:	2202      	movs	r2, #2
 8004622:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004624:	78fa      	ldrb	r2, [r7, #3]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	334c      	adds	r3, #76	; 0x4c
 8004634:	2201      	movs	r2, #1
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e2cc      	b.n	8004bd4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	334d      	adds	r3, #77	; 0x4d
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b06      	cmp	r3, #6
 800464e:	d114      	bne.n	800467a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	334d      	adds	r3, #77	; 0x4d
 8004660:	2202      	movs	r2, #2
 8004662:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004664:	78fa      	ldrb	r2, [r7, #3]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	334c      	adds	r3, #76	; 0x4c
 8004674:	2205      	movs	r2, #5
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	e2ac      	b.n	8004bd4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800467a:	78fa      	ldrb	r2, [r7, #3]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	334d      	adds	r3, #77	; 0x4d
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b07      	cmp	r3, #7
 800468e:	d00b      	beq.n	80046a8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004690:	78fa      	ldrb	r2, [r7, #3]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	334d      	adds	r3, #77	; 0x4d
 80046a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80046a2:	2b09      	cmp	r3, #9
 80046a4:	f040 80a6 	bne.w	80047f4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046a8:	78fa      	ldrb	r2, [r7, #3]
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	4613      	mov	r3, r2
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	334d      	adds	r3, #77	; 0x4d
 80046b8:	2202      	movs	r2, #2
 80046ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80046bc:	78fa      	ldrb	r2, [r7, #3]
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	3344      	adds	r3, #68	; 0x44
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	1c59      	adds	r1, r3, #1
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4403      	add	r3, r0
 80046dc:	3344      	adds	r3, #68	; 0x44
 80046de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046e0:	78fa      	ldrb	r2, [r7, #3]
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	3344      	adds	r3, #68	; 0x44
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d943      	bls.n	800477e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	3344      	adds	r3, #68	; 0x44
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800470a:	78fa      	ldrb	r2, [r7, #3]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	331a      	adds	r3, #26
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d123      	bne.n	8004768 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	331b      	adds	r3, #27
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004734:	78fa      	ldrb	r2, [r7, #3]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	331c      	adds	r3, #28
 8004744:	2200      	movs	r2, #0
 8004746:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4413      	add	r3, r2
 8004750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	0151      	lsls	r1, r2, #5
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	440a      	add	r2, r1
 800475e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004766:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004768:	78fa      	ldrb	r2, [r7, #3]
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	334c      	adds	r3, #76	; 0x4c
 8004778:	2204      	movs	r2, #4
 800477a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800477c:	e229      	b.n	8004bd2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800477e:	78fa      	ldrb	r2, [r7, #3]
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	1a9b      	subs	r3, r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	440b      	add	r3, r1
 800478c:	334c      	adds	r3, #76	; 0x4c
 800478e:	2202      	movs	r2, #2
 8004790:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004792:	78fa      	ldrb	r2, [r7, #3]
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	4613      	mov	r3, r2
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	1a9b      	subs	r3, r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	440b      	add	r3, r1
 80047a0:	3326      	adds	r3, #38	; 0x26
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00b      	beq.n	80047c0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	1a9b      	subs	r3, r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	3326      	adds	r3, #38	; 0x26
 80047b8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	f040 8209 	bne.w	8004bd2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	015a      	lsls	r2, r3, #5
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	4413      	add	r3, r2
 80047c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047d6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047de:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ec:	461a      	mov	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047f2:	e1ee      	b.n	8004bd2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80047f4:	78fa      	ldrb	r2, [r7, #3]
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	334d      	adds	r3, #77	; 0x4d
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b05      	cmp	r3, #5
 8004808:	f040 80c8 	bne.w	800499c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	334d      	adds	r3, #77	; 0x4d
 800481c:	2202      	movs	r2, #2
 800481e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	331b      	adds	r3, #27
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	2b01      	cmp	r3, #1
 8004834:	f040 81ce 	bne.w	8004bd4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004838:	78fa      	ldrb	r2, [r7, #3]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	3326      	adds	r3, #38	; 0x26
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b03      	cmp	r3, #3
 800484c:	d16b      	bne.n	8004926 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800484e:	78fa      	ldrb	r2, [r7, #3]
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	1a9b      	subs	r3, r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	3348      	adds	r3, #72	; 0x48
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	1c59      	adds	r1, r3, #1
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	4613      	mov	r3, r2
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	1a9b      	subs	r3, r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4403      	add	r3, r0
 800486e:	3348      	adds	r3, #72	; 0x48
 8004870:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004872:	78fa      	ldrb	r2, [r7, #3]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	3348      	adds	r3, #72	; 0x48
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d943      	bls.n	8004910 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004888:	78fa      	ldrb	r2, [r7, #3]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	3348      	adds	r3, #72	; 0x48
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800489c:	78fa      	ldrb	r2, [r7, #3]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	331b      	adds	r3, #27
 80048ac:	2200      	movs	r2, #0
 80048ae:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	4613      	mov	r3, r2
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	3344      	adds	r3, #68	; 0x44
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d809      	bhi.n	80048da <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80048c6:	78fa      	ldrb	r2, [r7, #3]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	331c      	adds	r3, #28
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	78fa      	ldrb	r2, [r7, #3]
 80048ea:	0151      	lsls	r1, r2, #5
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	440a      	add	r2, r1
 80048f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80048fa:	78fa      	ldrb	r2, [r7, #3]
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	334c      	adds	r3, #76	; 0x4c
 800490a:	2204      	movs	r2, #4
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	e014      	b.n	800493a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004910:	78fa      	ldrb	r2, [r7, #3]
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	4613      	mov	r3, r2
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	334c      	adds	r3, #76	; 0x4c
 8004920:	2202      	movs	r2, #2
 8004922:	701a      	strb	r2, [r3, #0]
 8004924:	e009      	b.n	800493a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004926:	78fa      	ldrb	r2, [r7, #3]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	1a9b      	subs	r3, r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	334c      	adds	r3, #76	; 0x4c
 8004936:	2202      	movs	r2, #2
 8004938:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800493a:	78fa      	ldrb	r2, [r7, #3]
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	4613      	mov	r3, r2
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	1a9b      	subs	r3, r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	440b      	add	r3, r1
 8004948:	3326      	adds	r3, #38	; 0x26
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004950:	78fa      	ldrb	r2, [r7, #3]
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	4613      	mov	r3, r2
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	1a9b      	subs	r3, r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	3326      	adds	r3, #38	; 0x26
 8004960:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004962:	2b02      	cmp	r3, #2
 8004964:	f040 8136 	bne.w	8004bd4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4413      	add	r3, r2
 8004970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800497e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004986:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004994:	461a      	mov	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e11b      	b.n	8004bd4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800499c:	78fa      	ldrb	r2, [r7, #3]
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	334d      	adds	r3, #77	; 0x4d
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	f040 8081 	bne.w	8004ab6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049b4:	78fa      	ldrb	r2, [r7, #3]
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	4613      	mov	r3, r2
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	1a9b      	subs	r3, r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	334d      	adds	r3, #77	; 0x4d
 80049c4:	2202      	movs	r2, #2
 80049c6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80049c8:	78fa      	ldrb	r2, [r7, #3]
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	4613      	mov	r3, r2
 80049ce:	011b      	lsls	r3, r3, #4
 80049d0:	1a9b      	subs	r3, r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	331b      	adds	r3, #27
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	f040 80fa 	bne.w	8004bd4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049e0:	78fa      	ldrb	r2, [r7, #3]
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	1a9b      	subs	r3, r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	334c      	adds	r3, #76	; 0x4c
 80049f0:	2202      	movs	r2, #2
 80049f2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	0151      	lsls	r1, r2, #5
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	440a      	add	r2, r1
 8004a0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a12:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	015a      	lsls	r2, r3, #5
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	78fa      	ldrb	r2, [r7, #3]
 8004a24:	0151      	lsls	r1, r2, #5
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	440a      	add	r2, r1
 8004a2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a32:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a4e:	f023 0320 	bic.w	r3, r3, #32
 8004a52:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a54:	78fa      	ldrb	r2, [r7, #3]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	3326      	adds	r3, #38	; 0x26
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00b      	beq.n	8004a82 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a6a:	78fa      	ldrb	r2, [r7, #3]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	3326      	adds	r3, #38	; 0x26
 8004a7a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	f040 80a9 	bne.w	8004bd4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a82:	78fb      	ldrb	r3, [r7, #3]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a98:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004aa0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	e08e      	b.n	8004bd4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	334d      	adds	r3, #77	; 0x4d
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d143      	bne.n	8004b54 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004acc:	78fa      	ldrb	r2, [r7, #3]
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	1a9b      	subs	r3, r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	334d      	adds	r3, #77	; 0x4d
 8004adc:	2202      	movs	r2, #2
 8004ade:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ae0:	78fa      	ldrb	r2, [r7, #3]
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	1a9b      	subs	r3, r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	334c      	adds	r3, #76	; 0x4c
 8004af0:	2202      	movs	r2, #2
 8004af2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004af4:	78fa      	ldrb	r2, [r7, #3]
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	4613      	mov	r3, r2
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	1a9b      	subs	r3, r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	3326      	adds	r3, #38	; 0x26
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b0a:	78fa      	ldrb	r2, [r7, #3]
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	011b      	lsls	r3, r3, #4
 8004b12:	1a9b      	subs	r3, r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	440b      	add	r3, r1
 8004b18:	3326      	adds	r3, #38	; 0x26
 8004b1a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d159      	bne.n	8004bd4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b36:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b3e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	e03f      	b.n	8004bd4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004b54:	78fa      	ldrb	r2, [r7, #3]
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	334d      	adds	r3, #77	; 0x4d
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d126      	bne.n	8004bb8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b6a:	78fa      	ldrb	r2, [r7, #3]
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	1a9b      	subs	r3, r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	334d      	adds	r3, #77	; 0x4d
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004b7e:	78fa      	ldrb	r2, [r7, #3]
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	4613      	mov	r3, r2
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	1a9b      	subs	r3, r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	3344      	adds	r3, #68	; 0x44
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	1c59      	adds	r1, r3, #1
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	1a9b      	subs	r3, r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4403      	add	r3, r0
 8004b9e:	3344      	adds	r3, #68	; 0x44
 8004ba0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	334c      	adds	r3, #76	; 0x4c
 8004bb2:	2204      	movs	r2, #4
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	e00d      	b.n	8004bd4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	334d      	adds	r3, #77	; 0x4d
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	f000 8100 	beq.w	8004dd0 <HCD_HC_IN_IRQHandler+0xcca>
 8004bd0:	e000      	b.n	8004bd4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004bd2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	334c      	adds	r3, #76	; 0x4c
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f007 fe54 	bl	800c898 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004bf0:	e0ef      	b.n	8004dd2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	78fa      	ldrb	r2, [r7, #3]
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f004 fd3f 	bl	800967e <USB_ReadChInterrupts>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c06:	2b40      	cmp	r3, #64	; 0x40
 8004c08:	d12f      	bne.n	8004c6a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c16:	461a      	mov	r2, r3
 8004c18:	2340      	movs	r3, #64	; 0x40
 8004c1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004c1c:	78fa      	ldrb	r2, [r7, #3]
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	334d      	adds	r3, #77	; 0x4d
 8004c2c:	2205      	movs	r2, #5
 8004c2e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004c30:	78fa      	ldrb	r2, [r7, #3]
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	1a9b      	subs	r3, r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	331a      	adds	r3, #26
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c46:	78fa      	ldrb	r2, [r7, #3]
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	3344      	adds	r3, #68	; 0x44
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	4611      	mov	r1, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f005 faaf 	bl	800a1c6 <USB_HC_Halt>
 8004c68:	e0b3      	b.n	8004dd2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	78fa      	ldrb	r2, [r7, #3]
 8004c70:	4611      	mov	r1, r2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f004 fd03 	bl	800967e <USB_ReadChInterrupts>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	f040 80a7 	bne.w	8004dd2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004c84:	78fa      	ldrb	r2, [r7, #3]
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	1a9b      	subs	r3, r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	3326      	adds	r3, #38	; 0x26
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	d11b      	bne.n	8004cd2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c9a:	78fa      	ldrb	r2, [r7, #3]
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3344      	adds	r3, #68	; 0x44
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004cae:	78fa      	ldrb	r2, [r7, #3]
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	011b      	lsls	r3, r3, #4
 8004cb6:	1a9b      	subs	r3, r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	334d      	adds	r3, #77	; 0x4d
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	78fa      	ldrb	r2, [r7, #3]
 8004cc8:	4611      	mov	r1, r2
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f005 fa7b 	bl	800a1c6 <USB_HC_Halt>
 8004cd0:	e03f      	b.n	8004d52 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	3326      	adds	r3, #38	; 0x26
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	3326      	adds	r3, #38	; 0x26
 8004cf8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d129      	bne.n	8004d52 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004cfe:	78fa      	ldrb	r2, [r7, #3]
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	4613      	mov	r3, r2
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	3344      	adds	r3, #68	; 0x44
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	799b      	ldrb	r3, [r3, #6]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HCD_HC_IN_IRQHandler+0xc2a>
 8004d1a:	78fa      	ldrb	r2, [r7, #3]
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	331b      	adds	r3, #27
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d110      	bne.n	8004d52 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004d30:	78fa      	ldrb	r2, [r7, #3]
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	1a9b      	subs	r3, r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	334d      	adds	r3, #77	; 0x4d
 8004d40:	2204      	movs	r2, #4
 8004d42:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	78fa      	ldrb	r2, [r7, #3]
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f005 fa3a 	bl	800a1c6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004d52:	78fa      	ldrb	r2, [r7, #3]
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	331b      	adds	r3, #27
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d129      	bne.n	8004dbc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004d68:	78fa      	ldrb	r2, [r7, #3]
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	331b      	adds	r3, #27
 8004d78:	2200      	movs	r2, #0
 8004d7a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	78fa      	ldrb	r2, [r7, #3]
 8004d8c:	0151      	lsls	r1, r2, #5
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	440a      	add	r2, r1
 8004d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	78fa      	ldrb	r2, [r7, #3]
 8004dac:	0151      	lsls	r1, r2, #5
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	440a      	add	r2, r1
 8004db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004db6:	f043 0320 	orr.w	r3, r3, #32
 8004dba:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2310      	movs	r3, #16
 8004dcc:	6093      	str	r3, [r2, #8]
 8004dce:	e000      	b.n	8004dd2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004dd0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	78fa      	ldrb	r2, [r7, #3]
 8004df4:	4611      	mov	r1, r2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f004 fc41 	bl	800967e <USB_ReadChInterrupts>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d11b      	bne.n	8004e3e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004e06:	78fb      	ldrb	r3, [r7, #3]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e12:	461a      	mov	r2, r3
 8004e14:	2304      	movs	r3, #4
 8004e16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004e18:	78fa      	ldrb	r2, [r7, #3]
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	1a9b      	subs	r3, r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	334d      	adds	r3, #77	; 0x4d
 8004e28:	2207      	movs	r2, #7
 8004e2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	78fa      	ldrb	r2, [r7, #3]
 8004e32:	4611      	mov	r1, r2
 8004e34:	4618      	mov	r0, r3
 8004e36:	f005 f9c6 	bl	800a1c6 <USB_HC_Halt>
 8004e3a:	f000 bc6f 	b.w	800571c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	78fa      	ldrb	r2, [r7, #3]
 8004e44:	4611      	mov	r1, r2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f004 fc19 	bl	800967e <USB_ReadChInterrupts>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	f040 8082 	bne.w	8004f5c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e64:	461a      	mov	r2, r3
 8004e66:	2320      	movs	r3, #32
 8004e68:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004e6a:	78fa      	ldrb	r2, [r7, #3]
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	1a9b      	subs	r3, r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	3319      	adds	r3, #25
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d124      	bne.n	8004eca <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004e80:	78fa      	ldrb	r2, [r7, #3]
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	4613      	mov	r3, r2
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	1a9b      	subs	r3, r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	3319      	adds	r3, #25
 8004e90:	2200      	movs	r2, #0
 8004e92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	1a9b      	subs	r3, r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	334c      	adds	r3, #76	; 0x4c
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	334d      	adds	r3, #77	; 0x4d
 8004eb8:	2203      	movs	r2, #3
 8004eba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	78fa      	ldrb	r2, [r7, #3]
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f005 f97e 	bl	800a1c6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	331a      	adds	r3, #26
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	f040 841d 	bne.w	800571c <HCD_HC_OUT_IRQHandler+0x944>
 8004ee2:	78fa      	ldrb	r2, [r7, #3]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	1a9b      	subs	r3, r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	331b      	adds	r3, #27
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f040 8411 	bne.w	800571c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004efa:	78fa      	ldrb	r2, [r7, #3]
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	1a9b      	subs	r3, r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	3326      	adds	r3, #38	; 0x26
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d009      	beq.n	8004f24 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004f10:	78fa      	ldrb	r2, [r7, #3]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	1a9b      	subs	r3, r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	331b      	adds	r3, #27
 8004f20:	2201      	movs	r2, #1
 8004f22:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	334d      	adds	r3, #77	; 0x4d
 8004f34:	2203      	movs	r2, #3
 8004f36:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	78fa      	ldrb	r2, [r7, #3]
 8004f3e:	4611      	mov	r1, r2
 8004f40:	4618      	mov	r0, r3
 8004f42:	f005 f940 	bl	800a1c6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004f46:	78fa      	ldrb	r2, [r7, #3]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	3344      	adds	r3, #68	; 0x44
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	e3df      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	4611      	mov	r1, r2
 8004f64:	4618      	mov	r0, r3
 8004f66:	f004 fb8a 	bl	800967e <USB_ReadChInterrupts>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f74:	d111      	bne.n	8004f9a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f82:	461a      	mov	r2, r3
 8004f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f88:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	78fa      	ldrb	r2, [r7, #3]
 8004f90:	4611      	mov	r1, r2
 8004f92:	4618      	mov	r0, r3
 8004f94:	f005 f917 	bl	800a1c6 <USB_HC_Halt>
 8004f98:	e3c0      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	78fa      	ldrb	r2, [r7, #3]
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f004 fb6b 	bl	800967e <USB_ReadChInterrupts>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d168      	bne.n	8005084 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004fb2:	78fa      	ldrb	r2, [r7, #3]
 8004fb4:	6879      	ldr	r1, [r7, #4]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	3344      	adds	r3, #68	; 0x44
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	78fa      	ldrb	r2, [r7, #3]
 8004fcc:	4611      	mov	r1, r2
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f004 fb55 	bl	800967e <USB_ReadChInterrupts>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fda:	2b40      	cmp	r3, #64	; 0x40
 8004fdc:	d112      	bne.n	8005004 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004fde:	78fa      	ldrb	r2, [r7, #3]
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	1a9b      	subs	r3, r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	3319      	adds	r3, #25
 8004fee:	2201      	movs	r2, #1
 8004ff0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004ff2:	78fb      	ldrb	r3, [r7, #3]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ffe:	461a      	mov	r2, r3
 8005000:	2340      	movs	r3, #64	; 0x40
 8005002:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005004:	78fa      	ldrb	r2, [r7, #3]
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	4613      	mov	r3, r2
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	331b      	adds	r3, #27
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d019      	beq.n	800504e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800501a:	78fa      	ldrb	r2, [r7, #3]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	331b      	adds	r3, #27
 800502a:	2200      	movs	r2, #0
 800502c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800502e:	78fb      	ldrb	r3, [r7, #3]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4413      	add	r3, r2
 8005036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	78fa      	ldrb	r2, [r7, #3]
 800503e:	0151      	lsls	r1, r2, #5
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	440a      	add	r2, r1
 8005044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4413      	add	r3, r2
 8005056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505a:	461a      	mov	r2, r3
 800505c:	2301      	movs	r3, #1
 800505e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005060:	78fa      	ldrb	r2, [r7, #3]
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	334d      	adds	r3, #77	; 0x4d
 8005070:	2201      	movs	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	78fa      	ldrb	r2, [r7, #3]
 800507a:	4611      	mov	r1, r2
 800507c:	4618      	mov	r0, r3
 800507e:	f005 f8a2 	bl	800a1c6 <USB_HC_Halt>
 8005082:	e34b      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	78fa      	ldrb	r2, [r7, #3]
 800508a:	4611      	mov	r1, r2
 800508c:	4618      	mov	r0, r3
 800508e:	f004 faf6 	bl	800967e <USB_ReadChInterrupts>
 8005092:	4603      	mov	r3, r0
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	d139      	bne.n	8005110 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800509c:	78fa      	ldrb	r2, [r7, #3]
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	1a9b      	subs	r3, r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	334d      	adds	r3, #77	; 0x4d
 80050ac:	2205      	movs	r2, #5
 80050ae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80050b0:	78fa      	ldrb	r2, [r7, #3]
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	331a      	adds	r3, #26
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80050c6:	78fa      	ldrb	r2, [r7, #3]
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	1a9b      	subs	r3, r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	3319      	adds	r3, #25
 80050d6:	2201      	movs	r2, #1
 80050d8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80050da:	78fa      	ldrb	r2, [r7, #3]
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	3344      	adds	r3, #68	; 0x44
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	78fa      	ldrb	r2, [r7, #3]
 80050f4:	4611      	mov	r1, r2
 80050f6:	4618      	mov	r0, r3
 80050f8:	f005 f865 	bl	800a1c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4413      	add	r3, r2
 8005104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005108:	461a      	mov	r2, r3
 800510a:	2340      	movs	r3, #64	; 0x40
 800510c:	6093      	str	r3, [r2, #8]
 800510e:	e305      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	78fa      	ldrb	r2, [r7, #3]
 8005116:	4611      	mov	r1, r2
 8005118:	4618      	mov	r0, r3
 800511a:	f004 fab0 	bl	800967e <USB_ReadChInterrupts>
 800511e:	4603      	mov	r3, r0
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b08      	cmp	r3, #8
 8005126:	d11a      	bne.n	800515e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4413      	add	r3, r2
 8005130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005134:	461a      	mov	r2, r3
 8005136:	2308      	movs	r3, #8
 8005138:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800513a:	78fa      	ldrb	r2, [r7, #3]
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	4613      	mov	r3, r2
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	1a9b      	subs	r3, r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	440b      	add	r3, r1
 8005148:	334d      	adds	r3, #77	; 0x4d
 800514a:	2206      	movs	r2, #6
 800514c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	78fa      	ldrb	r2, [r7, #3]
 8005154:	4611      	mov	r1, r2
 8005156:	4618      	mov	r0, r3
 8005158:	f005 f835 	bl	800a1c6 <USB_HC_Halt>
 800515c:	e2de      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	78fa      	ldrb	r2, [r7, #3]
 8005164:	4611      	mov	r1, r2
 8005166:	4618      	mov	r0, r3
 8005168:	f004 fa89 	bl	800967e <USB_ReadChInterrupts>
 800516c:	4603      	mov	r3, r0
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	2b10      	cmp	r3, #16
 8005174:	d144      	bne.n	8005200 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005176:	78fa      	ldrb	r2, [r7, #3]
 8005178:	6879      	ldr	r1, [r7, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	440b      	add	r3, r1
 8005184:	3344      	adds	r3, #68	; 0x44
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800518a:	78fa      	ldrb	r2, [r7, #3]
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	1a9b      	subs	r3, r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	334d      	adds	r3, #77	; 0x4d
 800519a:	2204      	movs	r2, #4
 800519c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800519e:	78fa      	ldrb	r2, [r7, #3]
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	4613      	mov	r3, r2
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	1a9b      	subs	r3, r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	440b      	add	r3, r1
 80051ac:	3319      	adds	r3, #25
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d114      	bne.n	80051de <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80051b4:	78fa      	ldrb	r2, [r7, #3]
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	3318      	adds	r3, #24
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d109      	bne.n	80051de <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80051ca:	78fa      	ldrb	r2, [r7, #3]
 80051cc:	6879      	ldr	r1, [r7, #4]
 80051ce:	4613      	mov	r3, r2
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	1a9b      	subs	r3, r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	440b      	add	r3, r1
 80051d8:	3319      	adds	r3, #25
 80051da:	2201      	movs	r2, #1
 80051dc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	4611      	mov	r1, r2
 80051e6:	4618      	mov	r0, r3
 80051e8:	f004 ffed 	bl	800a1c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f8:	461a      	mov	r2, r3
 80051fa:	2310      	movs	r3, #16
 80051fc:	6093      	str	r3, [r2, #8]
 80051fe:	e28d      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	78fa      	ldrb	r2, [r7, #3]
 8005206:	4611      	mov	r1, r2
 8005208:	4618      	mov	r0, r3
 800520a:	f004 fa38 	bl	800967e <USB_ReadChInterrupts>
 800520e:	4603      	mov	r3, r0
 8005210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005214:	2b80      	cmp	r3, #128	; 0x80
 8005216:	d169      	bne.n	80052ec <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	799b      	ldrb	r3, [r3, #6]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d111      	bne.n	8005244 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005220:	78fa      	ldrb	r2, [r7, #3]
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	4613      	mov	r3, r2
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	334d      	adds	r3, #77	; 0x4d
 8005230:	2207      	movs	r2, #7
 8005232:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	78fa      	ldrb	r2, [r7, #3]
 800523a:	4611      	mov	r1, r2
 800523c:	4618      	mov	r0, r3
 800523e:	f004 ffc2 	bl	800a1c6 <USB_HC_Halt>
 8005242:	e049      	b.n	80052d8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005244:	78fa      	ldrb	r2, [r7, #3]
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	4613      	mov	r3, r2
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	1a9b      	subs	r3, r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	3344      	adds	r3, #68	; 0x44
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	1c59      	adds	r1, r3, #1
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	4613      	mov	r3, r2
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4403      	add	r3, r0
 8005264:	3344      	adds	r3, #68	; 0x44
 8005266:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005268:	78fa      	ldrb	r2, [r7, #3]
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	4613      	mov	r3, r2
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	1a9b      	subs	r3, r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	440b      	add	r3, r1
 8005276:	3344      	adds	r3, #68	; 0x44
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d922      	bls.n	80052c4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800527e:	78fa      	ldrb	r2, [r7, #3]
 8005280:	6879      	ldr	r1, [r7, #4]
 8005282:	4613      	mov	r3, r2
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	1a9b      	subs	r3, r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	440b      	add	r3, r1
 800528c:	3344      	adds	r3, #68	; 0x44
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005292:	78fa      	ldrb	r2, [r7, #3]
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	4613      	mov	r3, r2
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	440b      	add	r3, r1
 80052a0:	334c      	adds	r3, #76	; 0x4c
 80052a2:	2204      	movs	r2, #4
 80052a4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80052a6:	78fa      	ldrb	r2, [r7, #3]
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	4613      	mov	r3, r2
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	1a9b      	subs	r3, r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	334c      	adds	r3, #76	; 0x4c
 80052b6:	781a      	ldrb	r2, [r3, #0]
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	4619      	mov	r1, r3
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f007 faeb 	bl	800c898 <HAL_HCD_HC_NotifyURBChange_Callback>
 80052c2:	e009      	b.n	80052d8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052c4:	78fa      	ldrb	r2, [r7, #3]
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	4613      	mov	r3, r2
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	1a9b      	subs	r3, r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	334c      	adds	r3, #76	; 0x4c
 80052d4:	2202      	movs	r2, #2
 80052d6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80052d8:	78fb      	ldrb	r3, [r7, #3]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e4:	461a      	mov	r2, r3
 80052e6:	2380      	movs	r3, #128	; 0x80
 80052e8:	6093      	str	r3, [r2, #8]
 80052ea:	e217      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	78fa      	ldrb	r2, [r7, #3]
 80052f2:	4611      	mov	r1, r2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f004 f9c2 	bl	800967e <USB_ReadChInterrupts>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005304:	d11b      	bne.n	800533e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005306:	78fa      	ldrb	r2, [r7, #3]
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	334d      	adds	r3, #77	; 0x4d
 8005316:	2209      	movs	r2, #9
 8005318:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	78fa      	ldrb	r2, [r7, #3]
 8005320:	4611      	mov	r1, r2
 8005322:	4618      	mov	r0, r3
 8005324:	f004 ff4f 	bl	800a1c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4413      	add	r3, r2
 8005330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005334:	461a      	mov	r2, r3
 8005336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800533a:	6093      	str	r3, [r2, #8]
 800533c:	e1ee      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	78fa      	ldrb	r2, [r7, #3]
 8005344:	4611      	mov	r1, r2
 8005346:	4618      	mov	r0, r3
 8005348:	f004 f999 	bl	800967e <USB_ReadChInterrupts>
 800534c:	4603      	mov	r3, r0
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b02      	cmp	r3, #2
 8005354:	f040 81df 	bne.w	8005716 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	4413      	add	r3, r2
 8005360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005364:	461a      	mov	r2, r3
 8005366:	2302      	movs	r3, #2
 8005368:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	334d      	adds	r3, #77	; 0x4d
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b01      	cmp	r3, #1
 800537e:	f040 8093 	bne.w	80054a8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005382:	78fa      	ldrb	r2, [r7, #3]
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	334d      	adds	r3, #77	; 0x4d
 8005392:	2202      	movs	r2, #2
 8005394:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005396:	78fa      	ldrb	r2, [r7, #3]
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	1a9b      	subs	r3, r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	334c      	adds	r3, #76	; 0x4c
 80053a6:	2201      	movs	r2, #1
 80053a8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80053aa:	78fa      	ldrb	r2, [r7, #3]
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	3326      	adds	r3, #38	; 0x26
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d00b      	beq.n	80053d8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80053c0:	78fa      	ldrb	r2, [r7, #3]
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	4613      	mov	r3, r2
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	3326      	adds	r3, #38	; 0x26
 80053d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	f040 8190 	bne.w	80056f8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	799b      	ldrb	r3, [r3, #6]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d115      	bne.n	800540c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80053e0:	78fa      	ldrb	r2, [r7, #3]
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	4613      	mov	r3, r2
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	1a9b      	subs	r3, r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	333d      	adds	r3, #61	; 0x3d
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	78fa      	ldrb	r2, [r7, #3]
 80053f4:	f083 0301 	eor.w	r3, r3, #1
 80053f8:	b2d8      	uxtb	r0, r3
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	333d      	adds	r3, #61	; 0x3d
 8005408:	4602      	mov	r2, r0
 800540a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	799b      	ldrb	r3, [r3, #6]
 8005410:	2b01      	cmp	r3, #1
 8005412:	f040 8171 	bne.w	80056f8 <HCD_HC_OUT_IRQHandler+0x920>
 8005416:	78fa      	ldrb	r2, [r7, #3]
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	3334      	adds	r3, #52	; 0x34
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 8165 	beq.w	80056f8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800542e:	78fa      	ldrb	r2, [r7, #3]
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	011b      	lsls	r3, r3, #4
 8005436:	1a9b      	subs	r3, r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	3334      	adds	r3, #52	; 0x34
 800543e:	6819      	ldr	r1, [r3, #0]
 8005440:	78fa      	ldrb	r2, [r7, #3]
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	4613      	mov	r3, r2
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	1a9b      	subs	r3, r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4403      	add	r3, r0
 800544e:	3328      	adds	r3, #40	; 0x28
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	440b      	add	r3, r1
 8005454:	1e59      	subs	r1, r3, #1
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	4613      	mov	r3, r2
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	1a9b      	subs	r3, r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4403      	add	r3, r0
 8005464:	3328      	adds	r3, #40	; 0x28
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	fbb1 f3f3 	udiv	r3, r1, r3
 800546c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 813f 	beq.w	80056f8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800547a:	78fa      	ldrb	r2, [r7, #3]
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	4613      	mov	r3, r2
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	1a9b      	subs	r3, r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	440b      	add	r3, r1
 8005488:	333d      	adds	r3, #61	; 0x3d
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	78fa      	ldrb	r2, [r7, #3]
 800548e:	f083 0301 	eor.w	r3, r3, #1
 8005492:	b2d8      	uxtb	r0, r3
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	4613      	mov	r3, r2
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	1a9b      	subs	r3, r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	440b      	add	r3, r1
 80054a0:	333d      	adds	r3, #61	; 0x3d
 80054a2:	4602      	mov	r2, r0
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e127      	b.n	80056f8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80054a8:	78fa      	ldrb	r2, [r7, #3]
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	4613      	mov	r3, r2
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	1a9b      	subs	r3, r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	334d      	adds	r3, #77	; 0x4d
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b03      	cmp	r3, #3
 80054bc:	d120      	bne.n	8005500 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054be:	78fa      	ldrb	r2, [r7, #3]
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	334d      	adds	r3, #77	; 0x4d
 80054ce:	2202      	movs	r2, #2
 80054d0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80054d2:	78fa      	ldrb	r2, [r7, #3]
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	4613      	mov	r3, r2
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	331b      	adds	r3, #27
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	f040 8107 	bne.w	80056f8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054ea:	78fa      	ldrb	r2, [r7, #3]
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	4613      	mov	r3, r2
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	1a9b      	subs	r3, r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	334c      	adds	r3, #76	; 0x4c
 80054fa:	2202      	movs	r2, #2
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	e0fb      	b.n	80056f8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005500:	78fa      	ldrb	r2, [r7, #3]
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	4613      	mov	r3, r2
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	334d      	adds	r3, #77	; 0x4d
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b04      	cmp	r3, #4
 8005514:	d13a      	bne.n	800558c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005516:	78fa      	ldrb	r2, [r7, #3]
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	4613      	mov	r3, r2
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	1a9b      	subs	r3, r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	440b      	add	r3, r1
 8005524:	334d      	adds	r3, #77	; 0x4d
 8005526:	2202      	movs	r2, #2
 8005528:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800552a:	78fa      	ldrb	r2, [r7, #3]
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	4613      	mov	r3, r2
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	1a9b      	subs	r3, r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	334c      	adds	r3, #76	; 0x4c
 800553a:	2202      	movs	r2, #2
 800553c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800553e:	78fa      	ldrb	r2, [r7, #3]
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	4613      	mov	r3, r2
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	331b      	adds	r3, #27
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b01      	cmp	r3, #1
 8005552:	f040 80d1 	bne.w	80056f8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005556:	78fa      	ldrb	r2, [r7, #3]
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	1a9b      	subs	r3, r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	331b      	adds	r3, #27
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	4413      	add	r3, r2
 8005572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	78fa      	ldrb	r2, [r7, #3]
 800557a:	0151      	lsls	r1, r2, #5
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	440a      	add	r2, r1
 8005580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005588:	6053      	str	r3, [r2, #4]
 800558a:	e0b5      	b.n	80056f8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800558c:	78fa      	ldrb	r2, [r7, #3]
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	4613      	mov	r3, r2
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	334d      	adds	r3, #77	; 0x4d
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b05      	cmp	r3, #5
 80055a0:	d114      	bne.n	80055cc <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055a2:	78fa      	ldrb	r2, [r7, #3]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	011b      	lsls	r3, r3, #4
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	334d      	adds	r3, #77	; 0x4d
 80055b2:	2202      	movs	r2, #2
 80055b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80055b6:	78fa      	ldrb	r2, [r7, #3]
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	334c      	adds	r3, #76	; 0x4c
 80055c6:	2202      	movs	r2, #2
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	e095      	b.n	80056f8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80055cc:	78fa      	ldrb	r2, [r7, #3]
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	4613      	mov	r3, r2
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	1a9b      	subs	r3, r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	440b      	add	r3, r1
 80055da:	334d      	adds	r3, #77	; 0x4d
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b06      	cmp	r3, #6
 80055e0:	d114      	bne.n	800560c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055e2:	78fa      	ldrb	r2, [r7, #3]
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	4613      	mov	r3, r2
 80055e8:	011b      	lsls	r3, r3, #4
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	440b      	add	r3, r1
 80055f0:	334d      	adds	r3, #77	; 0x4d
 80055f2:	2202      	movs	r2, #2
 80055f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80055f6:	78fa      	ldrb	r2, [r7, #3]
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	4613      	mov	r3, r2
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	1a9b      	subs	r3, r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	440b      	add	r3, r1
 8005604:	334c      	adds	r3, #76	; 0x4c
 8005606:	2205      	movs	r2, #5
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	e075      	b.n	80056f8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800560c:	78fa      	ldrb	r2, [r7, #3]
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	334d      	adds	r3, #77	; 0x4d
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b07      	cmp	r3, #7
 8005620:	d00a      	beq.n	8005638 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005622:	78fa      	ldrb	r2, [r7, #3]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	334d      	adds	r3, #77	; 0x4d
 8005632:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005634:	2b09      	cmp	r3, #9
 8005636:	d170      	bne.n	800571a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	334d      	adds	r3, #77	; 0x4d
 8005648:	2202      	movs	r2, #2
 800564a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800564c:	78fa      	ldrb	r2, [r7, #3]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	3344      	adds	r3, #68	; 0x44
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	1c59      	adds	r1, r3, #1
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	4613      	mov	r3, r2
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	1a9b      	subs	r3, r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4403      	add	r3, r0
 800566c:	3344      	adds	r3, #68	; 0x44
 800566e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005670:	78fa      	ldrb	r2, [r7, #3]
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	3344      	adds	r3, #68	; 0x44
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b02      	cmp	r3, #2
 8005684:	d914      	bls.n	80056b0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005686:	78fa      	ldrb	r2, [r7, #3]
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	4613      	mov	r3, r2
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	1a9b      	subs	r3, r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	3344      	adds	r3, #68	; 0x44
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800569a:	78fa      	ldrb	r2, [r7, #3]
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	011b      	lsls	r3, r3, #4
 80056a2:	1a9b      	subs	r3, r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	334c      	adds	r3, #76	; 0x4c
 80056aa:	2204      	movs	r2, #4
 80056ac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056ae:	e022      	b.n	80056f6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80056b0:	78fa      	ldrb	r2, [r7, #3]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	334c      	adds	r3, #76	; 0x4c
 80056c0:	2202      	movs	r2, #2
 80056c2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056da:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056e2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f0:	461a      	mov	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056f6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80056f8:	78fa      	ldrb	r2, [r7, #3]
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	1a9b      	subs	r3, r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	334c      	adds	r3, #76	; 0x4c
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f007 f8c2 	bl	800c898 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005714:	e002      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005716:	bf00      	nop
 8005718:	e000      	b.n	800571c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800571a:	bf00      	nop
  }
}
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b08a      	sub	sp, #40	; 0x28
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	0c5b      	lsrs	r3, r3, #17
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	091b      	lsrs	r3, r3, #4
 8005752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005756:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d004      	beq.n	8005768 <HCD_RXQLVL_IRQHandler+0x46>
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b05      	cmp	r3, #5
 8005762:	f000 80b6 	beq.w	80058d2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005766:	e0b7      	b.n	80058d8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80b3 	beq.w	80058d6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	4613      	mov	r3, r2
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	1a9b      	subs	r3, r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	332c      	adds	r3, #44	; 0x2c
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 80a7 	beq.w	80058d6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4613      	mov	r3, r2
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	1a9b      	subs	r3, r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	3338      	adds	r3, #56	; 0x38
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	18d1      	adds	r1, r2, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4613      	mov	r3, r2
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	1a9b      	subs	r3, r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4403      	add	r3, r0
 80057ac:	3334      	adds	r3, #52	; 0x34
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4299      	cmp	r1, r3
 80057b2:	f200 8083 	bhi.w	80058bc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6818      	ldr	r0, [r3, #0]
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	4613      	mov	r3, r2
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	332c      	adds	r3, #44	; 0x2c
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	b292      	uxth	r2, r2
 80057d0:	4619      	mov	r1, r3
 80057d2:	f003 fee9 	bl	80095a8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4613      	mov	r3, r2
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	440b      	add	r3, r1
 80057e4:	332c      	adds	r3, #44	; 0x2c
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	18d1      	adds	r1, r2, r3
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	4613      	mov	r3, r2
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	1a9b      	subs	r3, r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4403      	add	r3, r0
 80057fa:	332c      	adds	r3, #44	; 0x2c
 80057fc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4613      	mov	r3, r2
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	3338      	adds	r3, #56	; 0x38
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	18d1      	adds	r1, r2, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4613      	mov	r3, r2
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	1a9b      	subs	r3, r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4403      	add	r3, r0
 8005822:	3338      	adds	r3, #56	; 0x38
 8005824:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	4413      	add	r3, r2
 800582e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	0cdb      	lsrs	r3, r3, #19
 8005836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800583a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4613      	mov	r3, r2
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	1a9b      	subs	r3, r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	440b      	add	r3, r1
 800584a:	3328      	adds	r3, #40	; 0x28
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4293      	cmp	r3, r2
 8005854:	d13f      	bne.n	80058d6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d03c      	beq.n	80058d6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	4413      	add	r3, r2
 8005864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005872:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800587a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	4413      	add	r3, r2
 8005884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005888:	461a      	mov	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	4613      	mov	r3, r2
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	1a9b      	subs	r3, r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	333c      	adds	r3, #60	; 0x3c
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	f083 0301 	eor.w	r3, r3, #1
 80058a4:	b2d8      	uxtb	r0, r3
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4613      	mov	r3, r2
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	1a9b      	subs	r3, r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	440b      	add	r3, r1
 80058b4:	333c      	adds	r3, #60	; 0x3c
 80058b6:	4602      	mov	r2, r0
 80058b8:	701a      	strb	r2, [r3, #0]
      break;
 80058ba:	e00c      	b.n	80058d6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	4613      	mov	r3, r2
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	1a9b      	subs	r3, r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	334c      	adds	r3, #76	; 0x4c
 80058cc:	2204      	movs	r2, #4
 80058ce:	701a      	strb	r2, [r3, #0]
      break;
 80058d0:	e001      	b.n	80058d6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80058d2:	bf00      	nop
 80058d4:	e000      	b.n	80058d8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80058d6:	bf00      	nop
  }
}
 80058d8:	bf00      	nop
 80058da:	3728      	adds	r7, #40	; 0x28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800590c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b02      	cmp	r3, #2
 8005916:	d10b      	bne.n	8005930 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b01      	cmp	r3, #1
 8005920:	d102      	bne.n	8005928 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f006 ff9c 	bl	800c860 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f043 0302 	orr.w	r3, r3, #2
 800592e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b08      	cmp	r3, #8
 8005938:	d132      	bne.n	80059a0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f043 0308 	orr.w	r3, r3, #8
 8005940:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b04      	cmp	r3, #4
 800594a:	d126      	bne.n	800599a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	7a5b      	ldrb	r3, [r3, #9]
 8005950:	2b02      	cmp	r3, #2
 8005952:	d113      	bne.n	800597c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800595a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800595e:	d106      	bne.n	800596e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2102      	movs	r1, #2
 8005966:	4618      	mov	r0, r3
 8005968:	f003 ffae 	bl	80098c8 <USB_InitFSLSPClkSel>
 800596c:	e011      	b.n	8005992 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2101      	movs	r1, #1
 8005974:	4618      	mov	r0, r3
 8005976:	f003 ffa7 	bl	80098c8 <USB_InitFSLSPClkSel>
 800597a:	e00a      	b.n	8005992 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	79db      	ldrb	r3, [r3, #7]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d106      	bne.n	8005992 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800598a:	461a      	mov	r2, r3
 800598c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005990:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f006 ff8e 	bl	800c8b4 <HAL_HCD_PortEnabled_Callback>
 8005998:	e002      	b.n	80059a0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f006 ff98 	bl	800c8d0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b20      	cmp	r3, #32
 80059a8:	d103      	bne.n	80059b2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f043 0320 	orr.w	r3, r3, #32
 80059b0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059b8:	461a      	mov	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6013      	str	r3, [r2, #0]
}
 80059be:	bf00      	nop
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e12b      	b.n	8005c32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fc fc7e 	bl	80022f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2224      	movs	r2, #36	; 0x24
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0201 	bic.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a2c:	f001 fc60 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 8005a30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4a81      	ldr	r2, [pc, #516]	; (8005c3c <HAL_I2C_Init+0x274>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d807      	bhi.n	8005a4c <HAL_I2C_Init+0x84>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4a80      	ldr	r2, [pc, #512]	; (8005c40 <HAL_I2C_Init+0x278>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	bf94      	ite	ls
 8005a44:	2301      	movls	r3, #1
 8005a46:	2300      	movhi	r3, #0
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	e006      	b.n	8005a5a <HAL_I2C_Init+0x92>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4a7d      	ldr	r2, [pc, #500]	; (8005c44 <HAL_I2C_Init+0x27c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	bf94      	ite	ls
 8005a54:	2301      	movls	r3, #1
 8005a56:	2300      	movhi	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e0e7      	b.n	8005c32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4a78      	ldr	r2, [pc, #480]	; (8005c48 <HAL_I2C_Init+0x280>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	0c9b      	lsrs	r3, r3, #18
 8005a6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	4a6a      	ldr	r2, [pc, #424]	; (8005c3c <HAL_I2C_Init+0x274>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d802      	bhi.n	8005a9c <HAL_I2C_Init+0xd4>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	e009      	b.n	8005ab0 <HAL_I2C_Init+0xe8>
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005aa2:	fb02 f303 	mul.w	r3, r2, r3
 8005aa6:	4a69      	ldr	r2, [pc, #420]	; (8005c4c <HAL_I2C_Init+0x284>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	099b      	lsrs	r3, r3, #6
 8005aae:	3301      	adds	r3, #1
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ac2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	495c      	ldr	r1, [pc, #368]	; (8005c3c <HAL_I2C_Init+0x274>)
 8005acc:	428b      	cmp	r3, r1
 8005ace:	d819      	bhi.n	8005b04 <HAL_I2C_Init+0x13c>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	1e59      	subs	r1, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ade:	1c59      	adds	r1, r3, #1
 8005ae0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ae4:	400b      	ands	r3, r1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <HAL_I2C_Init+0x138>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	1e59      	subs	r1, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005af8:	3301      	adds	r3, #1
 8005afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005afe:	e051      	b.n	8005ba4 <HAL_I2C_Init+0x1dc>
 8005b00:	2304      	movs	r3, #4
 8005b02:	e04f      	b.n	8005ba4 <HAL_I2C_Init+0x1dc>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d111      	bne.n	8005b30 <HAL_I2C_Init+0x168>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	1e58      	subs	r0, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6859      	ldr	r1, [r3, #4]
 8005b14:	460b      	mov	r3, r1
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	440b      	add	r3, r1
 8005b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b1e:	3301      	adds	r3, #1
 8005b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	bf0c      	ite	eq
 8005b28:	2301      	moveq	r3, #1
 8005b2a:	2300      	movne	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	e012      	b.n	8005b56 <HAL_I2C_Init+0x18e>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	1e58      	subs	r0, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6859      	ldr	r1, [r3, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	0099      	lsls	r1, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b46:	3301      	adds	r3, #1
 8005b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bf0c      	ite	eq
 8005b50:	2301      	moveq	r3, #1
 8005b52:	2300      	movne	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_I2C_Init+0x196>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e022      	b.n	8005ba4 <HAL_I2C_Init+0x1dc>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10e      	bne.n	8005b84 <HAL_I2C_Init+0x1bc>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	1e58      	subs	r0, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6859      	ldr	r1, [r3, #4]
 8005b6e:	460b      	mov	r3, r1
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	440b      	add	r3, r1
 8005b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b78:	3301      	adds	r3, #1
 8005b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b82:	e00f      	b.n	8005ba4 <HAL_I2C_Init+0x1dc>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	1e58      	subs	r0, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6859      	ldr	r1, [r3, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	0099      	lsls	r1, r3, #2
 8005b94:	440b      	add	r3, r1
 8005b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	6809      	ldr	r1, [r1, #0]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69da      	ldr	r2, [r3, #28]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005bd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6911      	ldr	r1, [r2, #16]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	68d2      	ldr	r2, [r2, #12]
 8005bde:	4311      	orrs	r1, r2
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6812      	ldr	r2, [r2, #0]
 8005be4:	430b      	orrs	r3, r1
 8005be6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	000186a0 	.word	0x000186a0
 8005c40:	001e847f 	.word	0x001e847f
 8005c44:	003d08ff 	.word	0x003d08ff
 8005c48:	431bde83 	.word	0x431bde83
 8005c4c:	10624dd3 	.word	0x10624dd3

08005c50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	4608      	mov	r0, r1
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	817b      	strh	r3, [r7, #10]
 8005c62:	460b      	mov	r3, r1
 8005c64:	813b      	strh	r3, [r7, #8]
 8005c66:	4613      	mov	r3, r2
 8005c68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c6a:	f7fc ff1f 	bl	8002aac <HAL_GetTick>
 8005c6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b20      	cmp	r3, #32
 8005c7a:	f040 80d9 	bne.w	8005e30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	2319      	movs	r3, #25
 8005c84:	2201      	movs	r2, #1
 8005c86:	496d      	ldr	r1, [pc, #436]	; (8005e3c <HAL_I2C_Mem_Write+0x1ec>)
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 fc8b 	bl	80065a4 <I2C_WaitOnFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
 8005c96:	e0cc      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_I2C_Mem_Write+0x56>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e0c5      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d007      	beq.n	8005ccc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f042 0201 	orr.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2221      	movs	r2, #33	; 0x21
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2240      	movs	r2, #64	; 0x40
 8005ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a3a      	ldr	r2, [r7, #32]
 8005cf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4a4d      	ldr	r2, [pc, #308]	; (8005e40 <HAL_I2C_Mem_Write+0x1f0>)
 8005d0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d0e:	88f8      	ldrh	r0, [r7, #6]
 8005d10:	893a      	ldrh	r2, [r7, #8]
 8005d12:	8979      	ldrh	r1, [r7, #10]
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	9301      	str	r3, [sp, #4]
 8005d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 fac2 	bl	80062a8 <I2C_RequestMemoryWrite>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d052      	beq.n	8005dd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e081      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fd50 	bl	80067d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00d      	beq.n	8005d5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d107      	bne.n	8005d56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e06b      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	781a      	ldrb	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d11b      	bne.n	8005dd0 <HAL_I2C_Mem_Write+0x180>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d017      	beq.n	8005dd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	781a      	ldrb	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1aa      	bne.n	8005d2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fd43 	bl	8006868 <I2C_WaitOnBTFFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00d      	beq.n	8005e04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d107      	bne.n	8005e00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e016      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e000      	b.n	8005e32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005e30:	2302      	movs	r3, #2
  }
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3718      	adds	r7, #24
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	00100002 	.word	0x00100002
 8005e40:	ffff0000 	.word	0xffff0000

08005e44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08c      	sub	sp, #48	; 0x30
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	4611      	mov	r1, r2
 8005e50:	461a      	mov	r2, r3
 8005e52:	4603      	mov	r3, r0
 8005e54:	817b      	strh	r3, [r7, #10]
 8005e56:	460b      	mov	r3, r1
 8005e58:	813b      	strh	r3, [r7, #8]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e5e:	f7fc fe25 	bl	8002aac <HAL_GetTick>
 8005e62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	f040 8214 	bne.w	800629a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	2319      	movs	r3, #25
 8005e78:	2201      	movs	r2, #1
 8005e7a:	497b      	ldr	r1, [pc, #492]	; (8006068 <HAL_I2C_Mem_Read+0x224>)
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fb91 	bl	80065a4 <I2C_WaitOnFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e207      	b.n	800629c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_I2C_Mem_Read+0x56>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e200      	b.n	800629c <HAL_I2C_Mem_Read+0x458>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d007      	beq.n	8005ec0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ece:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2222      	movs	r2, #34	; 0x22
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2240      	movs	r2, #64	; 0x40
 8005edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4a5b      	ldr	r2, [pc, #364]	; (800606c <HAL_I2C_Mem_Read+0x228>)
 8005f00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f02:	88f8      	ldrh	r0, [r7, #6]
 8005f04:	893a      	ldrh	r2, [r7, #8]
 8005f06:	8979      	ldrh	r1, [r7, #10]
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	9301      	str	r3, [sp, #4]
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	4603      	mov	r3, r0
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 fa5e 	bl	80063d4 <I2C_RequestMemoryRead>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e1bc      	b.n	800629c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d113      	bne.n	8005f52 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	623b      	str	r3, [r7, #32]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	623b      	str	r3, [r7, #32]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	623b      	str	r3, [r7, #32]
 8005f3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	e190      	b.n	8006274 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d11b      	bne.n	8005f92 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	61fb      	str	r3, [r7, #28]
 8005f7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	e170      	b.n	8006274 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d11b      	bne.n	8005fd2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fa8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	61bb      	str	r3, [r7, #24]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	e150      	b.n	8006274 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005fe8:	e144      	b.n	8006274 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	f200 80f1 	bhi.w	80061d6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d123      	bne.n	8006044 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 fc79 	bl	80068f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e145      	b.n	800629c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602c:	3b01      	subs	r3, #1
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006042:	e117      	b.n	8006274 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006048:	2b02      	cmp	r3, #2
 800604a:	d14e      	bne.n	80060ea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006052:	2200      	movs	r2, #0
 8006054:	4906      	ldr	r1, [pc, #24]	; (8006070 <HAL_I2C_Mem_Read+0x22c>)
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 faa4 	bl	80065a4 <I2C_WaitOnFlagUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d008      	beq.n	8006074 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e11a      	b.n	800629c <HAL_I2C_Mem_Read+0x458>
 8006066:	bf00      	nop
 8006068:	00100002 	.word	0x00100002
 800606c:	ffff0000 	.word	0xffff0000
 8006070:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006082:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a0:	3b01      	subs	r3, #1
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691a      	ldr	r2, [r3, #16]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	1c5a      	adds	r2, r3, #1
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060e8:	e0c4      	b.n	8006274 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f0:	2200      	movs	r2, #0
 80060f2:	496c      	ldr	r1, [pc, #432]	; (80062a4 <HAL_I2C_Mem_Read+0x460>)
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 fa55 	bl	80065a4 <I2C_WaitOnFlagUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e0cb      	b.n	800629c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006112:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	2200      	movs	r2, #0
 800614e:	4955      	ldr	r1, [pc, #340]	; (80062a4 <HAL_I2C_Mem_Read+0x460>)
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 fa27 	bl	80065a4 <I2C_WaitOnFlagUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e09d      	b.n	800629c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800616e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	b2d2      	uxtb	r2, r2
 80061ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061d4:	e04e      	b.n	8006274 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 fb8c 	bl	80068f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e058      	b.n	800629c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b04      	cmp	r3, #4
 8006228:	d124      	bne.n	8006274 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622e:	2b03      	cmp	r3, #3
 8006230:	d107      	bne.n	8006242 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006240:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	691a      	ldr	r2, [r3, #16]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800625e:	3b01      	subs	r3, #1
 8006260:	b29a      	uxth	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800626a:	b29b      	uxth	r3, r3
 800626c:	3b01      	subs	r3, #1
 800626e:	b29a      	uxth	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006278:	2b00      	cmp	r3, #0
 800627a:	f47f aeb6 	bne.w	8005fea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2220      	movs	r2, #32
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	e000      	b.n	800629c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800629a:	2302      	movs	r3, #2
  }
}
 800629c:	4618      	mov	r0, r3
 800629e:	3728      	adds	r7, #40	; 0x28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	00010004 	.word	0x00010004

080062a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	4608      	mov	r0, r1
 80062b2:	4611      	mov	r1, r2
 80062b4:	461a      	mov	r2, r3
 80062b6:	4603      	mov	r3, r0
 80062b8:	817b      	strh	r3, [r7, #10]
 80062ba:	460b      	mov	r3, r1
 80062bc:	813b      	strh	r3, [r7, #8]
 80062be:	4613      	mov	r3, r2
 80062c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	2200      	movs	r2, #0
 80062da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 f960 	bl	80065a4 <I2C_WaitOnFlagUntilTimeout>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00d      	beq.n	8006306 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f8:	d103      	bne.n	8006302 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006300:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e05f      	b.n	80063c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006306:	897b      	ldrh	r3, [r7, #10]
 8006308:	b2db      	uxtb	r3, r3
 800630a:	461a      	mov	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006314:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	6a3a      	ldr	r2, [r7, #32]
 800631a:	492d      	ldr	r1, [pc, #180]	; (80063d0 <I2C_RequestMemoryWrite+0x128>)
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 f9bb 	bl	8006698 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d001      	beq.n	800632c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e04c      	b.n	80063c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800632c:	2300      	movs	r3, #0
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006344:	6a39      	ldr	r1, [r7, #32]
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 fa46 	bl	80067d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00d      	beq.n	800636e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	2b04      	cmp	r3, #4
 8006358:	d107      	bne.n	800636a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006368:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e02b      	b.n	80063c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d105      	bne.n	8006380 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006374:	893b      	ldrh	r3, [r7, #8]
 8006376:	b2da      	uxtb	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	611a      	str	r2, [r3, #16]
 800637e:	e021      	b.n	80063c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006380:	893b      	ldrh	r3, [r7, #8]
 8006382:	0a1b      	lsrs	r3, r3, #8
 8006384:	b29b      	uxth	r3, r3
 8006386:	b2da      	uxtb	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800638e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006390:	6a39      	ldr	r1, [r7, #32]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 fa20 	bl	80067d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00d      	beq.n	80063ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d107      	bne.n	80063b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e005      	b.n	80063c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063ba:	893b      	ldrh	r3, [r7, #8]
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	00010002 	.word	0x00010002

080063d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af02      	add	r7, sp, #8
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	4608      	mov	r0, r1
 80063de:	4611      	mov	r1, r2
 80063e0:	461a      	mov	r2, r3
 80063e2:	4603      	mov	r3, r0
 80063e4:	817b      	strh	r3, [r7, #10]
 80063e6:	460b      	mov	r3, r1
 80063e8:	813b      	strh	r3, [r7, #8]
 80063ea:	4613      	mov	r3, r2
 80063ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800640c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	2200      	movs	r2, #0
 8006416:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 f8c2 	bl	80065a4 <I2C_WaitOnFlagUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00d      	beq.n	8006442 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006434:	d103      	bne.n	800643e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800643c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e0aa      	b.n	8006598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006442:	897b      	ldrh	r3, [r7, #10]
 8006444:	b2db      	uxtb	r3, r3
 8006446:	461a      	mov	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006450:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	6a3a      	ldr	r2, [r7, #32]
 8006456:	4952      	ldr	r1, [pc, #328]	; (80065a0 <I2C_RequestMemoryRead+0x1cc>)
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f91d 	bl	8006698 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e097      	b.n	8006598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006468:	2300      	movs	r3, #0
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800647e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006480:	6a39      	ldr	r1, [r7, #32]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 f9a8 	bl	80067d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00d      	beq.n	80064aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	2b04      	cmp	r3, #4
 8006494:	d107      	bne.n	80064a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e076      	b.n	8006598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064aa:	88fb      	ldrh	r3, [r7, #6]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d105      	bne.n	80064bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064b0:	893b      	ldrh	r3, [r7, #8]
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	611a      	str	r2, [r3, #16]
 80064ba:	e021      	b.n	8006500 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064bc:	893b      	ldrh	r3, [r7, #8]
 80064be:	0a1b      	lsrs	r3, r3, #8
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064cc:	6a39      	ldr	r1, [r7, #32]
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f982 	bl	80067d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00d      	beq.n	80064f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d107      	bne.n	80064f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e050      	b.n	8006598 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064f6:	893b      	ldrh	r3, [r7, #8]
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006502:	6a39      	ldr	r1, [r7, #32]
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 f967 	bl	80067d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00d      	beq.n	800652c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006514:	2b04      	cmp	r3, #4
 8006516:	d107      	bne.n	8006528 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006526:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e035      	b.n	8006598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800653a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	2200      	movs	r2, #0
 8006544:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 f82b 	bl	80065a4 <I2C_WaitOnFlagUntilTimeout>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00d      	beq.n	8006570 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006562:	d103      	bne.n	800656c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800656a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e013      	b.n	8006598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006570:	897b      	ldrh	r3, [r7, #10]
 8006572:	b2db      	uxtb	r3, r3
 8006574:	f043 0301 	orr.w	r3, r3, #1
 8006578:	b2da      	uxtb	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	6a3a      	ldr	r2, [r7, #32]
 8006584:	4906      	ldr	r1, [pc, #24]	; (80065a0 <I2C_RequestMemoryRead+0x1cc>)
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 f886 	bl	8006698 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e000      	b.n	8006598 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	00010002 	.word	0x00010002

080065a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	603b      	str	r3, [r7, #0]
 80065b0:	4613      	mov	r3, r2
 80065b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065b4:	e048      	b.n	8006648 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065bc:	d044      	beq.n	8006648 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065be:	f7fc fa75 	bl	8002aac <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d302      	bcc.n	80065d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d139      	bne.n	8006648 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	0c1b      	lsrs	r3, r3, #16
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d10d      	bne.n	80065fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	43da      	mvns	r2, r3
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	4013      	ands	r3, r2
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	bf0c      	ite	eq
 80065f0:	2301      	moveq	r3, #1
 80065f2:	2300      	movne	r3, #0
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	461a      	mov	r2, r3
 80065f8:	e00c      	b.n	8006614 <I2C_WaitOnFlagUntilTimeout+0x70>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	43da      	mvns	r2, r3
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4013      	ands	r3, r2
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	bf0c      	ite	eq
 800660c:	2301      	moveq	r3, #1
 800660e:	2300      	movne	r3, #0
 8006610:	b2db      	uxtb	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	429a      	cmp	r2, r3
 8006618:	d116      	bne.n	8006648 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2220      	movs	r2, #32
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	f043 0220 	orr.w	r2, r3, #32
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e023      	b.n	8006690 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	0c1b      	lsrs	r3, r3, #16
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b01      	cmp	r3, #1
 8006650:	d10d      	bne.n	800666e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	43da      	mvns	r2, r3
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	4013      	ands	r3, r2
 800665e:	b29b      	uxth	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	bf0c      	ite	eq
 8006664:	2301      	moveq	r3, #1
 8006666:	2300      	movne	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	e00c      	b.n	8006688 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	43da      	mvns	r2, r3
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	4013      	ands	r3, r2
 800667a:	b29b      	uxth	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	bf0c      	ite	eq
 8006680:	2301      	moveq	r3, #1
 8006682:	2300      	movne	r3, #0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	461a      	mov	r2, r3
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	429a      	cmp	r2, r3
 800668c:	d093      	beq.n	80065b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066a6:	e071      	b.n	800678c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b6:	d123      	bne.n	8006700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	f043 0204 	orr.w	r2, r3, #4
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e067      	b.n	80067d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006706:	d041      	beq.n	800678c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006708:	f7fc f9d0 	bl	8002aac <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	429a      	cmp	r2, r3
 8006716:	d302      	bcc.n	800671e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d136      	bne.n	800678c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	0c1b      	lsrs	r3, r3, #16
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b01      	cmp	r3, #1
 8006726:	d10c      	bne.n	8006742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	43da      	mvns	r2, r3
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	4013      	ands	r3, r2
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	bf14      	ite	ne
 800673a:	2301      	movne	r3, #1
 800673c:	2300      	moveq	r3, #0
 800673e:	b2db      	uxtb	r3, r3
 8006740:	e00b      	b.n	800675a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	43da      	mvns	r2, r3
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	4013      	ands	r3, r2
 800674e:	b29b      	uxth	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	bf14      	ite	ne
 8006754:	2301      	movne	r3, #1
 8006756:	2300      	moveq	r3, #0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d016      	beq.n	800678c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2220      	movs	r2, #32
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006778:	f043 0220 	orr.w	r2, r3, #32
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e021      	b.n	80067d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	0c1b      	lsrs	r3, r3, #16
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b01      	cmp	r3, #1
 8006794:	d10c      	bne.n	80067b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695b      	ldr	r3, [r3, #20]
 800679c:	43da      	mvns	r2, r3
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	4013      	ands	r3, r2
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	bf14      	ite	ne
 80067a8:	2301      	movne	r3, #1
 80067aa:	2300      	moveq	r3, #0
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	e00b      	b.n	80067c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	43da      	mvns	r2, r3
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4013      	ands	r3, r2
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	bf14      	ite	ne
 80067c2:	2301      	movne	r3, #1
 80067c4:	2300      	moveq	r3, #0
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f47f af6d 	bne.w	80066a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067e4:	e034      	b.n	8006850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f8e3 	bl	80069b2 <I2C_IsAcknowledgeFailed>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e034      	b.n	8006860 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fc:	d028      	beq.n	8006850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fe:	f7fc f955 	bl	8002aac <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	429a      	cmp	r2, r3
 800680c:	d302      	bcc.n	8006814 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d11d      	bne.n	8006850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681e:	2b80      	cmp	r3, #128	; 0x80
 8006820:	d016      	beq.n	8006850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2220      	movs	r2, #32
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683c:	f043 0220 	orr.w	r2, r3, #32
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e007      	b.n	8006860 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685a:	2b80      	cmp	r3, #128	; 0x80
 800685c:	d1c3      	bne.n	80067e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006874:	e034      	b.n	80068e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 f89b 	bl	80069b2 <I2C_IsAcknowledgeFailed>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e034      	b.n	80068f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688c:	d028      	beq.n	80068e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800688e:	f7fc f90d 	bl	8002aac <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	429a      	cmp	r2, r3
 800689c:	d302      	bcc.n	80068a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d11d      	bne.n	80068e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d016      	beq.n	80068e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	f043 0220 	orr.w	r2, r3, #32
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e007      	b.n	80068f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d1c3      	bne.n	8006876 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006904:	e049      	b.n	800699a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	f003 0310 	and.w	r3, r3, #16
 8006910:	2b10      	cmp	r3, #16
 8006912:	d119      	bne.n	8006948 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f06f 0210 	mvn.w	r2, #16
 800691c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e030      	b.n	80069aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006948:	f7fc f8b0 	bl	8002aac <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	429a      	cmp	r2, r3
 8006956:	d302      	bcc.n	800695e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d11d      	bne.n	800699a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006968:	2b40      	cmp	r3, #64	; 0x40
 800696a:	d016      	beq.n	800699a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2220      	movs	r2, #32
 8006976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	f043 0220 	orr.w	r2, r3, #32
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e007      	b.n	80069aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a4:	2b40      	cmp	r3, #64	; 0x40
 80069a6:	d1ae      	bne.n	8006906 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c8:	d11b      	bne.n	8006a02 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2220      	movs	r2, #32
 80069de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	f043 0204 	orr.w	r2, r3, #4
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e000      	b.n	8006a04 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a02:	2300      	movs	r3, #0
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e267      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d075      	beq.n	8006b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a2e:	4b88      	ldr	r3, [pc, #544]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 030c 	and.w	r3, r3, #12
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d00c      	beq.n	8006a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a3a:	4b85      	ldr	r3, [pc, #532]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a42:	2b08      	cmp	r3, #8
 8006a44:	d112      	bne.n	8006a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a46:	4b82      	ldr	r3, [pc, #520]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a52:	d10b      	bne.n	8006a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a54:	4b7e      	ldr	r3, [pc, #504]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d05b      	beq.n	8006b18 <HAL_RCC_OscConfig+0x108>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d157      	bne.n	8006b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e242      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a74:	d106      	bne.n	8006a84 <HAL_RCC_OscConfig+0x74>
 8006a76:	4b76      	ldr	r3, [pc, #472]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a75      	ldr	r2, [pc, #468]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	e01d      	b.n	8006ac0 <HAL_RCC_OscConfig+0xb0>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a8c:	d10c      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x98>
 8006a8e:	4b70      	ldr	r3, [pc, #448]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a6f      	ldr	r2, [pc, #444]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	4b6d      	ldr	r3, [pc, #436]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a6c      	ldr	r2, [pc, #432]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	e00b      	b.n	8006ac0 <HAL_RCC_OscConfig+0xb0>
 8006aa8:	4b69      	ldr	r3, [pc, #420]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a68      	ldr	r2, [pc, #416]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	4b66      	ldr	r3, [pc, #408]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a65      	ldr	r2, [pc, #404]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d013      	beq.n	8006af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac8:	f7fb fff0 	bl	8002aac <HAL_GetTick>
 8006acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ace:	e008      	b.n	8006ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ad0:	f7fb ffec 	bl	8002aac <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b64      	cmp	r3, #100	; 0x64
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e207      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ae2:	4b5b      	ldr	r3, [pc, #364]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0f0      	beq.n	8006ad0 <HAL_RCC_OscConfig+0xc0>
 8006aee:	e014      	b.n	8006b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006af0:	f7fb ffdc 	bl	8002aac <HAL_GetTick>
 8006af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006af6:	e008      	b.n	8006b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006af8:	f7fb ffd8 	bl	8002aac <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b64      	cmp	r3, #100	; 0x64
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e1f3      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b0a:	4b51      	ldr	r3, [pc, #324]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1f0      	bne.n	8006af8 <HAL_RCC_OscConfig+0xe8>
 8006b16:	e000      	b.n	8006b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d063      	beq.n	8006bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b26:	4b4a      	ldr	r3, [pc, #296]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f003 030c 	and.w	r3, r3, #12
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00b      	beq.n	8006b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b32:	4b47      	ldr	r3, [pc, #284]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b3a:	2b08      	cmp	r3, #8
 8006b3c:	d11c      	bne.n	8006b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b3e:	4b44      	ldr	r3, [pc, #272]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d116      	bne.n	8006b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b4a:	4b41      	ldr	r3, [pc, #260]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d005      	beq.n	8006b62 <HAL_RCC_OscConfig+0x152>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d001      	beq.n	8006b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e1c7      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b62:	4b3b      	ldr	r3, [pc, #236]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	4937      	ldr	r1, [pc, #220]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b76:	e03a      	b.n	8006bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d020      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b80:	4b34      	ldr	r3, [pc, #208]	; (8006c54 <HAL_RCC_OscConfig+0x244>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b86:	f7fb ff91 	bl	8002aac <HAL_GetTick>
 8006b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b8c:	e008      	b.n	8006ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b8e:	f7fb ff8d 	bl	8002aac <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e1a8      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ba0:	4b2b      	ldr	r3, [pc, #172]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d0f0      	beq.n	8006b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bac:	4b28      	ldr	r3, [pc, #160]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	4925      	ldr	r1, [pc, #148]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	600b      	str	r3, [r1, #0]
 8006bc0:	e015      	b.n	8006bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bc2:	4b24      	ldr	r3, [pc, #144]	; (8006c54 <HAL_RCC_OscConfig+0x244>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc8:	f7fb ff70 	bl	8002aac <HAL_GetTick>
 8006bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bce:	e008      	b.n	8006be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bd0:	f7fb ff6c 	bl	8002aac <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e187      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006be2:	4b1b      	ldr	r3, [pc, #108]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1f0      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0308 	and.w	r3, r3, #8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d036      	beq.n	8006c68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d016      	beq.n	8006c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c02:	4b15      	ldr	r3, [pc, #84]	; (8006c58 <HAL_RCC_OscConfig+0x248>)
 8006c04:	2201      	movs	r2, #1
 8006c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c08:	f7fb ff50 	bl	8002aac <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c10:	f7fb ff4c 	bl	8002aac <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e167      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c22:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0f0      	beq.n	8006c10 <HAL_RCC_OscConfig+0x200>
 8006c2e:	e01b      	b.n	8006c68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c30:	4b09      	ldr	r3, [pc, #36]	; (8006c58 <HAL_RCC_OscConfig+0x248>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c36:	f7fb ff39 	bl	8002aac <HAL_GetTick>
 8006c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c3c:	e00e      	b.n	8006c5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c3e:	f7fb ff35 	bl	8002aac <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d907      	bls.n	8006c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e150      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
 8006c50:	40023800 	.word	0x40023800
 8006c54:	42470000 	.word	0x42470000
 8006c58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c5c:	4b88      	ldr	r3, [pc, #544]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1ea      	bne.n	8006c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 8097 	beq.w	8006da4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c76:	2300      	movs	r3, #0
 8006c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c7a:	4b81      	ldr	r3, [pc, #516]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10f      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c86:	2300      	movs	r3, #0
 8006c88:	60bb      	str	r3, [r7, #8]
 8006c8a:	4b7d      	ldr	r3, [pc, #500]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	4a7c      	ldr	r2, [pc, #496]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c94:	6413      	str	r3, [r2, #64]	; 0x40
 8006c96:	4b7a      	ldr	r3, [pc, #488]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c9e:	60bb      	str	r3, [r7, #8]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ca6:	4b77      	ldr	r3, [pc, #476]	; (8006e84 <HAL_RCC_OscConfig+0x474>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d118      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cb2:	4b74      	ldr	r3, [pc, #464]	; (8006e84 <HAL_RCC_OscConfig+0x474>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a73      	ldr	r2, [pc, #460]	; (8006e84 <HAL_RCC_OscConfig+0x474>)
 8006cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cbe:	f7fb fef5 	bl	8002aac <HAL_GetTick>
 8006cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cc4:	e008      	b.n	8006cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cc6:	f7fb fef1 	bl	8002aac <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d901      	bls.n	8006cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e10c      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cd8:	4b6a      	ldr	r3, [pc, #424]	; (8006e84 <HAL_RCC_OscConfig+0x474>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d0f0      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d106      	bne.n	8006cfa <HAL_RCC_OscConfig+0x2ea>
 8006cec:	4b64      	ldr	r3, [pc, #400]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf0:	4a63      	ldr	r2, [pc, #396]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006cf2:	f043 0301 	orr.w	r3, r3, #1
 8006cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8006cf8:	e01c      	b.n	8006d34 <HAL_RCC_OscConfig+0x324>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	2b05      	cmp	r3, #5
 8006d00:	d10c      	bne.n	8006d1c <HAL_RCC_OscConfig+0x30c>
 8006d02:	4b5f      	ldr	r3, [pc, #380]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d06:	4a5e      	ldr	r2, [pc, #376]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d08:	f043 0304 	orr.w	r3, r3, #4
 8006d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d0e:	4b5c      	ldr	r3, [pc, #368]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d12:	4a5b      	ldr	r2, [pc, #364]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d14:	f043 0301 	orr.w	r3, r3, #1
 8006d18:	6713      	str	r3, [r2, #112]	; 0x70
 8006d1a:	e00b      	b.n	8006d34 <HAL_RCC_OscConfig+0x324>
 8006d1c:	4b58      	ldr	r3, [pc, #352]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d20:	4a57      	ldr	r2, [pc, #348]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d22:	f023 0301 	bic.w	r3, r3, #1
 8006d26:	6713      	str	r3, [r2, #112]	; 0x70
 8006d28:	4b55      	ldr	r3, [pc, #340]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2c:	4a54      	ldr	r2, [pc, #336]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d2e:	f023 0304 	bic.w	r3, r3, #4
 8006d32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d015      	beq.n	8006d68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d3c:	f7fb feb6 	bl	8002aac <HAL_GetTick>
 8006d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d42:	e00a      	b.n	8006d5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d44:	f7fb feb2 	bl	8002aac <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e0cb      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d5a:	4b49      	ldr	r3, [pc, #292]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d0ee      	beq.n	8006d44 <HAL_RCC_OscConfig+0x334>
 8006d66:	e014      	b.n	8006d92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d68:	f7fb fea0 	bl	8002aac <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d6e:	e00a      	b.n	8006d86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d70:	f7fb fe9c 	bl	8002aac <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e0b5      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d86:	4b3e      	ldr	r3, [pc, #248]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1ee      	bne.n	8006d70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d105      	bne.n	8006da4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d98:	4b39      	ldr	r3, [pc, #228]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9c:	4a38      	ldr	r2, [pc, #224]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006da2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 80a1 	beq.w	8006ef0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006dae:	4b34      	ldr	r3, [pc, #208]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 030c 	and.w	r3, r3, #12
 8006db6:	2b08      	cmp	r3, #8
 8006db8:	d05c      	beq.n	8006e74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d141      	bne.n	8006e46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dc2:	4b31      	ldr	r3, [pc, #196]	; (8006e88 <HAL_RCC_OscConfig+0x478>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc8:	f7fb fe70 	bl	8002aac <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dd0:	f7fb fe6c 	bl	8002aac <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e087      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006de2:	4b27      	ldr	r3, [pc, #156]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f0      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	69da      	ldr	r2, [r3, #28]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	019b      	lsls	r3, r3, #6
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e04:	085b      	lsrs	r3, r3, #1
 8006e06:	3b01      	subs	r3, #1
 8006e08:	041b      	lsls	r3, r3, #16
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	061b      	lsls	r3, r3, #24
 8006e12:	491b      	ldr	r1, [pc, #108]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e18:	4b1b      	ldr	r3, [pc, #108]	; (8006e88 <HAL_RCC_OscConfig+0x478>)
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e1e:	f7fb fe45 	bl	8002aac <HAL_GetTick>
 8006e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e24:	e008      	b.n	8006e38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e26:	f7fb fe41 	bl	8002aac <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e05c      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e38:	4b11      	ldr	r3, [pc, #68]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0f0      	beq.n	8006e26 <HAL_RCC_OscConfig+0x416>
 8006e44:	e054      	b.n	8006ef0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e46:	4b10      	ldr	r3, [pc, #64]	; (8006e88 <HAL_RCC_OscConfig+0x478>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e4c:	f7fb fe2e 	bl	8002aac <HAL_GetTick>
 8006e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e52:	e008      	b.n	8006e66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e54:	f7fb fe2a 	bl	8002aac <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e045      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e66:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1f0      	bne.n	8006e54 <HAL_RCC_OscConfig+0x444>
 8006e72:	e03d      	b.n	8006ef0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d107      	bne.n	8006e8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e038      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
 8006e80:	40023800 	.word	0x40023800
 8006e84:	40007000 	.word	0x40007000
 8006e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e8c:	4b1b      	ldr	r3, [pc, #108]	; (8006efc <HAL_RCC_OscConfig+0x4ec>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d028      	beq.n	8006eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d121      	bne.n	8006eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d11a      	bne.n	8006eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d111      	bne.n	8006eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed2:	085b      	lsrs	r3, r3, #1
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d107      	bne.n	8006eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d001      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e000      	b.n	8006ef2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	40023800 	.word	0x40023800

08006f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e0cc      	b.n	80070ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f14:	4b68      	ldr	r3, [pc, #416]	; (80070b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d90c      	bls.n	8006f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f22:	4b65      	ldr	r3, [pc, #404]	; (80070b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	b2d2      	uxtb	r2, r2
 8006f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f2a:	4b63      	ldr	r3, [pc, #396]	; (80070b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0307 	and.w	r3, r3, #7
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d001      	beq.n	8006f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e0b8      	b.n	80070ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d020      	beq.n	8006f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f54:	4b59      	ldr	r3, [pc, #356]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	4a58      	ldr	r2, [pc, #352]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 8006f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0308 	and.w	r3, r3, #8
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f6c:	4b53      	ldr	r3, [pc, #332]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	4a52      	ldr	r2, [pc, #328]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 8006f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f78:	4b50      	ldr	r3, [pc, #320]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	494d      	ldr	r1, [pc, #308]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d044      	beq.n	8007020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d107      	bne.n	8006fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f9e:	4b47      	ldr	r3, [pc, #284]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d119      	bne.n	8006fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e07f      	b.n	80070ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d003      	beq.n	8006fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d107      	bne.n	8006fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fbe:	4b3f      	ldr	r3, [pc, #252]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d109      	bne.n	8006fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e06f      	b.n	80070ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fce:	4b3b      	ldr	r3, [pc, #236]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e067      	b.n	80070ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fde:	4b37      	ldr	r3, [pc, #220]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f023 0203 	bic.w	r2, r3, #3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	4934      	ldr	r1, [pc, #208]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ff0:	f7fb fd5c 	bl	8002aac <HAL_GetTick>
 8006ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ff6:	e00a      	b.n	800700e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ff8:	f7fb fd58 	bl	8002aac <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	f241 3288 	movw	r2, #5000	; 0x1388
 8007006:	4293      	cmp	r3, r2
 8007008:	d901      	bls.n	800700e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e04f      	b.n	80070ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800700e:	4b2b      	ldr	r3, [pc, #172]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f003 020c 	and.w	r2, r3, #12
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	429a      	cmp	r2, r3
 800701e:	d1eb      	bne.n	8006ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007020:	4b25      	ldr	r3, [pc, #148]	; (80070b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d20c      	bcs.n	8007048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800702e:	4b22      	ldr	r3, [pc, #136]	; (80070b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007036:	4b20      	ldr	r3, [pc, #128]	; (80070b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d001      	beq.n	8007048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e032      	b.n	80070ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0304 	and.w	r3, r3, #4
 8007050:	2b00      	cmp	r3, #0
 8007052:	d008      	beq.n	8007066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007054:	4b19      	ldr	r3, [pc, #100]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	4916      	ldr	r1, [pc, #88]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 8007062:	4313      	orrs	r3, r2
 8007064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	2b00      	cmp	r3, #0
 8007070:	d009      	beq.n	8007086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007072:	4b12      	ldr	r3, [pc, #72]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	490e      	ldr	r1, [pc, #56]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 8007082:	4313      	orrs	r3, r2
 8007084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007086:	f000 f821 	bl	80070cc <HAL_RCC_GetSysClockFreq>
 800708a:	4602      	mov	r2, r0
 800708c:	4b0b      	ldr	r3, [pc, #44]	; (80070bc <HAL_RCC_ClockConfig+0x1bc>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	091b      	lsrs	r3, r3, #4
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	490a      	ldr	r1, [pc, #40]	; (80070c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007098:	5ccb      	ldrb	r3, [r1, r3]
 800709a:	fa22 f303 	lsr.w	r3, r2, r3
 800709e:	4a09      	ldr	r2, [pc, #36]	; (80070c4 <HAL_RCC_ClockConfig+0x1c4>)
 80070a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070a2:	4b09      	ldr	r3, [pc, #36]	; (80070c8 <HAL_RCC_ClockConfig+0x1c8>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fb fcbc 	bl	8002a24 <HAL_InitTick>

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	40023c00 	.word	0x40023c00
 80070bc:	40023800 	.word	0x40023800
 80070c0:	08013bcc 	.word	0x08013bcc
 80070c4:	20000014 	.word	0x20000014
 80070c8:	20000018 	.word	0x20000018

080070cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070d0:	b094      	sub	sp, #80	; 0x50
 80070d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	647b      	str	r3, [r7, #68]	; 0x44
 80070d8:	2300      	movs	r3, #0
 80070da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070dc:	2300      	movs	r3, #0
 80070de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070e4:	4b79      	ldr	r3, [pc, #484]	; (80072cc <HAL_RCC_GetSysClockFreq+0x200>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f003 030c 	and.w	r3, r3, #12
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d00d      	beq.n	800710c <HAL_RCC_GetSysClockFreq+0x40>
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	f200 80e1 	bhi.w	80072b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <HAL_RCC_GetSysClockFreq+0x34>
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d003      	beq.n	8007106 <HAL_RCC_GetSysClockFreq+0x3a>
 80070fe:	e0db      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007100:	4b73      	ldr	r3, [pc, #460]	; (80072d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007102:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007104:	e0db      	b.n	80072be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007106:	4b73      	ldr	r3, [pc, #460]	; (80072d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007108:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800710a:	e0d8      	b.n	80072be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800710c:	4b6f      	ldr	r3, [pc, #444]	; (80072cc <HAL_RCC_GetSysClockFreq+0x200>)
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007114:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007116:	4b6d      	ldr	r3, [pc, #436]	; (80072cc <HAL_RCC_GetSysClockFreq+0x200>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d063      	beq.n	80071ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007122:	4b6a      	ldr	r3, [pc, #424]	; (80072cc <HAL_RCC_GetSysClockFreq+0x200>)
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	099b      	lsrs	r3, r3, #6
 8007128:	2200      	movs	r2, #0
 800712a:	63bb      	str	r3, [r7, #56]	; 0x38
 800712c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800712e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007134:	633b      	str	r3, [r7, #48]	; 0x30
 8007136:	2300      	movs	r3, #0
 8007138:	637b      	str	r3, [r7, #52]	; 0x34
 800713a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800713e:	4622      	mov	r2, r4
 8007140:	462b      	mov	r3, r5
 8007142:	f04f 0000 	mov.w	r0, #0
 8007146:	f04f 0100 	mov.w	r1, #0
 800714a:	0159      	lsls	r1, r3, #5
 800714c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007150:	0150      	lsls	r0, r2, #5
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4621      	mov	r1, r4
 8007158:	1a51      	subs	r1, r2, r1
 800715a:	6139      	str	r1, [r7, #16]
 800715c:	4629      	mov	r1, r5
 800715e:	eb63 0301 	sbc.w	r3, r3, r1
 8007162:	617b      	str	r3, [r7, #20]
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	f04f 0300 	mov.w	r3, #0
 800716c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007170:	4659      	mov	r1, fp
 8007172:	018b      	lsls	r3, r1, #6
 8007174:	4651      	mov	r1, sl
 8007176:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800717a:	4651      	mov	r1, sl
 800717c:	018a      	lsls	r2, r1, #6
 800717e:	4651      	mov	r1, sl
 8007180:	ebb2 0801 	subs.w	r8, r2, r1
 8007184:	4659      	mov	r1, fp
 8007186:	eb63 0901 	sbc.w	r9, r3, r1
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800719a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800719e:	4690      	mov	r8, r2
 80071a0:	4699      	mov	r9, r3
 80071a2:	4623      	mov	r3, r4
 80071a4:	eb18 0303 	adds.w	r3, r8, r3
 80071a8:	60bb      	str	r3, [r7, #8]
 80071aa:	462b      	mov	r3, r5
 80071ac:	eb49 0303 	adc.w	r3, r9, r3
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	f04f 0200 	mov.w	r2, #0
 80071b6:	f04f 0300 	mov.w	r3, #0
 80071ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80071be:	4629      	mov	r1, r5
 80071c0:	024b      	lsls	r3, r1, #9
 80071c2:	4621      	mov	r1, r4
 80071c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80071c8:	4621      	mov	r1, r4
 80071ca:	024a      	lsls	r2, r1, #9
 80071cc:	4610      	mov	r0, r2
 80071ce:	4619      	mov	r1, r3
 80071d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d2:	2200      	movs	r2, #0
 80071d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80071d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071dc:	f7f9 fd54 	bl	8000c88 <__aeabi_uldivmod>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4613      	mov	r3, r2
 80071e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071e8:	e058      	b.n	800729c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071ea:	4b38      	ldr	r3, [pc, #224]	; (80072cc <HAL_RCC_GetSysClockFreq+0x200>)
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	099b      	lsrs	r3, r3, #6
 80071f0:	2200      	movs	r2, #0
 80071f2:	4618      	mov	r0, r3
 80071f4:	4611      	mov	r1, r2
 80071f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80071fa:	623b      	str	r3, [r7, #32]
 80071fc:	2300      	movs	r3, #0
 80071fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007200:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007204:	4642      	mov	r2, r8
 8007206:	464b      	mov	r3, r9
 8007208:	f04f 0000 	mov.w	r0, #0
 800720c:	f04f 0100 	mov.w	r1, #0
 8007210:	0159      	lsls	r1, r3, #5
 8007212:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007216:	0150      	lsls	r0, r2, #5
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	4641      	mov	r1, r8
 800721e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007222:	4649      	mov	r1, r9
 8007224:	eb63 0b01 	sbc.w	fp, r3, r1
 8007228:	f04f 0200 	mov.w	r2, #0
 800722c:	f04f 0300 	mov.w	r3, #0
 8007230:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007234:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007238:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800723c:	ebb2 040a 	subs.w	r4, r2, sl
 8007240:	eb63 050b 	sbc.w	r5, r3, fp
 8007244:	f04f 0200 	mov.w	r2, #0
 8007248:	f04f 0300 	mov.w	r3, #0
 800724c:	00eb      	lsls	r3, r5, #3
 800724e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007252:	00e2      	lsls	r2, r4, #3
 8007254:	4614      	mov	r4, r2
 8007256:	461d      	mov	r5, r3
 8007258:	4643      	mov	r3, r8
 800725a:	18e3      	adds	r3, r4, r3
 800725c:	603b      	str	r3, [r7, #0]
 800725e:	464b      	mov	r3, r9
 8007260:	eb45 0303 	adc.w	r3, r5, r3
 8007264:	607b      	str	r3, [r7, #4]
 8007266:	f04f 0200 	mov.w	r2, #0
 800726a:	f04f 0300 	mov.w	r3, #0
 800726e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007272:	4629      	mov	r1, r5
 8007274:	028b      	lsls	r3, r1, #10
 8007276:	4621      	mov	r1, r4
 8007278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800727c:	4621      	mov	r1, r4
 800727e:	028a      	lsls	r2, r1, #10
 8007280:	4610      	mov	r0, r2
 8007282:	4619      	mov	r1, r3
 8007284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007286:	2200      	movs	r2, #0
 8007288:	61bb      	str	r3, [r7, #24]
 800728a:	61fa      	str	r2, [r7, #28]
 800728c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007290:	f7f9 fcfa 	bl	8000c88 <__aeabi_uldivmod>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	4613      	mov	r3, r2
 800729a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800729c:	4b0b      	ldr	r3, [pc, #44]	; (80072cc <HAL_RCC_GetSysClockFreq+0x200>)
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	0c1b      	lsrs	r3, r3, #16
 80072a2:	f003 0303 	and.w	r3, r3, #3
 80072a6:	3301      	adds	r3, #1
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80072ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80072b6:	e002      	b.n	80072be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072b8:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80072ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80072bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3750      	adds	r7, #80	; 0x50
 80072c4:	46bd      	mov	sp, r7
 80072c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072ca:	bf00      	nop
 80072cc:	40023800 	.word	0x40023800
 80072d0:	00f42400 	.word	0x00f42400
 80072d4:	007a1200 	.word	0x007a1200

080072d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072d8:	b480      	push	{r7}
 80072da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072dc:	4b03      	ldr	r3, [pc, #12]	; (80072ec <HAL_RCC_GetHCLKFreq+0x14>)
 80072de:	681b      	ldr	r3, [r3, #0]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000014 	.word	0x20000014

080072f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80072f4:	f7ff fff0 	bl	80072d8 <HAL_RCC_GetHCLKFreq>
 80072f8:	4602      	mov	r2, r0
 80072fa:	4b05      	ldr	r3, [pc, #20]	; (8007310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	0a9b      	lsrs	r3, r3, #10
 8007300:	f003 0307 	and.w	r3, r3, #7
 8007304:	4903      	ldr	r1, [pc, #12]	; (8007314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007306:	5ccb      	ldrb	r3, [r1, r3]
 8007308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800730c:	4618      	mov	r0, r3
 800730e:	bd80      	pop	{r7, pc}
 8007310:	40023800 	.word	0x40023800
 8007314:	08013bdc 	.word	0x08013bdc

08007318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800731c:	f7ff ffdc 	bl	80072d8 <HAL_RCC_GetHCLKFreq>
 8007320:	4602      	mov	r2, r0
 8007322:	4b05      	ldr	r3, [pc, #20]	; (8007338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	0b5b      	lsrs	r3, r3, #13
 8007328:	f003 0307 	and.w	r3, r3, #7
 800732c:	4903      	ldr	r1, [pc, #12]	; (800733c <HAL_RCC_GetPCLK2Freq+0x24>)
 800732e:	5ccb      	ldrb	r3, [r1, r3]
 8007330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007334:	4618      	mov	r0, r3
 8007336:	bd80      	pop	{r7, pc}
 8007338:	40023800 	.word	0x40023800
 800733c:	08013bdc 	.word	0x08013bdc

08007340 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e07b      	b.n	800744a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007356:	2b00      	cmp	r3, #0
 8007358:	d108      	bne.n	800736c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007362:	d009      	beq.n	8007378 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	61da      	str	r2, [r3, #28]
 800736a:	e005      	b.n	8007378 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d106      	bne.n	8007398 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7fa fff4 	bl	8002380 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2202      	movs	r2, #2
 800739c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073ca:	431a      	orrs	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	431a      	orrs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073fc:	ea42 0103 	orr.w	r1, r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007404:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	0c1b      	lsrs	r3, r3, #16
 8007416:	f003 0104 	and.w	r1, r3, #4
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741e:	f003 0210 	and.w	r2, r3, #16
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69da      	ldr	r2, [r3, #28]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007438:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b082      	sub	sp, #8
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e041      	b.n	80074e8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d106      	bne.n	800747e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7fa ffc9 	bl	8002410 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2202      	movs	r2, #2
 8007482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	3304      	adds	r3, #4
 800748e:	4619      	mov	r1, r3
 8007490:	4610      	mov	r0, r2
 8007492:	f000 fad9 	bl	8007a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e041      	b.n	8007586 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d106      	bne.n	800751c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f839 	bl	800758e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3304      	adds	r3, #4
 800752c:	4619      	mov	r1, r3
 800752e:	4610      	mov	r0, r2
 8007530:	f000 fa8a 	bl	8007a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800758e:	b480      	push	{r7}
 8007590:	b083      	sub	sp, #12
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
	...

080075a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d109      	bne.n	80075c8 <HAL_TIM_PWM_Start+0x24>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b01      	cmp	r3, #1
 80075be:	bf14      	ite	ne
 80075c0:	2301      	movne	r3, #1
 80075c2:	2300      	moveq	r3, #0
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	e022      	b.n	800760e <HAL_TIM_PWM_Start+0x6a>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d109      	bne.n	80075e2 <HAL_TIM_PWM_Start+0x3e>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	bf14      	ite	ne
 80075da:	2301      	movne	r3, #1
 80075dc:	2300      	moveq	r3, #0
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	e015      	b.n	800760e <HAL_TIM_PWM_Start+0x6a>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d109      	bne.n	80075fc <HAL_TIM_PWM_Start+0x58>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	bf14      	ite	ne
 80075f4:	2301      	movne	r3, #1
 80075f6:	2300      	moveq	r3, #0
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	e008      	b.n	800760e <HAL_TIM_PWM_Start+0x6a>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b01      	cmp	r3, #1
 8007606:	bf14      	ite	ne
 8007608:	2301      	movne	r3, #1
 800760a:	2300      	moveq	r3, #0
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e07c      	b.n	8007710 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d104      	bne.n	8007626 <HAL_TIM_PWM_Start+0x82>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007624:	e013      	b.n	800764e <HAL_TIM_PWM_Start+0xaa>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b04      	cmp	r3, #4
 800762a:	d104      	bne.n	8007636 <HAL_TIM_PWM_Start+0x92>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007634:	e00b      	b.n	800764e <HAL_TIM_PWM_Start+0xaa>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b08      	cmp	r3, #8
 800763a:	d104      	bne.n	8007646 <HAL_TIM_PWM_Start+0xa2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007644:	e003      	b.n	800764e <HAL_TIM_PWM_Start+0xaa>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2202      	movs	r2, #2
 800764a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2201      	movs	r2, #1
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fcec 	bl	8008034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a2d      	ldr	r2, [pc, #180]	; (8007718 <HAL_TIM_PWM_Start+0x174>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d004      	beq.n	8007670 <HAL_TIM_PWM_Start+0xcc>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a2c      	ldr	r2, [pc, #176]	; (800771c <HAL_TIM_PWM_Start+0x178>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d101      	bne.n	8007674 <HAL_TIM_PWM_Start+0xd0>
 8007670:	2301      	movs	r3, #1
 8007672:	e000      	b.n	8007676 <HAL_TIM_PWM_Start+0xd2>
 8007674:	2300      	movs	r3, #0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d007      	beq.n	800768a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007688:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a22      	ldr	r2, [pc, #136]	; (8007718 <HAL_TIM_PWM_Start+0x174>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d022      	beq.n	80076da <HAL_TIM_PWM_Start+0x136>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769c:	d01d      	beq.n	80076da <HAL_TIM_PWM_Start+0x136>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a1f      	ldr	r2, [pc, #124]	; (8007720 <HAL_TIM_PWM_Start+0x17c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d018      	beq.n	80076da <HAL_TIM_PWM_Start+0x136>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a1d      	ldr	r2, [pc, #116]	; (8007724 <HAL_TIM_PWM_Start+0x180>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d013      	beq.n	80076da <HAL_TIM_PWM_Start+0x136>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a1c      	ldr	r2, [pc, #112]	; (8007728 <HAL_TIM_PWM_Start+0x184>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d00e      	beq.n	80076da <HAL_TIM_PWM_Start+0x136>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a16      	ldr	r2, [pc, #88]	; (800771c <HAL_TIM_PWM_Start+0x178>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d009      	beq.n	80076da <HAL_TIM_PWM_Start+0x136>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a18      	ldr	r2, [pc, #96]	; (800772c <HAL_TIM_PWM_Start+0x188>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d004      	beq.n	80076da <HAL_TIM_PWM_Start+0x136>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a16      	ldr	r2, [pc, #88]	; (8007730 <HAL_TIM_PWM_Start+0x18c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d111      	bne.n	80076fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f003 0307 	and.w	r3, r3, #7
 80076e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b06      	cmp	r3, #6
 80076ea:	d010      	beq.n	800770e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0201 	orr.w	r2, r2, #1
 80076fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076fc:	e007      	b.n	800770e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f042 0201 	orr.w	r2, r2, #1
 800770c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	40010000 	.word	0x40010000
 800771c:	40010400 	.word	0x40010400
 8007720:	40000400 	.word	0x40000400
 8007724:	40000800 	.word	0x40000800
 8007728:	40000c00 	.word	0x40000c00
 800772c:	40014000 	.word	0x40014000
 8007730:	40001800 	.word	0x40001800

08007734 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800774a:	2b01      	cmp	r3, #1
 800774c:	d101      	bne.n	8007752 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800774e:	2302      	movs	r3, #2
 8007750:	e0ae      	b.n	80078b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2201      	movs	r2, #1
 8007756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b0c      	cmp	r3, #12
 800775e:	f200 809f 	bhi.w	80078a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007762:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007768:	0800779d 	.word	0x0800779d
 800776c:	080078a1 	.word	0x080078a1
 8007770:	080078a1 	.word	0x080078a1
 8007774:	080078a1 	.word	0x080078a1
 8007778:	080077dd 	.word	0x080077dd
 800777c:	080078a1 	.word	0x080078a1
 8007780:	080078a1 	.word	0x080078a1
 8007784:	080078a1 	.word	0x080078a1
 8007788:	0800781f 	.word	0x0800781f
 800778c:	080078a1 	.word	0x080078a1
 8007790:	080078a1 	.word	0x080078a1
 8007794:	080078a1 	.word	0x080078a1
 8007798:	0800785f 	.word	0x0800785f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68b9      	ldr	r1, [r7, #8]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 f9fc 	bl	8007ba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	699a      	ldr	r2, [r3, #24]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0208 	orr.w	r2, r2, #8
 80077b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699a      	ldr	r2, [r3, #24]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 0204 	bic.w	r2, r2, #4
 80077c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6999      	ldr	r1, [r3, #24]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	691a      	ldr	r2, [r3, #16]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	619a      	str	r2, [r3, #24]
      break;
 80077da:	e064      	b.n	80078a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68b9      	ldr	r1, [r7, #8]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 fa4c 	bl	8007c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	699a      	ldr	r2, [r3, #24]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6999      	ldr	r1, [r3, #24]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	021a      	lsls	r2, r3, #8
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	619a      	str	r2, [r3, #24]
      break;
 800781c:	e043      	b.n	80078a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68b9      	ldr	r1, [r7, #8]
 8007824:	4618      	mov	r0, r3
 8007826:	f000 faa1 	bl	8007d6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69da      	ldr	r2, [r3, #28]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f042 0208 	orr.w	r2, r2, #8
 8007838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	69da      	ldr	r2, [r3, #28]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0204 	bic.w	r2, r2, #4
 8007848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69d9      	ldr	r1, [r3, #28]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	691a      	ldr	r2, [r3, #16]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	430a      	orrs	r2, r1
 800785a:	61da      	str	r2, [r3, #28]
      break;
 800785c:	e023      	b.n	80078a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68b9      	ldr	r1, [r7, #8]
 8007864:	4618      	mov	r0, r3
 8007866:	f000 faf5 	bl	8007e54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69da      	ldr	r2, [r3, #28]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69da      	ldr	r2, [r3, #28]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	69d9      	ldr	r1, [r3, #28]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	021a      	lsls	r2, r3, #8
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	61da      	str	r2, [r3, #28]
      break;
 800789e:	e002      	b.n	80078a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	75fb      	strb	r3, [r7, #23]
      break;
 80078a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d101      	bne.n	80078d4 <HAL_TIM_ConfigClockSource+0x1c>
 80078d0:	2302      	movs	r3, #2
 80078d2:	e0b4      	b.n	8007a3e <HAL_TIM_ConfigClockSource+0x186>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80078f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800790c:	d03e      	beq.n	800798c <HAL_TIM_ConfigClockSource+0xd4>
 800790e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007912:	f200 8087 	bhi.w	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
 8007916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800791a:	f000 8086 	beq.w	8007a2a <HAL_TIM_ConfigClockSource+0x172>
 800791e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007922:	d87f      	bhi.n	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
 8007924:	2b70      	cmp	r3, #112	; 0x70
 8007926:	d01a      	beq.n	800795e <HAL_TIM_ConfigClockSource+0xa6>
 8007928:	2b70      	cmp	r3, #112	; 0x70
 800792a:	d87b      	bhi.n	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
 800792c:	2b60      	cmp	r3, #96	; 0x60
 800792e:	d050      	beq.n	80079d2 <HAL_TIM_ConfigClockSource+0x11a>
 8007930:	2b60      	cmp	r3, #96	; 0x60
 8007932:	d877      	bhi.n	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
 8007934:	2b50      	cmp	r3, #80	; 0x50
 8007936:	d03c      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0xfa>
 8007938:	2b50      	cmp	r3, #80	; 0x50
 800793a:	d873      	bhi.n	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
 800793c:	2b40      	cmp	r3, #64	; 0x40
 800793e:	d058      	beq.n	80079f2 <HAL_TIM_ConfigClockSource+0x13a>
 8007940:	2b40      	cmp	r3, #64	; 0x40
 8007942:	d86f      	bhi.n	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
 8007944:	2b30      	cmp	r3, #48	; 0x30
 8007946:	d064      	beq.n	8007a12 <HAL_TIM_ConfigClockSource+0x15a>
 8007948:	2b30      	cmp	r3, #48	; 0x30
 800794a:	d86b      	bhi.n	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
 800794c:	2b20      	cmp	r3, #32
 800794e:	d060      	beq.n	8007a12 <HAL_TIM_ConfigClockSource+0x15a>
 8007950:	2b20      	cmp	r3, #32
 8007952:	d867      	bhi.n	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
 8007954:	2b00      	cmp	r3, #0
 8007956:	d05c      	beq.n	8007a12 <HAL_TIM_ConfigClockSource+0x15a>
 8007958:	2b10      	cmp	r3, #16
 800795a:	d05a      	beq.n	8007a12 <HAL_TIM_ConfigClockSource+0x15a>
 800795c:	e062      	b.n	8007a24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800796e:	f000 fb41 	bl	8007ff4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007980:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	609a      	str	r2, [r3, #8]
      break;
 800798a:	e04f      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800799c:	f000 fb2a 	bl	8007ff4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689a      	ldr	r2, [r3, #8]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079ae:	609a      	str	r2, [r3, #8]
      break;
 80079b0:	e03c      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079be:	461a      	mov	r2, r3
 80079c0:	f000 fa9e 	bl	8007f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2150      	movs	r1, #80	; 0x50
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 faf7 	bl	8007fbe <TIM_ITRx_SetConfig>
      break;
 80079d0:	e02c      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079de:	461a      	mov	r2, r3
 80079e0:	f000 fabd 	bl	8007f5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2160      	movs	r1, #96	; 0x60
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 fae7 	bl	8007fbe <TIM_ITRx_SetConfig>
      break;
 80079f0:	e01c      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079fe:	461a      	mov	r2, r3
 8007a00:	f000 fa7e 	bl	8007f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2140      	movs	r1, #64	; 0x40
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fad7 	bl	8007fbe <TIM_ITRx_SetConfig>
      break;
 8007a10:	e00c      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	f000 face 	bl	8007fbe <TIM_ITRx_SetConfig>
      break;
 8007a22:	e003      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	73fb      	strb	r3, [r7, #15]
      break;
 8007a28:	e000      	b.n	8007a2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a46      	ldr	r2, [pc, #280]	; (8007b74 <TIM_Base_SetConfig+0x12c>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d013      	beq.n	8007a88 <TIM_Base_SetConfig+0x40>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a66:	d00f      	beq.n	8007a88 <TIM_Base_SetConfig+0x40>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a43      	ldr	r2, [pc, #268]	; (8007b78 <TIM_Base_SetConfig+0x130>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d00b      	beq.n	8007a88 <TIM_Base_SetConfig+0x40>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a42      	ldr	r2, [pc, #264]	; (8007b7c <TIM_Base_SetConfig+0x134>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d007      	beq.n	8007a88 <TIM_Base_SetConfig+0x40>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a41      	ldr	r2, [pc, #260]	; (8007b80 <TIM_Base_SetConfig+0x138>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d003      	beq.n	8007a88 <TIM_Base_SetConfig+0x40>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a40      	ldr	r2, [pc, #256]	; (8007b84 <TIM_Base_SetConfig+0x13c>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d108      	bne.n	8007a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a35      	ldr	r2, [pc, #212]	; (8007b74 <TIM_Base_SetConfig+0x12c>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d02b      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa8:	d027      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a32      	ldr	r2, [pc, #200]	; (8007b78 <TIM_Base_SetConfig+0x130>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d023      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a31      	ldr	r2, [pc, #196]	; (8007b7c <TIM_Base_SetConfig+0x134>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d01f      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a30      	ldr	r2, [pc, #192]	; (8007b80 <TIM_Base_SetConfig+0x138>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d01b      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a2f      	ldr	r2, [pc, #188]	; (8007b84 <TIM_Base_SetConfig+0x13c>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d017      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a2e      	ldr	r2, [pc, #184]	; (8007b88 <TIM_Base_SetConfig+0x140>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d013      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a2d      	ldr	r2, [pc, #180]	; (8007b8c <TIM_Base_SetConfig+0x144>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d00f      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a2c      	ldr	r2, [pc, #176]	; (8007b90 <TIM_Base_SetConfig+0x148>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d00b      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a2b      	ldr	r2, [pc, #172]	; (8007b94 <TIM_Base_SetConfig+0x14c>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d007      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a2a      	ldr	r2, [pc, #168]	; (8007b98 <TIM_Base_SetConfig+0x150>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d003      	beq.n	8007afa <TIM_Base_SetConfig+0xb2>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a29      	ldr	r2, [pc, #164]	; (8007b9c <TIM_Base_SetConfig+0x154>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d108      	bne.n	8007b0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a10      	ldr	r2, [pc, #64]	; (8007b74 <TIM_Base_SetConfig+0x12c>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d003      	beq.n	8007b40 <TIM_Base_SetConfig+0xf8>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a12      	ldr	r2, [pc, #72]	; (8007b84 <TIM_Base_SetConfig+0x13c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d103      	bne.n	8007b48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	691a      	ldr	r2, [r3, #16]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d105      	bne.n	8007b66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	f023 0201 	bic.w	r2, r3, #1
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	611a      	str	r2, [r3, #16]
  }
}
 8007b66:	bf00      	nop
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	40010000 	.word	0x40010000
 8007b78:	40000400 	.word	0x40000400
 8007b7c:	40000800 	.word	0x40000800
 8007b80:	40000c00 	.word	0x40000c00
 8007b84:	40010400 	.word	0x40010400
 8007b88:	40014000 	.word	0x40014000
 8007b8c:	40014400 	.word	0x40014400
 8007b90:	40014800 	.word	0x40014800
 8007b94:	40001800 	.word	0x40001800
 8007b98:	40001c00 	.word	0x40001c00
 8007b9c:	40002000 	.word	0x40002000

08007ba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	f023 0201 	bic.w	r2, r3, #1
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0303 	bic.w	r3, r3, #3
 8007bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f023 0302 	bic.w	r3, r3, #2
 8007be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a20      	ldr	r2, [pc, #128]	; (8007c78 <TIM_OC1_SetConfig+0xd8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d003      	beq.n	8007c04 <TIM_OC1_SetConfig+0x64>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a1f      	ldr	r2, [pc, #124]	; (8007c7c <TIM_OC1_SetConfig+0xdc>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d10c      	bne.n	8007c1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f023 0308 	bic.w	r3, r3, #8
 8007c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f023 0304 	bic.w	r3, r3, #4
 8007c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a15      	ldr	r2, [pc, #84]	; (8007c78 <TIM_OC1_SetConfig+0xd8>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d003      	beq.n	8007c2e <TIM_OC1_SetConfig+0x8e>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a14      	ldr	r2, [pc, #80]	; (8007c7c <TIM_OC1_SetConfig+0xdc>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d111      	bne.n	8007c52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	621a      	str	r2, [r3, #32]
}
 8007c6c:	bf00      	nop
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	40010000 	.word	0x40010000
 8007c7c:	40010400 	.word	0x40010400

08007c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	f023 0210 	bic.w	r2, r3, #16
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	f023 0320 	bic.w	r3, r3, #32
 8007cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	011b      	lsls	r3, r3, #4
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a22      	ldr	r2, [pc, #136]	; (8007d64 <TIM_OC2_SetConfig+0xe4>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d003      	beq.n	8007ce8 <TIM_OC2_SetConfig+0x68>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4a21      	ldr	r2, [pc, #132]	; (8007d68 <TIM_OC2_SetConfig+0xe8>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d10d      	bne.n	8007d04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	011b      	lsls	r3, r3, #4
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a17      	ldr	r2, [pc, #92]	; (8007d64 <TIM_OC2_SetConfig+0xe4>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d003      	beq.n	8007d14 <TIM_OC2_SetConfig+0x94>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a16      	ldr	r2, [pc, #88]	; (8007d68 <TIM_OC2_SetConfig+0xe8>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d113      	bne.n	8007d3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	693a      	ldr	r2, [r7, #16]
 8007d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	621a      	str	r2, [r3, #32]
}
 8007d56:	bf00      	nop
 8007d58:	371c      	adds	r7, #28
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	40010000 	.word	0x40010000
 8007d68:	40010400 	.word	0x40010400

08007d6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 0303 	bic.w	r3, r3, #3
 8007da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	021b      	lsls	r3, r3, #8
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a21      	ldr	r2, [pc, #132]	; (8007e4c <TIM_OC3_SetConfig+0xe0>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d003      	beq.n	8007dd2 <TIM_OC3_SetConfig+0x66>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a20      	ldr	r2, [pc, #128]	; (8007e50 <TIM_OC3_SetConfig+0xe4>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d10d      	bne.n	8007dee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	021b      	lsls	r3, r3, #8
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a16      	ldr	r2, [pc, #88]	; (8007e4c <TIM_OC3_SetConfig+0xe0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d003      	beq.n	8007dfe <TIM_OC3_SetConfig+0x92>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a15      	ldr	r2, [pc, #84]	; (8007e50 <TIM_OC3_SetConfig+0xe4>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d113      	bne.n	8007e26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	011b      	lsls	r3, r3, #4
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	011b      	lsls	r3, r3, #4
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	621a      	str	r2, [r3, #32]
}
 8007e40:	bf00      	nop
 8007e42:	371c      	adds	r7, #28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	40010000 	.word	0x40010000
 8007e50:	40010400 	.word	0x40010400

08007e54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	021b      	lsls	r3, r3, #8
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	031b      	lsls	r3, r3, #12
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a12      	ldr	r2, [pc, #72]	; (8007ef8 <TIM_OC4_SetConfig+0xa4>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d003      	beq.n	8007ebc <TIM_OC4_SetConfig+0x68>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a11      	ldr	r2, [pc, #68]	; (8007efc <TIM_OC4_SetConfig+0xa8>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d109      	bne.n	8007ed0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	019b      	lsls	r3, r3, #6
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	621a      	str	r2, [r3, #32]
}
 8007eea:	bf00      	nop
 8007eec:	371c      	adds	r7, #28
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	40010000 	.word	0x40010000
 8007efc:	40010400 	.word	0x40010400

08007f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	f023 0201 	bic.w	r2, r3, #1
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	011b      	lsls	r3, r3, #4
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f023 030a 	bic.w	r3, r3, #10
 8007f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	697a      	ldr	r2, [r7, #20]
 8007f50:	621a      	str	r2, [r3, #32]
}
 8007f52:	bf00      	nop
 8007f54:	371c      	adds	r7, #28
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b087      	sub	sp, #28
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6a1b      	ldr	r3, [r3, #32]
 8007f74:	f023 0210 	bic.w	r2, r3, #16
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	031b      	lsls	r3, r3, #12
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	011b      	lsls	r3, r3, #4
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	621a      	str	r2, [r3, #32]
}
 8007fb2:	bf00      	nop
 8007fb4:	371c      	adds	r7, #28
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	b085      	sub	sp, #20
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fd6:	683a      	ldr	r2, [r7, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	f043 0307 	orr.w	r3, r3, #7
 8007fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	609a      	str	r2, [r3, #8]
}
 8007fe8:	bf00      	nop
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b087      	sub	sp, #28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800800e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	021a      	lsls	r2, r3, #8
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	431a      	orrs	r2, r3
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4313      	orrs	r3, r2
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	4313      	orrs	r3, r2
 8008020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	609a      	str	r2, [r3, #8]
}
 8008028:	bf00      	nop
 800802a:	371c      	adds	r7, #28
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	f003 031f 	and.w	r3, r3, #31
 8008046:	2201      	movs	r2, #1
 8008048:	fa02 f303 	lsl.w	r3, r2, r3
 800804c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6a1a      	ldr	r2, [r3, #32]
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	43db      	mvns	r3, r3
 8008056:	401a      	ands	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6a1a      	ldr	r2, [r3, #32]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f003 031f 	and.w	r3, r3, #31
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	fa01 f303 	lsl.w	r3, r1, r3
 800806c:	431a      	orrs	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	621a      	str	r2, [r3, #32]
}
 8008072:	bf00      	nop
 8008074:	371c      	adds	r7, #28
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
	...

08008080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008090:	2b01      	cmp	r3, #1
 8008092:	d101      	bne.n	8008098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008094:	2302      	movs	r3, #2
 8008096:	e05a      	b.n	800814e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2202      	movs	r2, #2
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a21      	ldr	r2, [pc, #132]	; (800815c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d022      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e4:	d01d      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a1d      	ldr	r2, [pc, #116]	; (8008160 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d018      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a1b      	ldr	r2, [pc, #108]	; (8008164 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d013      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a1a      	ldr	r2, [pc, #104]	; (8008168 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d00e      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a18      	ldr	r2, [pc, #96]	; (800816c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d009      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a17      	ldr	r2, [pc, #92]	; (8008170 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d004      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a15      	ldr	r2, [pc, #84]	; (8008174 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d10c      	bne.n	800813c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	4313      	orrs	r3, r2
 8008132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	40010000 	.word	0x40010000
 8008160:	40000400 	.word	0x40000400
 8008164:	40000800 	.word	0x40000800
 8008168:	40000c00 	.word	0x40000c00
 800816c:	40010400 	.word	0x40010400
 8008170:	40014000 	.word	0x40014000
 8008174:	40001800 	.word	0x40001800

08008178 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800818c:	2b01      	cmp	r3, #1
 800818e:	d101      	bne.n	8008194 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008190:	2302      	movs	r3, #2
 8008192:	e03d      	b.n	8008210 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e042      	b.n	80082b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d106      	bne.n	8008248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7fa f940 	bl	80024c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2224      	movs	r2, #36	; 0x24
 800824c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68da      	ldr	r2, [r3, #12]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800825e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fdbd 	bl	8008de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	691a      	ldr	r2, [r3, #16]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	695a      	ldr	r2, [r3, #20]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2220      	movs	r2, #32
 80082a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b08a      	sub	sp, #40	; 0x28
 80082c0:	af02      	add	r7, sp, #8
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	603b      	str	r3, [r7, #0]
 80082c8:	4613      	mov	r3, r2
 80082ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b20      	cmp	r3, #32
 80082da:	d175      	bne.n	80083c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d002      	beq.n	80082e8 <HAL_UART_Transmit+0x2c>
 80082e2:	88fb      	ldrh	r3, [r7, #6]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e06e      	b.n	80083ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2221      	movs	r2, #33	; 0x21
 80082f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082fa:	f7fa fbd7 	bl	8002aac <HAL_GetTick>
 80082fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	88fa      	ldrh	r2, [r7, #6]
 8008304:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	88fa      	ldrh	r2, [r7, #6]
 800830a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008314:	d108      	bne.n	8008328 <HAL_UART_Transmit+0x6c>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d104      	bne.n	8008328 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800831e:	2300      	movs	r3, #0
 8008320:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	61bb      	str	r3, [r7, #24]
 8008326:	e003      	b.n	8008330 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800832c:	2300      	movs	r3, #0
 800832e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008330:	e02e      	b.n	8008390 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2200      	movs	r2, #0
 800833a:	2180      	movs	r1, #128	; 0x80
 800833c:	68f8      	ldr	r0, [r7, #12]
 800833e:	f000 fb1f 	bl	8008980 <UART_WaitOnFlagUntilTimeout>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d005      	beq.n	8008354 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2220      	movs	r2, #32
 800834c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e03a      	b.n	80083ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10b      	bne.n	8008372 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008368:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	3302      	adds	r3, #2
 800836e:	61bb      	str	r3, [r7, #24]
 8008370:	e007      	b.n	8008382 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	781a      	ldrb	r2, [r3, #0]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	3301      	adds	r3, #1
 8008380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008386:	b29b      	uxth	r3, r3
 8008388:	3b01      	subs	r3, #1
 800838a:	b29a      	uxth	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008394:	b29b      	uxth	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1cb      	bne.n	8008332 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2200      	movs	r2, #0
 80083a2:	2140      	movs	r1, #64	; 0x40
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 faeb 	bl	8008980 <UART_WaitOnFlagUntilTimeout>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d005      	beq.n	80083bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2220      	movs	r2, #32
 80083b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e006      	b.n	80083ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2220      	movs	r2, #32
 80083c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	e000      	b.n	80083ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80083c8:	2302      	movs	r3, #2
  }
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3720      	adds	r7, #32
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	4613      	mov	r3, r2
 80083de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b20      	cmp	r3, #32
 80083ea:	d112      	bne.n	8008412 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <HAL_UART_Receive_IT+0x26>
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e00b      	b.n	8008414 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008402:	88fb      	ldrh	r3, [r7, #6]
 8008404:	461a      	mov	r2, r3
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 fb12 	bl	8008a32 <UART_Start_Receive_IT>
 800840e:	4603      	mov	r3, r0
 8008410:	e000      	b.n	8008414 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008412:	2302      	movs	r3, #2
  }
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b0ba      	sub	sp, #232	; 0xe8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008442:	2300      	movs	r3, #0
 8008444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008448:	2300      	movs	r3, #0
 800844a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800844e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008452:	f003 030f 	and.w	r3, r3, #15
 8008456:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800845a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10f      	bne.n	8008482 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008466:	f003 0320 	and.w	r3, r3, #32
 800846a:	2b00      	cmp	r3, #0
 800846c:	d009      	beq.n	8008482 <HAL_UART_IRQHandler+0x66>
 800846e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008472:	f003 0320 	and.w	r3, r3, #32
 8008476:	2b00      	cmp	r3, #0
 8008478:	d003      	beq.n	8008482 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fbf2 	bl	8008c64 <UART_Receive_IT>
      return;
 8008480:	e25b      	b.n	800893a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008482:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008486:	2b00      	cmp	r3, #0
 8008488:	f000 80de 	beq.w	8008648 <HAL_UART_IRQHandler+0x22c>
 800848c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	2b00      	cmp	r3, #0
 8008496:	d106      	bne.n	80084a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800849c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 80d1 	beq.w	8008648 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80084a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00b      	beq.n	80084ca <HAL_UART_IRQHandler+0xae>
 80084b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d005      	beq.n	80084ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084c2:	f043 0201 	orr.w	r2, r3, #1
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ce:	f003 0304 	and.w	r3, r3, #4
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00b      	beq.n	80084ee <HAL_UART_IRQHandler+0xd2>
 80084d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e6:	f043 0202 	orr.w	r2, r3, #2
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f2:	f003 0302 	and.w	r3, r3, #2
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00b      	beq.n	8008512 <HAL_UART_IRQHandler+0xf6>
 80084fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	d005      	beq.n	8008512 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850a:	f043 0204 	orr.w	r2, r3, #4
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008516:	f003 0308 	and.w	r3, r3, #8
 800851a:	2b00      	cmp	r3, #0
 800851c:	d011      	beq.n	8008542 <HAL_UART_IRQHandler+0x126>
 800851e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008522:	f003 0320 	and.w	r3, r3, #32
 8008526:	2b00      	cmp	r3, #0
 8008528:	d105      	bne.n	8008536 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800852a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800853a:	f043 0208 	orr.w	r2, r3, #8
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 81f2 	beq.w	8008930 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800854c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008550:	f003 0320 	and.w	r3, r3, #32
 8008554:	2b00      	cmp	r3, #0
 8008556:	d008      	beq.n	800856a <HAL_UART_IRQHandler+0x14e>
 8008558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800855c:	f003 0320 	and.w	r3, r3, #32
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fb7d 	bl	8008c64 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008574:	2b40      	cmp	r3, #64	; 0x40
 8008576:	bf0c      	ite	eq
 8008578:	2301      	moveq	r3, #1
 800857a:	2300      	movne	r3, #0
 800857c:	b2db      	uxtb	r3, r3
 800857e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008586:	f003 0308 	and.w	r3, r3, #8
 800858a:	2b00      	cmp	r3, #0
 800858c:	d103      	bne.n	8008596 <HAL_UART_IRQHandler+0x17a>
 800858e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008592:	2b00      	cmp	r3, #0
 8008594:	d04f      	beq.n	8008636 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 fa85 	bl	8008aa6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a6:	2b40      	cmp	r3, #64	; 0x40
 80085a8:	d141      	bne.n	800862e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3314      	adds	r3, #20
 80085b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80085c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3314      	adds	r3, #20
 80085d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80085d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80085da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80085e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80085e6:	e841 2300 	strex	r3, r2, [r1]
 80085ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80085ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1d9      	bne.n	80085aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d013      	beq.n	8008626 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008602:	4a7e      	ldr	r2, [pc, #504]	; (80087fc <HAL_UART_IRQHandler+0x3e0>)
 8008604:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860a:	4618      	mov	r0, r3
 800860c:	f7fa fcae 	bl	8002f6c <HAL_DMA_Abort_IT>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d016      	beq.n	8008644 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008620:	4610      	mov	r0, r2
 8008622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008624:	e00e      	b.n	8008644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f994 	bl	8008954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800862c:	e00a      	b.n	8008644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f990 	bl	8008954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008634:	e006      	b.n	8008644 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f98c 	bl	8008954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008642:	e175      	b.n	8008930 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008644:	bf00      	nop
    return;
 8008646:	e173      	b.n	8008930 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864c:	2b01      	cmp	r3, #1
 800864e:	f040 814f 	bne.w	80088f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008656:	f003 0310 	and.w	r3, r3, #16
 800865a:	2b00      	cmp	r3, #0
 800865c:	f000 8148 	beq.w	80088f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008664:	f003 0310 	and.w	r3, r3, #16
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 8141 	beq.w	80088f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800866e:	2300      	movs	r3, #0
 8008670:	60bb      	str	r3, [r7, #8]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	60bb      	str	r3, [r7, #8]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	60bb      	str	r3, [r7, #8]
 8008682:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868e:	2b40      	cmp	r3, #64	; 0x40
 8008690:	f040 80b6 	bne.w	8008800 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 8145 	beq.w	8008934 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086b2:	429a      	cmp	r2, r3
 80086b4:	f080 813e 	bcs.w	8008934 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ca:	f000 8088 	beq.w	80087de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	330c      	adds	r3, #12
 80086d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80086e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	330c      	adds	r3, #12
 80086f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80086fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80086fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008702:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008706:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1d9      	bne.n	80086ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3314      	adds	r3, #20
 8008720:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800872a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800872c:	f023 0301 	bic.w	r3, r3, #1
 8008730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3314      	adds	r3, #20
 800873a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800873e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008742:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008746:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800874a:	e841 2300 	strex	r3, r2, [r1]
 800874e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1e1      	bne.n	800871a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3314      	adds	r3, #20
 800875c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800876c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3314      	adds	r3, #20
 8008776:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800877a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800877c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008780:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e3      	bne.n	8008756 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	330c      	adds	r3, #12
 80087a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ae:	f023 0310 	bic.w	r3, r3, #16
 80087b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	330c      	adds	r3, #12
 80087bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80087c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80087c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e3      	bne.n	800879c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fa fb57 	bl	8002e8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2202      	movs	r2, #2
 80087e2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f8b7 	bl	8008968 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087fa:	e09b      	b.n	8008934 <HAL_UART_IRQHandler+0x518>
 80087fc:	08008b6d 	.word	0x08008b6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008808:	b29b      	uxth	r3, r3
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008814:	b29b      	uxth	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 808e 	beq.w	8008938 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800881c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 8089 	beq.w	8008938 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	330c      	adds	r3, #12
 800882c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008830:	e853 3f00 	ldrex	r3, [r3]
 8008834:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008838:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800883c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	330c      	adds	r3, #12
 8008846:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800884a:	647a      	str	r2, [r7, #68]	; 0x44
 800884c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008850:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e3      	bne.n	8008826 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3314      	adds	r3, #20
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	e853 3f00 	ldrex	r3, [r3]
 800886c:	623b      	str	r3, [r7, #32]
   return(result);
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	f023 0301 	bic.w	r3, r3, #1
 8008874:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3314      	adds	r3, #20
 800887e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008882:	633a      	str	r2, [r7, #48]	; 0x30
 8008884:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800888a:	e841 2300 	strex	r3, r2, [r1]
 800888e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1e3      	bne.n	800885e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2220      	movs	r2, #32
 800889a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	330c      	adds	r3, #12
 80088aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	e853 3f00 	ldrex	r3, [r3]
 80088b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f023 0310 	bic.w	r3, r3, #16
 80088ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	330c      	adds	r3, #12
 80088c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80088c8:	61fa      	str	r2, [r7, #28]
 80088ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088cc:	69b9      	ldr	r1, [r7, #24]
 80088ce:	69fa      	ldr	r2, [r7, #28]
 80088d0:	e841 2300 	strex	r3, r2, [r1]
 80088d4:	617b      	str	r3, [r7, #20]
   return(result);
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1e3      	bne.n	80088a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2202      	movs	r2, #2
 80088e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f83d 	bl	8008968 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80088ee:	e023      	b.n	8008938 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80088f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d009      	beq.n	8008910 <HAL_UART_IRQHandler+0x4f4>
 80088fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f943 	bl	8008b94 <UART_Transmit_IT>
    return;
 800890e:	e014      	b.n	800893a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00e      	beq.n	800893a <HAL_UART_IRQHandler+0x51e>
 800891c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008924:	2b00      	cmp	r3, #0
 8008926:	d008      	beq.n	800893a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f983 	bl	8008c34 <UART_EndTransmit_IT>
    return;
 800892e:	e004      	b.n	800893a <HAL_UART_IRQHandler+0x51e>
    return;
 8008930:	bf00      	nop
 8008932:	e002      	b.n	800893a <HAL_UART_IRQHandler+0x51e>
      return;
 8008934:	bf00      	nop
 8008936:	e000      	b.n	800893a <HAL_UART_IRQHandler+0x51e>
      return;
 8008938:	bf00      	nop
  }
}
 800893a:	37e8      	adds	r7, #232	; 0xe8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	460b      	mov	r3, r1
 8008972:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	603b      	str	r3, [r7, #0]
 800898c:	4613      	mov	r3, r2
 800898e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008990:	e03b      	b.n	8008a0a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008992:	6a3b      	ldr	r3, [r7, #32]
 8008994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008998:	d037      	beq.n	8008a0a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800899a:	f7fa f887 	bl	8002aac <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	6a3a      	ldr	r2, [r7, #32]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d302      	bcc.n	80089b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80089aa:	6a3b      	ldr	r3, [r7, #32]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089b0:	2303      	movs	r3, #3
 80089b2:	e03a      	b.n	8008a2a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	f003 0304 	and.w	r3, r3, #4
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d023      	beq.n	8008a0a <UART_WaitOnFlagUntilTimeout+0x8a>
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2b80      	cmp	r3, #128	; 0x80
 80089c6:	d020      	beq.n	8008a0a <UART_WaitOnFlagUntilTimeout+0x8a>
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	2b40      	cmp	r3, #64	; 0x40
 80089cc:	d01d      	beq.n	8008a0a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0308 	and.w	r3, r3, #8
 80089d8:	2b08      	cmp	r3, #8
 80089da:	d116      	bne.n	8008a0a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80089dc:	2300      	movs	r3, #0
 80089de:	617b      	str	r3, [r7, #20]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	617b      	str	r3, [r7, #20]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	617b      	str	r3, [r7, #20]
 80089f0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 f857 	bl	8008aa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2208      	movs	r2, #8
 80089fc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e00f      	b.n	8008a2a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	4013      	ands	r3, r2
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	bf0c      	ite	eq
 8008a1a:	2301      	moveq	r3, #1
 8008a1c:	2300      	movne	r3, #0
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	461a      	mov	r2, r3
 8008a22:	79fb      	ldrb	r3, [r7, #7]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d0b4      	beq.n	8008992 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3718      	adds	r7, #24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b085      	sub	sp, #20
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	60f8      	str	r0, [r7, #12]
 8008a3a:	60b9      	str	r1, [r7, #8]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	88fa      	ldrh	r2, [r7, #6]
 8008a4a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	88fa      	ldrh	r2, [r7, #6]
 8008a50:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2222      	movs	r2, #34	; 0x22
 8008a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d007      	beq.n	8008a78 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68da      	ldr	r2, [r3, #12]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a76:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	695a      	ldr	r2, [r3, #20]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f042 0201 	orr.w	r2, r2, #1
 8008a86:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68da      	ldr	r2, [r3, #12]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f042 0220 	orr.w	r2, r2, #32
 8008a96:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3714      	adds	r7, #20
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b095      	sub	sp, #84	; 0x54
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	330c      	adds	r3, #12
 8008ab4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab8:	e853 3f00 	ldrex	r3, [r3]
 8008abc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	330c      	adds	r3, #12
 8008acc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ace:	643a      	str	r2, [r7, #64]	; 0x40
 8008ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ad4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1e5      	bne.n	8008aae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3314      	adds	r3, #20
 8008ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aea:	6a3b      	ldr	r3, [r7, #32]
 8008aec:	e853 3f00 	ldrex	r3, [r3]
 8008af0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	f023 0301 	bic.w	r3, r3, #1
 8008af8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3314      	adds	r3, #20
 8008b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b0a:	e841 2300 	strex	r3, r2, [r1]
 8008b0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1e5      	bne.n	8008ae2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d119      	bne.n	8008b52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	330c      	adds	r3, #12
 8008b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f023 0310 	bic.w	r3, r3, #16
 8008b34:	647b      	str	r3, [r7, #68]	; 0x44
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	330c      	adds	r3, #12
 8008b3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b3e:	61ba      	str	r2, [r7, #24]
 8008b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	6979      	ldr	r1, [r7, #20]
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e5      	bne.n	8008b1e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2220      	movs	r2, #32
 8008b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008b60:	bf00      	nop
 8008b62:	3754      	adds	r7, #84	; 0x54
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f7ff fee4 	bl	8008954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b8c:	bf00      	nop
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b21      	cmp	r3, #33	; 0x21
 8008ba6:	d13e      	bne.n	8008c26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bb0:	d114      	bne.n	8008bdc <UART_Transmit_IT+0x48>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d110      	bne.n	8008bdc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
 8008bd4:	1c9a      	adds	r2, r3, #2
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	621a      	str	r2, [r3, #32]
 8008bda:	e008      	b.n	8008bee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	1c59      	adds	r1, r3, #1
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	6211      	str	r1, [r2, #32]
 8008be6:	781a      	ldrb	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10f      	bne.n	8008c22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68da      	ldr	r2, [r3, #12]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68da      	ldr	r2, [r3, #12]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	e000      	b.n	8008c28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c26:	2302      	movs	r3, #2
  }
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c4a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2220      	movs	r2, #32
 8008c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7ff fe73 	bl	8008940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b08c      	sub	sp, #48	; 0x30
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b22      	cmp	r3, #34	; 0x22
 8008c76:	f040 80ae 	bne.w	8008dd6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c82:	d117      	bne.n	8008cb4 <UART_Receive_IT+0x50>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d113      	bne.n	8008cb4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c94:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cac:	1c9a      	adds	r2, r3, #2
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	629a      	str	r2, [r3, #40]	; 0x28
 8008cb2:	e026      	b.n	8008d02 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cc6:	d007      	beq.n	8008cd8 <UART_Receive_IT+0x74>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10a      	bne.n	8008ce6 <UART_Receive_IT+0x82>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d106      	bne.n	8008ce6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	b2da      	uxtb	r2, r3
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	701a      	strb	r2, [r3, #0]
 8008ce4:	e008      	b.n	8008cf8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfc:	1c5a      	adds	r2, r3, #1
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d15d      	bne.n	8008dd2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68da      	ldr	r2, [r3, #12]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f022 0220 	bic.w	r2, r2, #32
 8008d24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68da      	ldr	r2, [r3, #12]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	695a      	ldr	r2, [r3, #20]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f022 0201 	bic.w	r2, r2, #1
 8008d44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2220      	movs	r2, #32
 8008d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d135      	bne.n	8008dc8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	330c      	adds	r3, #12
 8008d68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	e853 3f00 	ldrex	r3, [r3]
 8008d70:	613b      	str	r3, [r7, #16]
   return(result);
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f023 0310 	bic.w	r3, r3, #16
 8008d78:	627b      	str	r3, [r7, #36]	; 0x24
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	330c      	adds	r3, #12
 8008d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d82:	623a      	str	r2, [r7, #32]
 8008d84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d86:	69f9      	ldr	r1, [r7, #28]
 8008d88:	6a3a      	ldr	r2, [r7, #32]
 8008d8a:	e841 2300 	strex	r3, r2, [r1]
 8008d8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1e5      	bne.n	8008d62 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0310 	and.w	r3, r3, #16
 8008da0:	2b10      	cmp	r3, #16
 8008da2:	d10a      	bne.n	8008dba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008da4:	2300      	movs	r3, #0
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60fb      	str	r3, [r7, #12]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7ff fdd1 	bl	8008968 <HAL_UARTEx_RxEventCallback>
 8008dc6:	e002      	b.n	8008dce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7f8 f911 	bl	8000ff0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e002      	b.n	8008dd8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	e000      	b.n	8008dd8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008dd6:	2302      	movs	r3, #2
  }
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3730      	adds	r7, #48	; 0x30
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008de4:	b0c0      	sub	sp, #256	; 0x100
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dfc:	68d9      	ldr	r1, [r3, #12]
 8008dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	ea40 0301 	orr.w	r3, r0, r1
 8008e08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	431a      	orrs	r2, r3
 8008e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e38:	f021 010c 	bic.w	r1, r1, #12
 8008e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e46:	430b      	orrs	r3, r1
 8008e48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5a:	6999      	ldr	r1, [r3, #24]
 8008e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	ea40 0301 	orr.w	r3, r0, r1
 8008e66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	4b8f      	ldr	r3, [pc, #572]	; (80090ac <UART_SetConfig+0x2cc>)
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d005      	beq.n	8008e80 <UART_SetConfig+0xa0>
 8008e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	4b8d      	ldr	r3, [pc, #564]	; (80090b0 <UART_SetConfig+0x2d0>)
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d104      	bne.n	8008e8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e80:	f7fe fa4a 	bl	8007318 <HAL_RCC_GetPCLK2Freq>
 8008e84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e88:	e003      	b.n	8008e92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e8a:	f7fe fa31 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 8008e8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e96:	69db      	ldr	r3, [r3, #28]
 8008e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e9c:	f040 810c 	bne.w	80090b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008eaa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008eae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008eb2:	4622      	mov	r2, r4
 8008eb4:	462b      	mov	r3, r5
 8008eb6:	1891      	adds	r1, r2, r2
 8008eb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8008eba:	415b      	adcs	r3, r3
 8008ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ebe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008ec2:	4621      	mov	r1, r4
 8008ec4:	eb12 0801 	adds.w	r8, r2, r1
 8008ec8:	4629      	mov	r1, r5
 8008eca:	eb43 0901 	adc.w	r9, r3, r1
 8008ece:	f04f 0200 	mov.w	r2, #0
 8008ed2:	f04f 0300 	mov.w	r3, #0
 8008ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ee2:	4690      	mov	r8, r2
 8008ee4:	4699      	mov	r9, r3
 8008ee6:	4623      	mov	r3, r4
 8008ee8:	eb18 0303 	adds.w	r3, r8, r3
 8008eec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ef0:	462b      	mov	r3, r5
 8008ef2:	eb49 0303 	adc.w	r3, r9, r3
 8008ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008f0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008f0e:	460b      	mov	r3, r1
 8008f10:	18db      	adds	r3, r3, r3
 8008f12:	653b      	str	r3, [r7, #80]	; 0x50
 8008f14:	4613      	mov	r3, r2
 8008f16:	eb42 0303 	adc.w	r3, r2, r3
 8008f1a:	657b      	str	r3, [r7, #84]	; 0x54
 8008f1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008f20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008f24:	f7f7 feb0 	bl	8000c88 <__aeabi_uldivmod>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4b61      	ldr	r3, [pc, #388]	; (80090b4 <UART_SetConfig+0x2d4>)
 8008f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f32:	095b      	lsrs	r3, r3, #5
 8008f34:	011c      	lsls	r4, r3, #4
 8008f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008f44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008f48:	4642      	mov	r2, r8
 8008f4a:	464b      	mov	r3, r9
 8008f4c:	1891      	adds	r1, r2, r2
 8008f4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008f50:	415b      	adcs	r3, r3
 8008f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f58:	4641      	mov	r1, r8
 8008f5a:	eb12 0a01 	adds.w	sl, r2, r1
 8008f5e:	4649      	mov	r1, r9
 8008f60:	eb43 0b01 	adc.w	fp, r3, r1
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	f04f 0300 	mov.w	r3, #0
 8008f6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f78:	4692      	mov	sl, r2
 8008f7a:	469b      	mov	fp, r3
 8008f7c:	4643      	mov	r3, r8
 8008f7e:	eb1a 0303 	adds.w	r3, sl, r3
 8008f82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f86:	464b      	mov	r3, r9
 8008f88:	eb4b 0303 	adc.w	r3, fp, r3
 8008f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008fa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	18db      	adds	r3, r3, r3
 8008fa8:	643b      	str	r3, [r7, #64]	; 0x40
 8008faa:	4613      	mov	r3, r2
 8008fac:	eb42 0303 	adc.w	r3, r2, r3
 8008fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8008fb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008fb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008fba:	f7f7 fe65 	bl	8000c88 <__aeabi_uldivmod>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	4611      	mov	r1, r2
 8008fc4:	4b3b      	ldr	r3, [pc, #236]	; (80090b4 <UART_SetConfig+0x2d4>)
 8008fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8008fca:	095b      	lsrs	r3, r3, #5
 8008fcc:	2264      	movs	r2, #100	; 0x64
 8008fce:	fb02 f303 	mul.w	r3, r2, r3
 8008fd2:	1acb      	subs	r3, r1, r3
 8008fd4:	00db      	lsls	r3, r3, #3
 8008fd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008fda:	4b36      	ldr	r3, [pc, #216]	; (80090b4 <UART_SetConfig+0x2d4>)
 8008fdc:	fba3 2302 	umull	r2, r3, r3, r2
 8008fe0:	095b      	lsrs	r3, r3, #5
 8008fe2:	005b      	lsls	r3, r3, #1
 8008fe4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008fe8:	441c      	add	r4, r3
 8008fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ff4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008ff8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ffc:	4642      	mov	r2, r8
 8008ffe:	464b      	mov	r3, r9
 8009000:	1891      	adds	r1, r2, r2
 8009002:	63b9      	str	r1, [r7, #56]	; 0x38
 8009004:	415b      	adcs	r3, r3
 8009006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009008:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800900c:	4641      	mov	r1, r8
 800900e:	1851      	adds	r1, r2, r1
 8009010:	6339      	str	r1, [r7, #48]	; 0x30
 8009012:	4649      	mov	r1, r9
 8009014:	414b      	adcs	r3, r1
 8009016:	637b      	str	r3, [r7, #52]	; 0x34
 8009018:	f04f 0200 	mov.w	r2, #0
 800901c:	f04f 0300 	mov.w	r3, #0
 8009020:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009024:	4659      	mov	r1, fp
 8009026:	00cb      	lsls	r3, r1, #3
 8009028:	4651      	mov	r1, sl
 800902a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800902e:	4651      	mov	r1, sl
 8009030:	00ca      	lsls	r2, r1, #3
 8009032:	4610      	mov	r0, r2
 8009034:	4619      	mov	r1, r3
 8009036:	4603      	mov	r3, r0
 8009038:	4642      	mov	r2, r8
 800903a:	189b      	adds	r3, r3, r2
 800903c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009040:	464b      	mov	r3, r9
 8009042:	460a      	mov	r2, r1
 8009044:	eb42 0303 	adc.w	r3, r2, r3
 8009048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800904c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009058:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800905c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009060:	460b      	mov	r3, r1
 8009062:	18db      	adds	r3, r3, r3
 8009064:	62bb      	str	r3, [r7, #40]	; 0x28
 8009066:	4613      	mov	r3, r2
 8009068:	eb42 0303 	adc.w	r3, r2, r3
 800906c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800906e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009072:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009076:	f7f7 fe07 	bl	8000c88 <__aeabi_uldivmod>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	4b0d      	ldr	r3, [pc, #52]	; (80090b4 <UART_SetConfig+0x2d4>)
 8009080:	fba3 1302 	umull	r1, r3, r3, r2
 8009084:	095b      	lsrs	r3, r3, #5
 8009086:	2164      	movs	r1, #100	; 0x64
 8009088:	fb01 f303 	mul.w	r3, r1, r3
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	00db      	lsls	r3, r3, #3
 8009090:	3332      	adds	r3, #50	; 0x32
 8009092:	4a08      	ldr	r2, [pc, #32]	; (80090b4 <UART_SetConfig+0x2d4>)
 8009094:	fba2 2303 	umull	r2, r3, r2, r3
 8009098:	095b      	lsrs	r3, r3, #5
 800909a:	f003 0207 	and.w	r2, r3, #7
 800909e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4422      	add	r2, r4
 80090a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090a8:	e106      	b.n	80092b8 <UART_SetConfig+0x4d8>
 80090aa:	bf00      	nop
 80090ac:	40011000 	.word	0x40011000
 80090b0:	40011400 	.word	0x40011400
 80090b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090bc:	2200      	movs	r2, #0
 80090be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80090c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80090c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80090ca:	4642      	mov	r2, r8
 80090cc:	464b      	mov	r3, r9
 80090ce:	1891      	adds	r1, r2, r2
 80090d0:	6239      	str	r1, [r7, #32]
 80090d2:	415b      	adcs	r3, r3
 80090d4:	627b      	str	r3, [r7, #36]	; 0x24
 80090d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090da:	4641      	mov	r1, r8
 80090dc:	1854      	adds	r4, r2, r1
 80090de:	4649      	mov	r1, r9
 80090e0:	eb43 0501 	adc.w	r5, r3, r1
 80090e4:	f04f 0200 	mov.w	r2, #0
 80090e8:	f04f 0300 	mov.w	r3, #0
 80090ec:	00eb      	lsls	r3, r5, #3
 80090ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090f2:	00e2      	lsls	r2, r4, #3
 80090f4:	4614      	mov	r4, r2
 80090f6:	461d      	mov	r5, r3
 80090f8:	4643      	mov	r3, r8
 80090fa:	18e3      	adds	r3, r4, r3
 80090fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009100:	464b      	mov	r3, r9
 8009102:	eb45 0303 	adc.w	r3, r5, r3
 8009106:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800910a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009116:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800911a:	f04f 0200 	mov.w	r2, #0
 800911e:	f04f 0300 	mov.w	r3, #0
 8009122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009126:	4629      	mov	r1, r5
 8009128:	008b      	lsls	r3, r1, #2
 800912a:	4621      	mov	r1, r4
 800912c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009130:	4621      	mov	r1, r4
 8009132:	008a      	lsls	r2, r1, #2
 8009134:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009138:	f7f7 fda6 	bl	8000c88 <__aeabi_uldivmod>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	4b60      	ldr	r3, [pc, #384]	; (80092c4 <UART_SetConfig+0x4e4>)
 8009142:	fba3 2302 	umull	r2, r3, r3, r2
 8009146:	095b      	lsrs	r3, r3, #5
 8009148:	011c      	lsls	r4, r3, #4
 800914a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800914e:	2200      	movs	r2, #0
 8009150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009154:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009158:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800915c:	4642      	mov	r2, r8
 800915e:	464b      	mov	r3, r9
 8009160:	1891      	adds	r1, r2, r2
 8009162:	61b9      	str	r1, [r7, #24]
 8009164:	415b      	adcs	r3, r3
 8009166:	61fb      	str	r3, [r7, #28]
 8009168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800916c:	4641      	mov	r1, r8
 800916e:	1851      	adds	r1, r2, r1
 8009170:	6139      	str	r1, [r7, #16]
 8009172:	4649      	mov	r1, r9
 8009174:	414b      	adcs	r3, r1
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	f04f 0200 	mov.w	r2, #0
 800917c:	f04f 0300 	mov.w	r3, #0
 8009180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009184:	4659      	mov	r1, fp
 8009186:	00cb      	lsls	r3, r1, #3
 8009188:	4651      	mov	r1, sl
 800918a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800918e:	4651      	mov	r1, sl
 8009190:	00ca      	lsls	r2, r1, #3
 8009192:	4610      	mov	r0, r2
 8009194:	4619      	mov	r1, r3
 8009196:	4603      	mov	r3, r0
 8009198:	4642      	mov	r2, r8
 800919a:	189b      	adds	r3, r3, r2
 800919c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091a0:	464b      	mov	r3, r9
 80091a2:	460a      	mov	r2, r1
 80091a4:	eb42 0303 	adc.w	r3, r2, r3
 80091a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80091b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80091b8:	f04f 0200 	mov.w	r2, #0
 80091bc:	f04f 0300 	mov.w	r3, #0
 80091c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80091c4:	4649      	mov	r1, r9
 80091c6:	008b      	lsls	r3, r1, #2
 80091c8:	4641      	mov	r1, r8
 80091ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091ce:	4641      	mov	r1, r8
 80091d0:	008a      	lsls	r2, r1, #2
 80091d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80091d6:	f7f7 fd57 	bl	8000c88 <__aeabi_uldivmod>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	4611      	mov	r1, r2
 80091e0:	4b38      	ldr	r3, [pc, #224]	; (80092c4 <UART_SetConfig+0x4e4>)
 80091e2:	fba3 2301 	umull	r2, r3, r3, r1
 80091e6:	095b      	lsrs	r3, r3, #5
 80091e8:	2264      	movs	r2, #100	; 0x64
 80091ea:	fb02 f303 	mul.w	r3, r2, r3
 80091ee:	1acb      	subs	r3, r1, r3
 80091f0:	011b      	lsls	r3, r3, #4
 80091f2:	3332      	adds	r3, #50	; 0x32
 80091f4:	4a33      	ldr	r2, [pc, #204]	; (80092c4 <UART_SetConfig+0x4e4>)
 80091f6:	fba2 2303 	umull	r2, r3, r2, r3
 80091fa:	095b      	lsrs	r3, r3, #5
 80091fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009200:	441c      	add	r4, r3
 8009202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009206:	2200      	movs	r2, #0
 8009208:	673b      	str	r3, [r7, #112]	; 0x70
 800920a:	677a      	str	r2, [r7, #116]	; 0x74
 800920c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009210:	4642      	mov	r2, r8
 8009212:	464b      	mov	r3, r9
 8009214:	1891      	adds	r1, r2, r2
 8009216:	60b9      	str	r1, [r7, #8]
 8009218:	415b      	adcs	r3, r3
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009220:	4641      	mov	r1, r8
 8009222:	1851      	adds	r1, r2, r1
 8009224:	6039      	str	r1, [r7, #0]
 8009226:	4649      	mov	r1, r9
 8009228:	414b      	adcs	r3, r1
 800922a:	607b      	str	r3, [r7, #4]
 800922c:	f04f 0200 	mov.w	r2, #0
 8009230:	f04f 0300 	mov.w	r3, #0
 8009234:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009238:	4659      	mov	r1, fp
 800923a:	00cb      	lsls	r3, r1, #3
 800923c:	4651      	mov	r1, sl
 800923e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009242:	4651      	mov	r1, sl
 8009244:	00ca      	lsls	r2, r1, #3
 8009246:	4610      	mov	r0, r2
 8009248:	4619      	mov	r1, r3
 800924a:	4603      	mov	r3, r0
 800924c:	4642      	mov	r2, r8
 800924e:	189b      	adds	r3, r3, r2
 8009250:	66bb      	str	r3, [r7, #104]	; 0x68
 8009252:	464b      	mov	r3, r9
 8009254:	460a      	mov	r2, r1
 8009256:	eb42 0303 	adc.w	r3, r2, r3
 800925a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800925c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	663b      	str	r3, [r7, #96]	; 0x60
 8009266:	667a      	str	r2, [r7, #100]	; 0x64
 8009268:	f04f 0200 	mov.w	r2, #0
 800926c:	f04f 0300 	mov.w	r3, #0
 8009270:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009274:	4649      	mov	r1, r9
 8009276:	008b      	lsls	r3, r1, #2
 8009278:	4641      	mov	r1, r8
 800927a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800927e:	4641      	mov	r1, r8
 8009280:	008a      	lsls	r2, r1, #2
 8009282:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009286:	f7f7 fcff 	bl	8000c88 <__aeabi_uldivmod>
 800928a:	4602      	mov	r2, r0
 800928c:	460b      	mov	r3, r1
 800928e:	4b0d      	ldr	r3, [pc, #52]	; (80092c4 <UART_SetConfig+0x4e4>)
 8009290:	fba3 1302 	umull	r1, r3, r3, r2
 8009294:	095b      	lsrs	r3, r3, #5
 8009296:	2164      	movs	r1, #100	; 0x64
 8009298:	fb01 f303 	mul.w	r3, r1, r3
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	011b      	lsls	r3, r3, #4
 80092a0:	3332      	adds	r3, #50	; 0x32
 80092a2:	4a08      	ldr	r2, [pc, #32]	; (80092c4 <UART_SetConfig+0x4e4>)
 80092a4:	fba2 2303 	umull	r2, r3, r2, r3
 80092a8:	095b      	lsrs	r3, r3, #5
 80092aa:	f003 020f 	and.w	r2, r3, #15
 80092ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4422      	add	r2, r4
 80092b6:	609a      	str	r2, [r3, #8]
}
 80092b8:	bf00      	nop
 80092ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80092be:	46bd      	mov	sp, r7
 80092c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092c4:	51eb851f 	.word	0x51eb851f

080092c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092c8:	b084      	sub	sp, #16
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b084      	sub	sp, #16
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	f107 001c 	add.w	r0, r7, #28
 80092d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092da:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d123      	bne.n	800932a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80092f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800930a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800930e:	2b01      	cmp	r3, #1
 8009310:	d105      	bne.n	800931e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f9dc 	bl	80096dc <USB_CoreReset>
 8009324:	4603      	mov	r3, r0
 8009326:	73fb      	strb	r3, [r7, #15]
 8009328:	e01b      	b.n	8009362 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f9d0 	bl	80096dc <USB_CoreReset>
 800933c:	4603      	mov	r3, r0
 800933e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009340:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009344:	2b00      	cmp	r3, #0
 8009346:	d106      	bne.n	8009356 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	639a      	str	r2, [r3, #56]	; 0x38
 8009354:	e005      	b.n	8009362 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009362:	7fbb      	ldrb	r3, [r7, #30]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d10b      	bne.n	8009380 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f043 0206 	orr.w	r2, r3, #6
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f043 0220 	orr.w	r2, r3, #32
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009380:	7bfb      	ldrb	r3, [r7, #15]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800938c:	b004      	add	sp, #16
 800938e:	4770      	bx	lr

08009390 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	f043 0201 	orr.w	r2, r3, #1
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b083      	sub	sp, #12
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f023 0201 	bic.w	r2, r3, #1
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	460b      	mov	r3, r1
 80093de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d115      	bne.n	8009422 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009402:	200a      	movs	r0, #10
 8009404:	f7f9 fb5e 	bl	8002ac4 <HAL_Delay>
      ms += 10U;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	330a      	adds	r3, #10
 800940c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f956 	bl	80096c0 <USB_GetMode>
 8009414:	4603      	mov	r3, r0
 8009416:	2b01      	cmp	r3, #1
 8009418:	d01e      	beq.n	8009458 <USB_SetCurrentMode+0x84>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2bc7      	cmp	r3, #199	; 0xc7
 800941e:	d9f0      	bls.n	8009402 <USB_SetCurrentMode+0x2e>
 8009420:	e01a      	b.n	8009458 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009422:	78fb      	ldrb	r3, [r7, #3]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d115      	bne.n	8009454 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009434:	200a      	movs	r0, #10
 8009436:	f7f9 fb45 	bl	8002ac4 <HAL_Delay>
      ms += 10U;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	330a      	adds	r3, #10
 800943e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 f93d 	bl	80096c0 <USB_GetMode>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d005      	beq.n	8009458 <USB_SetCurrentMode+0x84>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2bc7      	cmp	r3, #199	; 0xc7
 8009450:	d9f0      	bls.n	8009434 <USB_SetCurrentMode+0x60>
 8009452:	e001      	b.n	8009458 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	e005      	b.n	8009464 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2bc8      	cmp	r3, #200	; 0xc8
 800945c:	d101      	bne.n	8009462 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e000      	b.n	8009464 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009476:	2300      	movs	r3, #0
 8009478:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	3301      	adds	r3, #1
 800947e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8009486:	d901      	bls.n	800948c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e01b      	b.n	80094c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	2b00      	cmp	r3, #0
 8009492:	daf2      	bge.n	800947a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009494:	2300      	movs	r3, #0
 8009496:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	019b      	lsls	r3, r3, #6
 800949c:	f043 0220 	orr.w	r2, r3, #32
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3301      	adds	r3, #1
 80094a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80094b0:	d901      	bls.n	80094b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80094b2:	2303      	movs	r3, #3
 80094b4:	e006      	b.n	80094c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	f003 0320 	and.w	r3, r3, #32
 80094be:	2b20      	cmp	r3, #32
 80094c0:	d0f0      	beq.n	80094a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094d8:	2300      	movs	r3, #0
 80094da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	3301      	adds	r3, #1
 80094e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80094e8:	d901      	bls.n	80094ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e018      	b.n	8009520 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	691b      	ldr	r3, [r3, #16]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	daf2      	bge.n	80094dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80094f6:	2300      	movs	r3, #0
 80094f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2210      	movs	r2, #16
 80094fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	3301      	adds	r3, #1
 8009504:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800950c:	d901      	bls.n	8009512 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e006      	b.n	8009520 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	f003 0310 	and.w	r3, r3, #16
 800951a:	2b10      	cmp	r3, #16
 800951c:	d0f0      	beq.n	8009500 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800952c:	b480      	push	{r7}
 800952e:	b089      	sub	sp, #36	; 0x24
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	4611      	mov	r1, r2
 8009538:	461a      	mov	r2, r3
 800953a:	460b      	mov	r3, r1
 800953c:	71fb      	strb	r3, [r7, #7]
 800953e:	4613      	mov	r3, r2
 8009540:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800954a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800954e:	2b00      	cmp	r3, #0
 8009550:	d123      	bne.n	800959a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009552:	88bb      	ldrh	r3, [r7, #4]
 8009554:	3303      	adds	r3, #3
 8009556:	089b      	lsrs	r3, r3, #2
 8009558:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800955a:	2300      	movs	r3, #0
 800955c:	61bb      	str	r3, [r7, #24]
 800955e:	e018      	b.n	8009592 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009560:	79fb      	ldrb	r3, [r7, #7]
 8009562:	031a      	lsls	r2, r3, #12
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	4413      	add	r3, r2
 8009568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800956c:	461a      	mov	r2, r3
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	3301      	adds	r3, #1
 8009578:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	3301      	adds	r3, #1
 800957e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	3301      	adds	r3, #1
 8009584:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	3301      	adds	r3, #1
 800958a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	3301      	adds	r3, #1
 8009590:	61bb      	str	r3, [r7, #24]
 8009592:	69ba      	ldr	r2, [r7, #24]
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	429a      	cmp	r2, r3
 8009598:	d3e2      	bcc.n	8009560 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3724      	adds	r7, #36	; 0x24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b08b      	sub	sp, #44	; 0x2c
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	4613      	mov	r3, r2
 80095b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80095be:	88fb      	ldrh	r3, [r7, #6]
 80095c0:	089b      	lsrs	r3, r3, #2
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80095c6:	88fb      	ldrh	r3, [r7, #6]
 80095c8:	f003 0303 	and.w	r3, r3, #3
 80095cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80095ce:	2300      	movs	r3, #0
 80095d0:	623b      	str	r3, [r7, #32]
 80095d2:	e014      	b.n	80095fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	601a      	str	r2, [r3, #0]
    pDest++;
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	3301      	adds	r3, #1
 80095e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e8:	3301      	adds	r3, #1
 80095ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	3301      	adds	r3, #1
 80095f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	3301      	adds	r3, #1
 80095f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80095f8:	6a3b      	ldr	r3, [r7, #32]
 80095fa:	3301      	adds	r3, #1
 80095fc:	623b      	str	r3, [r7, #32]
 80095fe:	6a3a      	ldr	r2, [r7, #32]
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	429a      	cmp	r2, r3
 8009604:	d3e6      	bcc.n	80095d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009606:	8bfb      	ldrh	r3, [r7, #30]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d01e      	beq.n	800964a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800960c:	2300      	movs	r3, #0
 800960e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009616:	461a      	mov	r2, r3
 8009618:	f107 0310 	add.w	r3, r7, #16
 800961c:	6812      	ldr	r2, [r2, #0]
 800961e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	6a3b      	ldr	r3, [r7, #32]
 8009624:	b2db      	uxtb	r3, r3
 8009626:	00db      	lsls	r3, r3, #3
 8009628:	fa22 f303 	lsr.w	r3, r2, r3
 800962c:	b2da      	uxtb	r2, r3
 800962e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009630:	701a      	strb	r2, [r3, #0]
      i++;
 8009632:	6a3b      	ldr	r3, [r7, #32]
 8009634:	3301      	adds	r3, #1
 8009636:	623b      	str	r3, [r7, #32]
      pDest++;
 8009638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963a:	3301      	adds	r3, #1
 800963c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800963e:	8bfb      	ldrh	r3, [r7, #30]
 8009640:	3b01      	subs	r3, #1
 8009642:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009644:	8bfb      	ldrh	r3, [r7, #30]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1ea      	bne.n	8009620 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800964c:	4618      	mov	r0, r3
 800964e:	372c      	adds	r7, #44	; 0x2c
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	695b      	ldr	r3, [r3, #20]
 8009664:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	699b      	ldr	r3, [r3, #24]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	4013      	ands	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009670:	68fb      	ldr	r3, [r7, #12]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3714      	adds	r7, #20
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr

0800967e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800967e:	b480      	push	{r7}
 8009680:	b085      	sub	sp, #20
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	460b      	mov	r3, r1
 8009688:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800968e:	78fb      	ldrb	r3, [r7, #3]
 8009690:	015a      	lsls	r2, r3, #5
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	4413      	add	r3, r2
 8009696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800969e:	78fb      	ldrb	r3, [r7, #3]
 80096a0:	015a      	lsls	r2, r3, #5
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	4413      	add	r3, r2
 80096a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	4013      	ands	r3, r2
 80096b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80096b2:	68bb      	ldr	r3, [r7, #8]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	f003 0301 	and.w	r3, r3, #1
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096e4:	2300      	movs	r3, #0
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3301      	adds	r3, #1
 80096ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80096f4:	d901      	bls.n	80096fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80096f6:	2303      	movs	r3, #3
 80096f8:	e01b      	b.n	8009732 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	691b      	ldr	r3, [r3, #16]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	daf2      	bge.n	80096e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009702:	2300      	movs	r3, #0
 8009704:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	f043 0201 	orr.w	r2, r3, #1
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3301      	adds	r3, #1
 8009716:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800971e:	d901      	bls.n	8009724 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e006      	b.n	8009732 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	f003 0301 	and.w	r3, r3, #1
 800972c:	2b01      	cmp	r3, #1
 800972e:	d0f0      	beq.n	8009712 <USB_CoreReset+0x36>

  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
	...

08009740 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009740:	b084      	sub	sp, #16
 8009742:	b580      	push	{r7, lr}
 8009744:	b086      	sub	sp, #24
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800974e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009760:	461a      	mov	r2, r3
 8009762:	2300      	movs	r3, #0
 8009764:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009776:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009782:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009792:	2b00      	cmp	r3, #0
 8009794:	d119      	bne.n	80097ca <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800979a:	2b01      	cmp	r3, #1
 800979c:	d10a      	bne.n	80097b4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097ac:	f043 0304 	orr.w	r3, r3, #4
 80097b0:	6013      	str	r3, [r2, #0]
 80097b2:	e014      	b.n	80097de <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097c2:	f023 0304 	bic.w	r3, r3, #4
 80097c6:	6013      	str	r3, [r2, #0]
 80097c8:	e009      	b.n	80097de <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097d8:	f023 0304 	bic.w	r3, r3, #4
 80097dc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097de:	2110      	movs	r1, #16
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff fe43 	bl	800946c <USB_FlushTxFifo>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7ff fe6d 	bl	80094d0 <USB_FlushRxFifo>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009800:	2300      	movs	r3, #0
 8009802:	613b      	str	r3, [r7, #16]
 8009804:	e015      	b.n	8009832 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	015a      	lsls	r2, r3, #5
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	4413      	add	r3, r2
 800980e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009812:	461a      	mov	r2, r3
 8009814:	f04f 33ff 	mov.w	r3, #4294967295
 8009818:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	4413      	add	r3, r2
 8009822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009826:	461a      	mov	r2, r3
 8009828:	2300      	movs	r3, #0
 800982a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	3301      	adds	r3, #1
 8009830:	613b      	str	r3, [r7, #16]
 8009832:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009836:	461a      	mov	r2, r3
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	4293      	cmp	r3, r2
 800983c:	d3e3      	bcc.n	8009806 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f04f 32ff 	mov.w	r2, #4294967295
 800984a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a18      	ldr	r2, [pc, #96]	; (80098b0 <USB_HostInit+0x170>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d10b      	bne.n	800986c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800985a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a15      	ldr	r2, [pc, #84]	; (80098b4 <USB_HostInit+0x174>)
 8009860:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a14      	ldr	r2, [pc, #80]	; (80098b8 <USB_HostInit+0x178>)
 8009866:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800986a:	e009      	b.n	8009880 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2280      	movs	r2, #128	; 0x80
 8009870:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a11      	ldr	r2, [pc, #68]	; (80098bc <USB_HostInit+0x17c>)
 8009876:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a11      	ldr	r2, [pc, #68]	; (80098c0 <USB_HostInit+0x180>)
 800987c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009880:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009884:	2b00      	cmp	r3, #0
 8009886:	d105      	bne.n	8009894 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	699b      	ldr	r3, [r3, #24]
 800988c:	f043 0210 	orr.w	r2, r3, #16
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	699a      	ldr	r2, [r3, #24]
 8009898:	4b0a      	ldr	r3, [pc, #40]	; (80098c4 <USB_HostInit+0x184>)
 800989a:	4313      	orrs	r3, r2
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3718      	adds	r7, #24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098ac:	b004      	add	sp, #16
 80098ae:	4770      	bx	lr
 80098b0:	40040000 	.word	0x40040000
 80098b4:	01000200 	.word	0x01000200
 80098b8:	00e00300 	.word	0x00e00300
 80098bc:	00600080 	.word	0x00600080
 80098c0:	004000e0 	.word	0x004000e0
 80098c4:	a3200008 	.word	0xa3200008

080098c8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	460b      	mov	r3, r1
 80098d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098e6:	f023 0303 	bic.w	r3, r3, #3
 80098ea:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	78fb      	ldrb	r3, [r7, #3]
 80098f6:	f003 0303 	and.w	r3, r3, #3
 80098fa:	68f9      	ldr	r1, [r7, #12]
 80098fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009900:	4313      	orrs	r3, r2
 8009902:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009904:	78fb      	ldrb	r3, [r7, #3]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d107      	bne.n	800991a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009910:	461a      	mov	r2, r3
 8009912:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009916:	6053      	str	r3, [r2, #4]
 8009918:	e00c      	b.n	8009934 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800991a:	78fb      	ldrb	r3, [r7, #3]
 800991c:	2b02      	cmp	r3, #2
 800991e:	d107      	bne.n	8009930 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009926:	461a      	mov	r2, r3
 8009928:	f241 7370 	movw	r3, #6000	; 0x1770
 800992c:	6053      	str	r3, [r2, #4]
 800992e:	e001      	b.n	8009934 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e000      	b.n	8009936 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3714      	adds	r7, #20
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b084      	sub	sp, #16
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800994e:	2300      	movs	r3, #0
 8009950:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009962:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800996c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009970:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009972:	2064      	movs	r0, #100	; 0x64
 8009974:	f7f9 f8a6 	bl	8002ac4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009984:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009986:	200a      	movs	r0, #10
 8009988:	f7f9 f89c 	bl	8002ac4 <HAL_Delay>

  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009996:	b480      	push	{r7}
 8009998:	b085      	sub	sp, #20
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	460b      	mov	r3, r1
 80099a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80099a6:	2300      	movs	r3, #0
 80099a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80099ba:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d109      	bne.n	80099da <USB_DriveVbus+0x44>
 80099c6:	78fb      	ldrb	r3, [r7, #3]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d106      	bne.n	80099da <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80099d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80099d8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099e4:	d109      	bne.n	80099fa <USB_DriveVbus+0x64>
 80099e6:	78fb      	ldrb	r3, [r7, #3]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d106      	bne.n	80099fa <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80099f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099f8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	0c5b      	lsrs	r3, r3, #17
 8009a26:	f003 0303 	and.w	r3, r3, #3
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b085      	sub	sp, #20
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	b29b      	uxth	r3, r3
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b088      	sub	sp, #32
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	4608      	mov	r0, r1
 8009a62:	4611      	mov	r1, r2
 8009a64:	461a      	mov	r2, r3
 8009a66:	4603      	mov	r3, r0
 8009a68:	70fb      	strb	r3, [r7, #3]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	70bb      	strb	r3, [r7, #2]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	015a      	lsls	r2, r3, #5
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	4413      	add	r3, r2
 8009a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a86:	461a      	mov	r2, r3
 8009a88:	f04f 33ff 	mov.w	r3, #4294967295
 8009a8c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009a8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	d87c      	bhi.n	8009b90 <USB_HC_Init+0x138>
 8009a96:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <USB_HC_Init+0x44>)
 8009a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9c:	08009aad 	.word	0x08009aad
 8009aa0:	08009b53 	.word	0x08009b53
 8009aa4:	08009aad 	.word	0x08009aad
 8009aa8:	08009b15 	.word	0x08009b15
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009aac:	78fb      	ldrb	r3, [r7, #3]
 8009aae:	015a      	lsls	r2, r3, #5
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ab8:	461a      	mov	r2, r3
 8009aba:	f240 439d 	movw	r3, #1181	; 0x49d
 8009abe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009ac0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	da10      	bge.n	8009aea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009ac8:	78fb      	ldrb	r3, [r7, #3]
 8009aca:	015a      	lsls	r2, r3, #5
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	4413      	add	r3, r2
 8009ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	78fa      	ldrb	r2, [r7, #3]
 8009ad8:	0151      	lsls	r1, r2, #5
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	440a      	add	r2, r1
 8009ade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ae6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009ae8:	e055      	b.n	8009b96 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a6f      	ldr	r2, [pc, #444]	; (8009cac <USB_HC_Init+0x254>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d151      	bne.n	8009b96 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009af2:	78fb      	ldrb	r3, [r7, #3]
 8009af4:	015a      	lsls	r2, r3, #5
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	4413      	add	r3, r2
 8009afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	78fa      	ldrb	r2, [r7, #3]
 8009b02:	0151      	lsls	r1, r2, #5
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	440a      	add	r2, r1
 8009b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b0c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009b10:	60d3      	str	r3, [r2, #12]
      break;
 8009b12:	e040      	b.n	8009b96 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009b14:	78fb      	ldrb	r3, [r7, #3]
 8009b16:	015a      	lsls	r2, r3, #5
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b20:	461a      	mov	r2, r3
 8009b22:	f240 639d 	movw	r3, #1693	; 0x69d
 8009b26:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009b28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	da34      	bge.n	8009b9a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009b30:	78fb      	ldrb	r3, [r7, #3]
 8009b32:	015a      	lsls	r2, r3, #5
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	4413      	add	r3, r2
 8009b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	78fa      	ldrb	r2, [r7, #3]
 8009b40:	0151      	lsls	r1, r2, #5
 8009b42:	693a      	ldr	r2, [r7, #16]
 8009b44:	440a      	add	r2, r1
 8009b46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b4e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009b50:	e023      	b.n	8009b9a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009b52:	78fb      	ldrb	r3, [r7, #3]
 8009b54:	015a      	lsls	r2, r3, #5
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f240 2325 	movw	r3, #549	; 0x225
 8009b64:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009b66:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	da17      	bge.n	8009b9e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009b6e:	78fb      	ldrb	r3, [r7, #3]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	78fa      	ldrb	r2, [r7, #3]
 8009b7e:	0151      	lsls	r1, r2, #5
 8009b80:	693a      	ldr	r2, [r7, #16]
 8009b82:	440a      	add	r2, r1
 8009b84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b88:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009b8c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009b8e:	e006      	b.n	8009b9e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	77fb      	strb	r3, [r7, #31]
      break;
 8009b94:	e004      	b.n	8009ba0 <USB_HC_Init+0x148>
      break;
 8009b96:	bf00      	nop
 8009b98:	e002      	b.n	8009ba0 <USB_HC_Init+0x148>
      break;
 8009b9a:	bf00      	nop
 8009b9c:	e000      	b.n	8009ba0 <USB_HC_Init+0x148>
      break;
 8009b9e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009ba0:	78fb      	ldrb	r3, [r7, #3]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bac:	461a      	mov	r2, r3
 8009bae:	2300      	movs	r3, #0
 8009bb0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009bb2:	78fb      	ldrb	r3, [r7, #3]
 8009bb4:	015a      	lsls	r2, r3, #5
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	4413      	add	r3, r2
 8009bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	78fa      	ldrb	r2, [r7, #3]
 8009bc2:	0151      	lsls	r1, r2, #5
 8009bc4:	693a      	ldr	r2, [r7, #16]
 8009bc6:	440a      	add	r2, r1
 8009bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009bcc:	f043 0302 	orr.w	r3, r3, #2
 8009bd0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bd8:	699a      	ldr	r2, [r3, #24]
 8009bda:	78fb      	ldrb	r3, [r7, #3]
 8009bdc:	f003 030f 	and.w	r3, r3, #15
 8009be0:	2101      	movs	r1, #1
 8009be2:	fa01 f303 	lsl.w	r3, r1, r3
 8009be6:	6939      	ldr	r1, [r7, #16]
 8009be8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009bec:	4313      	orrs	r3, r2
 8009bee:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009bfc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	da03      	bge.n	8009c0c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c08:	61bb      	str	r3, [r7, #24]
 8009c0a:	e001      	b.n	8009c10 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff fef9 	bl	8009a08 <USB_GetHostSpeed>
 8009c16:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009c18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d106      	bne.n	8009c2e <USB_HC_Init+0x1d6>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d003      	beq.n	8009c2e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009c26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009c2a:	617b      	str	r3, [r7, #20]
 8009c2c:	e001      	b.n	8009c32 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c32:	787b      	ldrb	r3, [r7, #1]
 8009c34:	059b      	lsls	r3, r3, #22
 8009c36:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009c3a:	78bb      	ldrb	r3, [r7, #2]
 8009c3c:	02db      	lsls	r3, r3, #11
 8009c3e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c42:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009c44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c48:	049b      	lsls	r3, r3, #18
 8009c4a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009c4e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009c50:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009c52:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009c56:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	431a      	orrs	r2, r3
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c60:	78fa      	ldrb	r2, [r7, #3]
 8009c62:	0151      	lsls	r1, r2, #5
 8009c64:	693a      	ldr	r2, [r7, #16]
 8009c66:	440a      	add	r2, r1
 8009c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009c70:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009c72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	d003      	beq.n	8009c82 <USB_HC_Init+0x22a>
 8009c7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d10f      	bne.n	8009ca2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009c82:	78fb      	ldrb	r3, [r7, #3]
 8009c84:	015a      	lsls	r2, r3, #5
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	4413      	add	r3, r2
 8009c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	78fa      	ldrb	r2, [r7, #3]
 8009c92:	0151      	lsls	r1, r2, #5
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	440a      	add	r2, r1
 8009c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ca0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009ca2:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3720      	adds	r7, #32
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	40040000 	.word	0x40040000

08009cb0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b08c      	sub	sp, #48	; 0x30
 8009cb4:	af02      	add	r7, sp, #8
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	785b      	ldrb	r3, [r3, #1]
 8009cc6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ccc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4a5d      	ldr	r2, [pc, #372]	; (8009e48 <USB_HC_StartXfer+0x198>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d12f      	bne.n	8009d36 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009cd6:	79fb      	ldrb	r3, [r7, #7]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d11c      	bne.n	8009d16 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	7c9b      	ldrb	r3, [r3, #18]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d003      	beq.n	8009cec <USB_HC_StartXfer+0x3c>
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	7c9b      	ldrb	r3, [r3, #18]
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d124      	bne.n	8009d36 <USB_HC_StartXfer+0x86>
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	799b      	ldrb	r3, [r3, #6]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d120      	bne.n	8009d36 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	015a      	lsls	r2, r3, #5
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	69fa      	ldr	r2, [r7, #28]
 8009d04:	0151      	lsls	r1, r2, #5
 8009d06:	6a3a      	ldr	r2, [r7, #32]
 8009d08:	440a      	add	r2, r1
 8009d0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d12:	60d3      	str	r3, [r2, #12]
 8009d14:	e00f      	b.n	8009d36 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	791b      	ldrb	r3, [r3, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d10b      	bne.n	8009d36 <USB_HC_StartXfer+0x86>
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	795b      	ldrb	r3, [r3, #5]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d107      	bne.n	8009d36 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	785b      	ldrb	r3, [r3, #1]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 fb6b 	bl	800a408 <USB_DoPing>
        return HAL_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	e232      	b.n	800a19c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	799b      	ldrb	r3, [r3, #6]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d158      	bne.n	8009df0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	78db      	ldrb	r3, [r3, #3]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d007      	beq.n	8009d5a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009d4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	8a92      	ldrh	r2, [r2, #20]
 8009d50:	fb03 f202 	mul.w	r2, r3, r2
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	61da      	str	r2, [r3, #28]
 8009d58:	e07c      	b.n	8009e54 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	7c9b      	ldrb	r3, [r3, #18]
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d130      	bne.n	8009dc4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	2bbc      	cmp	r3, #188	; 0xbc
 8009d68:	d918      	bls.n	8009d9c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	8a9b      	ldrh	r3, [r3, #20]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	69da      	ldr	r2, [r3, #28]
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d003      	beq.n	8009d8c <USB_HC_StartXfer+0xdc>
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	d103      	bne.n	8009d94 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	2202      	movs	r2, #2
 8009d90:	60da      	str	r2, [r3, #12]
 8009d92:	e05f      	b.n	8009e54 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	2201      	movs	r2, #1
 8009d98:	60da      	str	r2, [r3, #12]
 8009d9a:	e05b      	b.n	8009e54 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	6a1a      	ldr	r2, [r3, #32]
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d007      	beq.n	8009dbc <USB_HC_StartXfer+0x10c>
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d003      	beq.n	8009dbc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	2204      	movs	r2, #4
 8009db8:	60da      	str	r2, [r3, #12]
 8009dba:	e04b      	b.n	8009e54 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2203      	movs	r2, #3
 8009dc0:	60da      	str	r2, [r3, #12]
 8009dc2:	e047      	b.n	8009e54 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009dc4:	79fb      	ldrb	r3, [r7, #7]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d10d      	bne.n	8009de6 <USB_HC_StartXfer+0x136>
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	8a92      	ldrh	r2, [r2, #20]
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d907      	bls.n	8009de6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009dd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	8a92      	ldrh	r2, [r2, #20]
 8009ddc:	fb03 f202 	mul.w	r2, r3, r2
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	61da      	str	r2, [r3, #28]
 8009de4:	e036      	b.n	8009e54 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	6a1a      	ldr	r2, [r3, #32]
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	61da      	str	r2, [r3, #28]
 8009dee:	e031      	b.n	8009e54 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d018      	beq.n	8009e2a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	6a1b      	ldr	r3, [r3, #32]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	8a92      	ldrh	r2, [r2, #20]
 8009e00:	4413      	add	r3, r2
 8009e02:	3b01      	subs	r3, #1
 8009e04:	68ba      	ldr	r2, [r7, #8]
 8009e06:	8a92      	ldrh	r2, [r2, #20]
 8009e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e0c:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 8009e0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009e10:	8b7b      	ldrh	r3, [r7, #26]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d90b      	bls.n	8009e2e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009e16:	8b7b      	ldrh	r3, [r7, #26]
 8009e18:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009e1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	8a92      	ldrh	r2, [r2, #20]
 8009e20:	fb03 f202 	mul.w	r2, r3, r2
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	61da      	str	r2, [r3, #28]
 8009e28:	e001      	b.n	8009e2e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	78db      	ldrb	r3, [r3, #3]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00a      	beq.n	8009e4c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009e36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	8a92      	ldrh	r2, [r2, #20]
 8009e3c:	fb03 f202 	mul.w	r2, r3, r2
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	61da      	str	r2, [r3, #28]
 8009e44:	e006      	b.n	8009e54 <USB_HC_StartXfer+0x1a4>
 8009e46:	bf00      	nop
 8009e48:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	6a1a      	ldr	r2, [r3, #32]
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	69db      	ldr	r3, [r3, #28]
 8009e58:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009e5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e5e:	04d9      	lsls	r1, r3, #19
 8009e60:	4ba3      	ldr	r3, [pc, #652]	; (800a0f0 <USB_HC_StartXfer+0x440>)
 8009e62:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009e64:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	7d9b      	ldrb	r3, [r3, #22]
 8009e6a:	075b      	lsls	r3, r3, #29
 8009e6c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009e70:	69f9      	ldr	r1, [r7, #28]
 8009e72:	0148      	lsls	r0, r1, #5
 8009e74:	6a39      	ldr	r1, [r7, #32]
 8009e76:	4401      	add	r1, r0
 8009e78:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009e7c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009e7e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009e80:	79fb      	ldrb	r3, [r7, #7]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d009      	beq.n	8009e9a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	6999      	ldr	r1, [r3, #24]
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	015a      	lsls	r2, r3, #5
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	4413      	add	r3, r2
 8009e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e96:	460a      	mov	r2, r1
 8009e98:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bf0c      	ite	eq
 8009eaa:	2301      	moveq	r3, #1
 8009eac:	2300      	movne	r3, #0
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	015a      	lsls	r2, r3, #5
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	4413      	add	r3, r2
 8009eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	69fa      	ldr	r2, [r7, #28]
 8009ec2:	0151      	lsls	r1, r2, #5
 8009ec4:	6a3a      	ldr	r2, [r7, #32]
 8009ec6:	440a      	add	r2, r1
 8009ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ecc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009ed0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	015a      	lsls	r2, r3, #5
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	7e7b      	ldrb	r3, [r7, #25]
 8009ee2:	075b      	lsls	r3, r3, #29
 8009ee4:	69f9      	ldr	r1, [r7, #28]
 8009ee6:	0148      	lsls	r0, r1, #5
 8009ee8:	6a39      	ldr	r1, [r7, #32]
 8009eea:	4401      	add	r1, r0
 8009eec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	799b      	ldrb	r3, [r3, #6]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	f040 80c3 	bne.w	800a084 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	7c5b      	ldrb	r3, [r3, #17]
 8009f02:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009f04:	68ba      	ldr	r2, [r7, #8]
 8009f06:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	69fa      	ldr	r2, [r7, #28]
 8009f0c:	0151      	lsls	r1, r2, #5
 8009f0e:	6a3a      	ldr	r2, [r7, #32]
 8009f10:	440a      	add	r2, r1
 8009f12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009f16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009f1a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	015a      	lsls	r2, r3, #5
 8009f20:	6a3b      	ldr	r3, [r7, #32]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	69fa      	ldr	r2, [r7, #28]
 8009f2c:	0151      	lsls	r1, r2, #5
 8009f2e:	6a3a      	ldr	r2, [r7, #32]
 8009f30:	440a      	add	r2, r1
 8009f32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f36:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009f3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	79db      	ldrb	r3, [r3, #7]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d123      	bne.n	8009f8c <USB_HC_StartXfer+0x2dc>
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	78db      	ldrb	r3, [r3, #3]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d11f      	bne.n	8009f8c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	015a      	lsls	r2, r3, #5
 8009f50:	6a3b      	ldr	r3, [r7, #32]
 8009f52:	4413      	add	r3, r2
 8009f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	69fa      	ldr	r2, [r7, #28]
 8009f5c:	0151      	lsls	r1, r2, #5
 8009f5e:	6a3a      	ldr	r2, [r7, #32]
 8009f60:	440a      	add	r2, r1
 8009f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f6a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	6a3b      	ldr	r3, [r7, #32]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	69fa      	ldr	r2, [r7, #28]
 8009f7c:	0151      	lsls	r1, r2, #5
 8009f7e:	6a3a      	ldr	r2, [r7, #32]
 8009f80:	440a      	add	r2, r1
 8009f82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f8a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	7c9b      	ldrb	r3, [r3, #18]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d003      	beq.n	8009f9c <USB_HC_StartXfer+0x2ec>
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	7c9b      	ldrb	r3, [r3, #18]
 8009f98:	2b03      	cmp	r3, #3
 8009f9a:	d117      	bne.n	8009fcc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d113      	bne.n	8009fcc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	78db      	ldrb	r3, [r3, #3]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d10f      	bne.n	8009fcc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	69fa      	ldr	r2, [r7, #28]
 8009fbc:	0151      	lsls	r1, r2, #5
 8009fbe:	6a3a      	ldr	r2, [r7, #32]
 8009fc0:	440a      	add	r2, r1
 8009fc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fca:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	7c9b      	ldrb	r3, [r3, #18]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d162      	bne.n	800a09a <USB_HC_StartXfer+0x3ea>
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	78db      	ldrb	r3, [r3, #3]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d15e      	bne.n	800a09a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	2b03      	cmp	r3, #3
 8009fe4:	d858      	bhi.n	800a098 <USB_HC_StartXfer+0x3e8>
 8009fe6:	a201      	add	r2, pc, #4	; (adr r2, 8009fec <USB_HC_StartXfer+0x33c>)
 8009fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fec:	08009ffd 	.word	0x08009ffd
 8009ff0:	0800a01f 	.word	0x0800a01f
 8009ff4:	0800a041 	.word	0x0800a041
 8009ff8:	0800a063 	.word	0x0800a063
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	015a      	lsls	r2, r3, #5
 800a000:	6a3b      	ldr	r3, [r7, #32]
 800a002:	4413      	add	r3, r2
 800a004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	69fa      	ldr	r2, [r7, #28]
 800a00c:	0151      	lsls	r1, r2, #5
 800a00e:	6a3a      	ldr	r2, [r7, #32]
 800a010:	440a      	add	r2, r1
 800a012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a01a:	6053      	str	r3, [r2, #4]
          break;
 800a01c:	e03d      	b.n	800a09a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	015a      	lsls	r2, r3, #5
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	4413      	add	r3, r2
 800a026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	69fa      	ldr	r2, [r7, #28]
 800a02e:	0151      	lsls	r1, r2, #5
 800a030:	6a3a      	ldr	r2, [r7, #32]
 800a032:	440a      	add	r2, r1
 800a034:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a038:	f043 030e 	orr.w	r3, r3, #14
 800a03c:	6053      	str	r3, [r2, #4]
          break;
 800a03e:	e02c      	b.n	800a09a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	4413      	add	r3, r2
 800a048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	69fa      	ldr	r2, [r7, #28]
 800a050:	0151      	lsls	r1, r2, #5
 800a052:	6a3a      	ldr	r2, [r7, #32]
 800a054:	440a      	add	r2, r1
 800a056:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a05a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a05e:	6053      	str	r3, [r2, #4]
          break;
 800a060:	e01b      	b.n	800a09a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	015a      	lsls	r2, r3, #5
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	4413      	add	r3, r2
 800a06a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	69fa      	ldr	r2, [r7, #28]
 800a072:	0151      	lsls	r1, r2, #5
 800a074:	6a3a      	ldr	r2, [r7, #32]
 800a076:	440a      	add	r2, r1
 800a078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a07c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a080:	6053      	str	r3, [r2, #4]
          break;
 800a082:	e00a      	b.n	800a09a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	6a3b      	ldr	r3, [r7, #32]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a090:	461a      	mov	r2, r3
 800a092:	2300      	movs	r3, #0
 800a094:	6053      	str	r3, [r2, #4]
 800a096:	e000      	b.n	800a09a <USB_HC_StartXfer+0x3ea>
          break;
 800a098:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	015a      	lsls	r2, r3, #5
 800a09e:	6a3b      	ldr	r3, [r7, #32]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a0b0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	78db      	ldrb	r3, [r3, #3]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d004      	beq.n	800a0c4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0c0:	613b      	str	r3, [r7, #16]
 800a0c2:	e003      	b.n	800a0cc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0ca:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0d2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	015a      	lsls	r2, r3, #5
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a0e6:	79fb      	ldrb	r3, [r7, #7]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d003      	beq.n	800a0f4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	e055      	b.n	800a19c <USB_HC_StartXfer+0x4ec>
 800a0f0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	78db      	ldrb	r3, [r3, #3]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d14e      	bne.n	800a19a <USB_HC_StartXfer+0x4ea>
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	6a1b      	ldr	r3, [r3, #32]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d04a      	beq.n	800a19a <USB_HC_StartXfer+0x4ea>
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	79db      	ldrb	r3, [r3, #7]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d146      	bne.n	800a19a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	7c9b      	ldrb	r3, [r3, #18]
 800a110:	2b03      	cmp	r3, #3
 800a112:	d831      	bhi.n	800a178 <USB_HC_StartXfer+0x4c8>
 800a114:	a201      	add	r2, pc, #4	; (adr r2, 800a11c <USB_HC_StartXfer+0x46c>)
 800a116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a11a:	bf00      	nop
 800a11c:	0800a12d 	.word	0x0800a12d
 800a120:	0800a151 	.word	0x0800a151
 800a124:	0800a12d 	.word	0x0800a12d
 800a128:	0800a151 	.word	0x0800a151
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	6a1b      	ldr	r3, [r3, #32]
 800a130:	3303      	adds	r3, #3
 800a132:	089b      	lsrs	r3, r3, #2
 800a134:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a136:	8afa      	ldrh	r2, [r7, #22]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	429a      	cmp	r2, r3
 800a140:	d91c      	bls.n	800a17c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	f043 0220 	orr.w	r2, r3, #32
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	619a      	str	r2, [r3, #24]
        }
        break;
 800a14e:	e015      	b.n	800a17c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	6a1b      	ldr	r3, [r3, #32]
 800a154:	3303      	adds	r3, #3
 800a156:	089b      	lsrs	r3, r3, #2
 800a158:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a15a:	8afa      	ldrh	r2, [r7, #22]
 800a15c:	6a3b      	ldr	r3, [r7, #32]
 800a15e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	b29b      	uxth	r3, r3
 800a166:	429a      	cmp	r2, r3
 800a168:	d90a      	bls.n	800a180 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	699b      	ldr	r3, [r3, #24]
 800a16e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	619a      	str	r2, [r3, #24]
        }
        break;
 800a176:	e003      	b.n	800a180 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a178:	bf00      	nop
 800a17a:	e002      	b.n	800a182 <USB_HC_StartXfer+0x4d2>
        break;
 800a17c:	bf00      	nop
 800a17e:	e000      	b.n	800a182 <USB_HC_StartXfer+0x4d2>
        break;
 800a180:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	6999      	ldr	r1, [r3, #24]
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	785a      	ldrb	r2, [r3, #1]
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	6a1b      	ldr	r3, [r3, #32]
 800a18e:	b29b      	uxth	r3, r3
 800a190:	2000      	movs	r0, #0
 800a192:	9000      	str	r0, [sp, #0]
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f7ff f9c9 	bl	800952c <USB_WritePacket>
  }

  return HAL_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3728      	adds	r7, #40	; 0x28
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	b29b      	uxth	r3, r3
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a1c6:	b480      	push	{r7}
 800a1c8:	b089      	sub	sp, #36	; 0x24
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a1d6:	78fb      	ldrb	r3, [r7, #3]
 800a1d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	015a      	lsls	r2, r3, #5
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	0c9b      	lsrs	r3, r3, #18
 800a1ee:	f003 0303 	and.w	r3, r3, #3
 800a1f2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	015a      	lsls	r2, r3, #5
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	0fdb      	lsrs	r3, r3, #31
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	015a      	lsls	r2, r3, #5
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	4413      	add	r3, r2
 800a212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	0fdb      	lsrs	r3, r3, #31
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	f003 0320 	and.w	r3, r3, #32
 800a228:	2b20      	cmp	r3, #32
 800a22a:	d10d      	bne.n	800a248 <USB_HC_Halt+0x82>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10a      	bne.n	800a248 <USB_HC_Halt+0x82>
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d005      	beq.n	800a244 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d002      	beq.n	800a244 <USB_HC_Halt+0x7e>
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	2b03      	cmp	r3, #3
 800a242:	d101      	bne.n	800a248 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a244:	2300      	movs	r3, #0
 800a246:	e0d8      	b.n	800a3fa <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d002      	beq.n	800a254 <USB_HC_Halt+0x8e>
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	2b02      	cmp	r3, #2
 800a252:	d173      	bne.n	800a33c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	015a      	lsls	r2, r3, #5
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	4413      	add	r3, r2
 800a25c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	69ba      	ldr	r2, [r7, #24]
 800a264:	0151      	lsls	r1, r2, #5
 800a266:	69fa      	ldr	r2, [r7, #28]
 800a268:	440a      	add	r2, r1
 800a26a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a26e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a272:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	f003 0320 	and.w	r3, r3, #32
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d14a      	bne.n	800a316 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a284:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d133      	bne.n	800a2f4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	4413      	add	r3, r2
 800a294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	69ba      	ldr	r2, [r7, #24]
 800a29c:	0151      	lsls	r1, r2, #5
 800a29e:	69fa      	ldr	r2, [r7, #28]
 800a2a0:	440a      	add	r2, r1
 800a2a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2aa:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	69ba      	ldr	r2, [r7, #24]
 800a2bc:	0151      	lsls	r1, r2, #5
 800a2be:	69fa      	ldr	r2, [r7, #28]
 800a2c0:	440a      	add	r2, r1
 800a2c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a2ca:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2d8:	d82e      	bhi.n	800a338 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	015a      	lsls	r2, r3, #5
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2f0:	d0ec      	beq.n	800a2cc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a2f2:	e081      	b.n	800a3f8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	69ba      	ldr	r2, [r7, #24]
 800a304:	0151      	lsls	r1, r2, #5
 800a306:	69fa      	ldr	r2, [r7, #28]
 800a308:	440a      	add	r2, r1
 800a30a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a30e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a312:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a314:	e070      	b.n	800a3f8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	015a      	lsls	r2, r3, #5
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	4413      	add	r3, r2
 800a31e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	69ba      	ldr	r2, [r7, #24]
 800a326:	0151      	lsls	r1, r2, #5
 800a328:	69fa      	ldr	r2, [r7, #28]
 800a32a:	440a      	add	r2, r1
 800a32c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a330:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a334:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a336:	e05f      	b.n	800a3f8 <USB_HC_Halt+0x232>
            break;
 800a338:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a33a:	e05d      	b.n	800a3f8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	015a      	lsls	r2, r3, #5
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	4413      	add	r3, r2
 800a344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	69ba      	ldr	r2, [r7, #24]
 800a34c:	0151      	lsls	r1, r2, #5
 800a34e:	69fa      	ldr	r2, [r7, #28]
 800a350:	440a      	add	r2, r1
 800a352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a356:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a35a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d133      	bne.n	800a3d4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	015a      	lsls	r2, r3, #5
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	4413      	add	r3, r2
 800a374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	69ba      	ldr	r2, [r7, #24]
 800a37c:	0151      	lsls	r1, r2, #5
 800a37e:	69fa      	ldr	r2, [r7, #28]
 800a380:	440a      	add	r2, r1
 800a382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a386:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a38a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a38c:	69bb      	ldr	r3, [r7, #24]
 800a38e:	015a      	lsls	r2, r3, #5
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	4413      	add	r3, r2
 800a394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	69ba      	ldr	r2, [r7, #24]
 800a39c:	0151      	lsls	r1, r2, #5
 800a39e:	69fa      	ldr	r2, [r7, #28]
 800a3a0:	440a      	add	r2, r1
 800a3a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3aa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3b8:	d81d      	bhi.n	800a3f6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	015a      	lsls	r2, r3, #5
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3d0:	d0ec      	beq.n	800a3ac <USB_HC_Halt+0x1e6>
 800a3d2:	e011      	b.n	800a3f8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	015a      	lsls	r2, r3, #5
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	4413      	add	r3, r2
 800a3dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	69ba      	ldr	r2, [r7, #24]
 800a3e4:	0151      	lsls	r1, r2, #5
 800a3e6:	69fa      	ldr	r2, [r7, #28]
 800a3e8:	440a      	add	r2, r1
 800a3ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a3f2:	6013      	str	r3, [r2, #0]
 800a3f4:	e000      	b.n	800a3f8 <USB_HC_Halt+0x232>
          break;
 800a3f6:	bf00      	nop
    }
  }

  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3724      	adds	r7, #36	; 0x24
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr
	...

0800a408 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	460b      	mov	r3, r1
 800a412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a418:	78fb      	ldrb	r3, [r7, #3]
 800a41a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a41c:	2301      	movs	r3, #1
 800a41e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	04da      	lsls	r2, r3, #19
 800a424:	4b15      	ldr	r3, [pc, #84]	; (800a47c <USB_DoPing+0x74>)
 800a426:	4013      	ands	r3, r2
 800a428:	693a      	ldr	r2, [r7, #16]
 800a42a:	0151      	lsls	r1, r2, #5
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	440a      	add	r2, r1
 800a430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a438:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	015a      	lsls	r2, r3, #5
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	4413      	add	r3, r2
 800a442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a450:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a458:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	015a      	lsls	r2, r3, #5
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	4413      	add	r3, r2
 800a462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a466:	461a      	mov	r2, r3
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	371c      	adds	r7, #28
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	1ff80000 	.word	0x1ff80000

0800a480 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b088      	sub	sp, #32
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a490:	2300      	movs	r3, #0
 800a492:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7fe ff8c 	bl	80093b2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a49a:	2110      	movs	r1, #16
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7fe ffe5 	bl	800946c <USB_FlushTxFifo>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d001      	beq.n	800a4ac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7ff f80f 	bl	80094d0 <USB_FlushRxFifo>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d001      	beq.n	800a4bc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a4bc:	2300      	movs	r3, #0
 800a4be:	61bb      	str	r3, [r7, #24]
 800a4c0:	e01f      	b.n	800a502 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	015a      	lsls	r2, r3, #5
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a4e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	3301      	adds	r3, #1
 800a500:	61bb      	str	r3, [r7, #24]
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	2b0f      	cmp	r3, #15
 800a506:	d9dc      	bls.n	800a4c2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a508:	2300      	movs	r3, #0
 800a50a:	61bb      	str	r3, [r7, #24]
 800a50c:	e034      	b.n	800a578 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	015a      	lsls	r2, r3, #5
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	4413      	add	r3, r2
 800a516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a524:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a52c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a534:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	015a      	lsls	r2, r3, #5
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	4413      	add	r3, r2
 800a53e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a542:	461a      	mov	r2, r3
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3301      	adds	r3, #1
 800a54c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a554:	d80c      	bhi.n	800a570 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	015a      	lsls	r2, r3, #5
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	4413      	add	r3, r2
 800a55e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a56c:	d0ec      	beq.n	800a548 <USB_StopHost+0xc8>
 800a56e:	e000      	b.n	800a572 <USB_StopHost+0xf2>
        break;
 800a570:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	3301      	adds	r3, #1
 800a576:	61bb      	str	r3, [r7, #24]
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	2b0f      	cmp	r3, #15
 800a57c:	d9c7      	bls.n	800a50e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a584:	461a      	mov	r2, r3
 800a586:	f04f 33ff 	mov.w	r3, #4294967295
 800a58a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f04f 32ff 	mov.w	r2, #4294967295
 800a592:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f7fe fefb 	bl	8009390 <USB_EnableGlobalInt>

  return ret;
 800a59a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3720      	adds	r7, #32
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a5a4:	b590      	push	{r4, r7, lr}
 800a5a6:	b089      	sub	sp, #36	; 0x24
 800a5a8:	af04      	add	r7, sp, #16
 800a5aa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	2102      	movs	r1, #2
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fc85 	bl	800aec2 <USBH_FindInterface>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
 800a5be:	2bff      	cmp	r3, #255	; 0xff
 800a5c0:	d002      	beq.n	800a5c8 <USBH_CDC_InterfaceInit+0x24>
 800a5c2:	7bfb      	ldrb	r3, [r7, #15]
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d901      	bls.n	800a5cc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	e13d      	b.n	800a848 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a5cc:	7bfb      	ldrb	r3, [r7, #15]
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 fc5a 	bl	800ae8a <USBH_SelectInterface>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a5da:	7bbb      	ldrb	r3, [r7, #14]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	e131      	b.n	800a848 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a5ea:	2050      	movs	r0, #80	; 0x50
 800a5ec:	f002 fb78 	bl	800cce0 <malloc>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5fa:	69db      	ldr	r3, [r3, #28]
 800a5fc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d101      	bne.n	800a608 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a604:	2302      	movs	r3, #2
 800a606:	e11f      	b.n	800a848 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a608:	2250      	movs	r2, #80	; 0x50
 800a60a:	2100      	movs	r1, #0
 800a60c:	68b8      	ldr	r0, [r7, #8]
 800a60e:	f004 f9dc 	bl	800e9ca <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a612:	7bfb      	ldrb	r3, [r7, #15]
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	211a      	movs	r1, #26
 800a618:	fb01 f303 	mul.w	r3, r1, r3
 800a61c:	4413      	add	r3, r2
 800a61e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	b25b      	sxtb	r3, r3
 800a626:	2b00      	cmp	r3, #0
 800a628:	da15      	bge.n	800a656 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	211a      	movs	r1, #26
 800a630:	fb01 f303 	mul.w	r3, r1, r3
 800a634:	4413      	add	r3, r2
 800a636:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a63a:	781a      	ldrb	r2, [r3, #0]
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a640:	7bfb      	ldrb	r3, [r7, #15]
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	211a      	movs	r1, #26
 800a646:	fb01 f303 	mul.w	r3, r1, r3
 800a64a:	4413      	add	r3, r2
 800a64c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a650:	881a      	ldrh	r2, [r3, #0]
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	785b      	ldrb	r3, [r3, #1]
 800a65a:	4619      	mov	r1, r3
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f001 ffce 	bl	800c5fe <USBH_AllocPipe>
 800a662:	4603      	mov	r3, r0
 800a664:	461a      	mov	r2, r3
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	7819      	ldrb	r1, [r3, #0]
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	7858      	ldrb	r0, [r3, #1]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a67e:	68ba      	ldr	r2, [r7, #8]
 800a680:	8952      	ldrh	r2, [r2, #10]
 800a682:	9202      	str	r2, [sp, #8]
 800a684:	2203      	movs	r2, #3
 800a686:	9201      	str	r2, [sp, #4]
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	4623      	mov	r3, r4
 800a68c:	4602      	mov	r2, r0
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f001 ff86 	bl	800c5a0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	2200      	movs	r2, #0
 800a69a:	4619      	mov	r1, r3
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f002 fa95 	bl	800cbcc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	210a      	movs	r1, #10
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fc0a 	bl	800aec2 <USBH_FindInterface>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a6b2:	7bfb      	ldrb	r3, [r7, #15]
 800a6b4:	2bff      	cmp	r3, #255	; 0xff
 800a6b6:	d002      	beq.n	800a6be <USBH_CDC_InterfaceInit+0x11a>
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d901      	bls.n	800a6c2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a6be:	2302      	movs	r3, #2
 800a6c0:	e0c2      	b.n	800a848 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	211a      	movs	r1, #26
 800a6c8:	fb01 f303 	mul.w	r3, r1, r3
 800a6cc:	4413      	add	r3, r2
 800a6ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	b25b      	sxtb	r3, r3
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	da16      	bge.n	800a708 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a6da:	7bfb      	ldrb	r3, [r7, #15]
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	211a      	movs	r1, #26
 800a6e0:	fb01 f303 	mul.w	r3, r1, r3
 800a6e4:	4413      	add	r3, r2
 800a6e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a6ea:	781a      	ldrb	r2, [r3, #0]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a6f0:	7bfb      	ldrb	r3, [r7, #15]
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	211a      	movs	r1, #26
 800a6f6:	fb01 f303 	mul.w	r3, r1, r3
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a700:	881a      	ldrh	r2, [r3, #0]
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	835a      	strh	r2, [r3, #26]
 800a706:	e015      	b.n	800a734 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a708:	7bfb      	ldrb	r3, [r7, #15]
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	211a      	movs	r1, #26
 800a70e:	fb01 f303 	mul.w	r3, r1, r3
 800a712:	4413      	add	r3, r2
 800a714:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a718:	781a      	ldrb	r2, [r3, #0]
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a71e:	7bfb      	ldrb	r3, [r7, #15]
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	211a      	movs	r1, #26
 800a724:	fb01 f303 	mul.w	r3, r1, r3
 800a728:	4413      	add	r3, r2
 800a72a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a72e:	881a      	ldrh	r2, [r3, #0]
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a734:	7bfb      	ldrb	r3, [r7, #15]
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	211a      	movs	r1, #26
 800a73a:	fb01 f303 	mul.w	r3, r1, r3
 800a73e:	4413      	add	r3, r2
 800a740:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	b25b      	sxtb	r3, r3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	da16      	bge.n	800a77a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a74c:	7bfb      	ldrb	r3, [r7, #15]
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	211a      	movs	r1, #26
 800a752:	fb01 f303 	mul.w	r3, r1, r3
 800a756:	4413      	add	r3, r2
 800a758:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a75c:	781a      	ldrb	r2, [r3, #0]
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a762:	7bfb      	ldrb	r3, [r7, #15]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	211a      	movs	r1, #26
 800a768:	fb01 f303 	mul.w	r3, r1, r3
 800a76c:	4413      	add	r3, r2
 800a76e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a772:	881a      	ldrh	r2, [r3, #0]
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	835a      	strh	r2, [r3, #26]
 800a778:	e015      	b.n	800a7a6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a77a:	7bfb      	ldrb	r3, [r7, #15]
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	211a      	movs	r1, #26
 800a780:	fb01 f303 	mul.w	r3, r1, r3
 800a784:	4413      	add	r3, r2
 800a786:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a78a:	781a      	ldrb	r2, [r3, #0]
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a790:	7bfb      	ldrb	r3, [r7, #15]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	211a      	movs	r1, #26
 800a796:	fb01 f303 	mul.w	r3, r1, r3
 800a79a:	4413      	add	r3, r2
 800a79c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a7a0:	881a      	ldrh	r2, [r3, #0]
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	7b9b      	ldrb	r3, [r3, #14]
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f001 ff26 	bl	800c5fe <USBH_AllocPipe>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	7bdb      	ldrb	r3, [r3, #15]
 800a7be:	4619      	mov	r1, r3
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f001 ff1c 	bl	800c5fe <USBH_AllocPipe>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	7b59      	ldrb	r1, [r3, #13]
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	7b98      	ldrb	r0, [r3, #14]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	8b12      	ldrh	r2, [r2, #24]
 800a7e6:	9202      	str	r2, [sp, #8]
 800a7e8:	2202      	movs	r2, #2
 800a7ea:	9201      	str	r2, [sp, #4]
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	4623      	mov	r3, r4
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f001 fed4 	bl	800c5a0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	7b19      	ldrb	r1, [r3, #12]
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	7bd8      	ldrb	r0, [r3, #15]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	8b52      	ldrh	r2, [r2, #26]
 800a810:	9202      	str	r2, [sp, #8]
 800a812:	2202      	movs	r2, #2
 800a814:	9201      	str	r2, [sp, #4]
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	4623      	mov	r3, r4
 800a81a:	4602      	mov	r2, r0
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f001 febf 	bl	800c5a0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2200      	movs	r2, #0
 800a826:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	7b5b      	ldrb	r3, [r3, #13]
 800a82e:	2200      	movs	r2, #0
 800a830:	4619      	mov	r1, r3
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f002 f9ca 	bl	800cbcc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	7b1b      	ldrb	r3, [r3, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	4619      	mov	r1, r3
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f002 f9c3 	bl	800cbcc <USBH_LL_SetToggle>

  return USBH_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd90      	pop	{r4, r7, pc}

0800a850 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a85e:	69db      	ldr	r3, [r3, #28]
 800a860:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00e      	beq.n	800a888 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	4619      	mov	r1, r3
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f001 feb4 	bl	800c5de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	4619      	mov	r1, r3
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f001 fedf 	bl	800c640 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2200      	movs	r2, #0
 800a886:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	7b1b      	ldrb	r3, [r3, #12]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00e      	beq.n	800a8ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	7b1b      	ldrb	r3, [r3, #12]
 800a894:	4619      	mov	r1, r3
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f001 fea1 	bl	800c5de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	7b1b      	ldrb	r3, [r3, #12]
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f001 fecc 	bl	800c640 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	7b5b      	ldrb	r3, [r3, #13]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00e      	beq.n	800a8d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	7b5b      	ldrb	r3, [r3, #13]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f001 fe8e 	bl	800c5de <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	7b5b      	ldrb	r3, [r3, #13]
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f001 feb9 	bl	800c640 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8da:	69db      	ldr	r3, [r3, #28]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00b      	beq.n	800a8f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8e6:	69db      	ldr	r3, [r3, #28]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f002 fa01 	bl	800ccf0 <free>
    phost->pActiveClass->pData = 0U;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	3340      	adds	r3, #64	; 0x40
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f8b1 	bl	800aa82 <GetLineCoding>
 800a920:	4603      	mov	r3, r0
 800a922:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800a924:	7afb      	ldrb	r3, [r7, #11]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d105      	bne.n	800a936 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a930:	2102      	movs	r1, #2
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800a936:	7afb      	ldrb	r3, [r7, #11]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a948:	2301      	movs	r3, #1
 800a94a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800a94c:	2300      	movs	r3, #0
 800a94e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a956:	69db      	ldr	r3, [r3, #28]
 800a958:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800a960:	2b04      	cmp	r3, #4
 800a962:	d877      	bhi.n	800aa54 <USBH_CDC_Process+0x114>
 800a964:	a201      	add	r2, pc, #4	; (adr r2, 800a96c <USBH_CDC_Process+0x2c>)
 800a966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a96a:	bf00      	nop
 800a96c:	0800a981 	.word	0x0800a981
 800a970:	0800a987 	.word	0x0800a987
 800a974:	0800a9b7 	.word	0x0800a9b7
 800a978:	0800aa2b 	.word	0x0800aa2b
 800a97c:	0800aa39 	.word	0x0800aa39
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	73fb      	strb	r3, [r7, #15]
      break;
 800a984:	e06d      	b.n	800aa62 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f897 	bl	800aac0 <SetLineCoding>
 800a992:	4603      	mov	r3, r0
 800a994:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a996:	7bbb      	ldrb	r3, [r7, #14]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d104      	bne.n	800a9a6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	2202      	movs	r2, #2
 800a9a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800a9a4:	e058      	b.n	800aa58 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800a9a6:	7bbb      	ldrb	r3, [r7, #14]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d055      	beq.n	800aa58 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	2204      	movs	r2, #4
 800a9b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800a9b4:	e050      	b.n	800aa58 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	3340      	adds	r3, #64	; 0x40
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f860 	bl	800aa82 <GetLineCoding>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d126      	bne.n	800aa1a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9de:	791b      	ldrb	r3, [r3, #4]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d13b      	bne.n	800aa5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9ee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d133      	bne.n	800aa5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9fe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d12b      	bne.n	800aa5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa0c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d124      	bne.n	800aa5c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f958 	bl	800acc8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800aa18:	e020      	b.n	800aa5c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800aa1a:	7bbb      	ldrb	r3, [r7, #14]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d01d      	beq.n	800aa5c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	2204      	movs	r2, #4
 800aa24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800aa28:	e018      	b.n	800aa5c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 f867 	bl	800aafe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f8da 	bl	800abea <CDC_ProcessReception>
      break;
 800aa36:	e014      	b.n	800aa62 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800aa38:	2100      	movs	r1, #0
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f001 f822 	bl	800ba84 <USBH_ClrFeature>
 800aa40:	4603      	mov	r3, r0
 800aa42:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800aa44:	7bbb      	ldrb	r3, [r7, #14]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d10a      	bne.n	800aa60 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800aa52:	e005      	b.n	800aa60 <USBH_CDC_Process+0x120>

    default:
      break;
 800aa54:	bf00      	nop
 800aa56:	e004      	b.n	800aa62 <USBH_CDC_Process+0x122>
      break;
 800aa58:	bf00      	nop
 800aa5a:	e002      	b.n	800aa62 <USBH_CDC_Process+0x122>
      break;
 800aa5c:	bf00      	nop
 800aa5e:	e000      	b.n	800aa62 <USBH_CDC_Process+0x122>
      break;
 800aa60:	bf00      	nop

  }

  return status;
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	370c      	adds	r7, #12
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr

0800aa82 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b082      	sub	sp, #8
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	22a1      	movs	r2, #161	; 0xa1
 800aa90:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2221      	movs	r2, #33	; 0x21
 800aa96:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2207      	movs	r2, #7
 800aaa8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	2207      	movs	r2, #7
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f001 fb23 	bl	800c0fc <USBH_CtlReq>
 800aab6:	4603      	mov	r3, r0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2221      	movs	r2, #33	; 0x21
 800aace:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2220      	movs	r2, #32
 800aad4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2207      	movs	r2, #7
 800aae6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	2207      	movs	r2, #7
 800aaec:	4619      	mov	r1, r3
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f001 fb04 	bl	800c0fc <USBH_CtlReq>
 800aaf4:	4603      	mov	r3, r0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b086      	sub	sp, #24
 800ab02:	af02      	add	r7, sp, #8
 800ab04:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab0c:	69db      	ldr	r3, [r3, #28]
 800ab0e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ab10:	2300      	movs	r3, #0
 800ab12:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d002      	beq.n	800ab24 <CDC_ProcessTransmission+0x26>
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d023      	beq.n	800ab6a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ab22:	e05e      	b.n	800abe2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	8b12      	ldrh	r2, [r2, #24]
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d90b      	bls.n	800ab48 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	69d9      	ldr	r1, [r3, #28]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	8b1a      	ldrh	r2, [r3, #24]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	7b5b      	ldrb	r3, [r3, #13]
 800ab3c:	2001      	movs	r0, #1
 800ab3e:	9000      	str	r0, [sp, #0]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f001 fcea 	bl	800c51a <USBH_BulkSendData>
 800ab46:	e00b      	b.n	800ab60 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	7b5b      	ldrb	r3, [r3, #13]
 800ab56:	2001      	movs	r0, #1
 800ab58:	9000      	str	r0, [sp, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f001 fcdd 	bl	800c51a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2202      	movs	r2, #2
 800ab64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ab68:	e03b      	b.n	800abe2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	7b5b      	ldrb	r3, [r3, #13]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f002 f801 	bl	800cb78 <USBH_LL_GetURBState>
 800ab76:	4603      	mov	r3, r0
 800ab78:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ab7a:	7afb      	ldrb	r3, [r7, #11]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d128      	bne.n	800abd2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	8b12      	ldrh	r2, [r2, #24]
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d90e      	bls.n	800abaa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	8b12      	ldrh	r2, [r2, #24]
 800ab94:	1a9a      	subs	r2, r3, r2
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	69db      	ldr	r3, [r3, #28]
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	8b12      	ldrh	r2, [r2, #24]
 800aba2:	441a      	add	r2, r3
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	61da      	str	r2, [r3, #28]
 800aba8:	e002      	b.n	800abb0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2200      	movs	r2, #0
 800abae:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d004      	beq.n	800abc2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800abc0:	e00e      	b.n	800abe0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 f868 	bl	800aca0 <USBH_CDC_TransmitCallback>
      break;
 800abd0:	e006      	b.n	800abe0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800abd2:	7afb      	ldrb	r3, [r7, #11]
 800abd4:	2b02      	cmp	r3, #2
 800abd6:	d103      	bne.n	800abe0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800abe0:	bf00      	nop
  }
}
 800abe2:	bf00      	nop
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b086      	sub	sp, #24
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abf8:	69db      	ldr	r3, [r3, #28]
 800abfa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800abfc:	2300      	movs	r3, #0
 800abfe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	d002      	beq.n	800ac10 <CDC_ProcessReception+0x26>
 800ac0a:	2b04      	cmp	r3, #4
 800ac0c:	d00e      	beq.n	800ac2c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ac0e:	e043      	b.n	800ac98 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	6a19      	ldr	r1, [r3, #32]
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	8b5a      	ldrh	r2, [r3, #26]
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	7b1b      	ldrb	r3, [r3, #12]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f001 fca1 	bl	800c564 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	2204      	movs	r2, #4
 800ac26:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ac2a:	e035      	b.n	800ac98 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	7b1b      	ldrb	r3, [r3, #12]
 800ac30:	4619      	mov	r1, r3
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f001 ffa0 	bl	800cb78 <USBH_LL_GetURBState>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ac3c:	7cfb      	ldrb	r3, [r7, #19]
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d129      	bne.n	800ac96 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	7b1b      	ldrb	r3, [r3, #12]
 800ac46:	4619      	mov	r1, r3
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f001 ff03 	bl	800ca54 <USBH_LL_GetLastXferSize>
 800ac4e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d016      	beq.n	800ac88 <CDC_ProcessReception+0x9e>
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	8b5b      	ldrh	r3, [r3, #26]
 800ac5e:	461a      	mov	r2, r3
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d910      	bls.n	800ac88 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	1ad2      	subs	r2, r2, r3
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	6a1a      	ldr	r2, [r3, #32]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	441a      	add	r2, r3
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	2203      	movs	r2, #3
 800ac82:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ac86:	e006      	b.n	800ac96 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f80f 	bl	800acb4 <USBH_CDC_ReceiveCallback>
      break;
 800ac96:	bf00      	nop
  }
}
 800ac98:	bf00      	nop
 800ac9a:	3718      	adds	r7, #24
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800aca8:	bf00      	nop
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800acbc:	bf00      	nop
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800acd0:	bf00      	nop
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	4613      	mov	r3, r2
 800ace8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d101      	bne.n	800acf4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800acf0:	2302      	movs	r3, #2
 800acf2:	e029      	b.n	800ad48 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	79fa      	ldrb	r2, [r7, #7]
 800acf8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f000 f81f 	bl	800ad50 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d003      	beq.n	800ad40 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f001 fdd3 	bl	800c8ec <USBH_LL_Init>

  return USBH_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	60fb      	str	r3, [r7, #12]
 800ad60:	e009      	b.n	800ad76 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	33e0      	adds	r3, #224	; 0xe0
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	3301      	adds	r3, #1
 800ad74:	60fb      	str	r3, [r7, #12]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2b0f      	cmp	r3, #15
 800ad7a:	d9f2      	bls.n	800ad62 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	60fb      	str	r3, [r7, #12]
 800ad80:	e009      	b.n	800ad96 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	4413      	add	r3, r2
 800ad88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3301      	adds	r3, #1
 800ad94:	60fb      	str	r3, [r7, #12]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad9c:	d3f1      	bcc.n	800ad82 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2201      	movs	r2, #1
 800adae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2240      	movs	r2, #64	; 0x40
 800adc2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2200      	movs	r2, #0
 800adce:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2201      	movs	r2, #1
 800add6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2200      	movs	r2, #0
 800adde:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	331c      	adds	r3, #28
 800adee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800adf2:	2100      	movs	r1, #0
 800adf4:	4618      	mov	r0, r3
 800adf6:	f003 fde8 	bl	800e9ca <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ae00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae04:	2100      	movs	r1, #0
 800ae06:	4618      	mov	r0, r3
 800ae08:	f003 fddf 	bl	800e9ca <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f203 3326 	addw	r3, r3, #806	; 0x326
 800ae12:	2212      	movs	r2, #18
 800ae14:	2100      	movs	r1, #0
 800ae16:	4618      	mov	r0, r3
 800ae18:	f003 fdd7 	bl	800e9ca <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ae22:	223e      	movs	r2, #62	; 0x3e
 800ae24:	2100      	movs	r1, #0
 800ae26:	4618      	mov	r0, r3
 800ae28:	f003 fdcf 	bl	800e9ca <memset>

  return USBH_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ae36:	b480      	push	{r7}
 800ae38:	b085      	sub	sp, #20
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ae40:	2300      	movs	r3, #0
 800ae42:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d016      	beq.n	800ae78 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10e      	bne.n	800ae72 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ae5a:	1c59      	adds	r1, r3, #1
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	33de      	adds	r3, #222	; 0xde
 800ae66:	6839      	ldr	r1, [r7, #0]
 800ae68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	73fb      	strb	r3, [r7, #15]
 800ae70:	e004      	b.n	800ae7c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ae72:	2302      	movs	r3, #2
 800ae74:	73fb      	strb	r3, [r7, #15]
 800ae76:	e001      	b.n	800ae7c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ae78:	2302      	movs	r3, #2
 800ae7a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ae7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3714      	adds	r7, #20
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b085      	sub	sp, #20
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	460b      	mov	r3, r1
 800ae94:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ae96:	2300      	movs	r3, #0
 800ae98:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800aea0:	78fa      	ldrb	r2, [r7, #3]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d204      	bcs.n	800aeb0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	78fa      	ldrb	r2, [r7, #3]
 800aeaa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800aeae:	e001      	b.n	800aeb4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aeb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr

0800aec2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800aec2:	b480      	push	{r7}
 800aec4:	b087      	sub	sp, #28
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
 800aeca:	4608      	mov	r0, r1
 800aecc:	4611      	mov	r1, r2
 800aece:	461a      	mov	r2, r3
 800aed0:	4603      	mov	r3, r0
 800aed2:	70fb      	strb	r3, [r7, #3]
 800aed4:	460b      	mov	r3, r1
 800aed6:	70bb      	strb	r3, [r7, #2]
 800aed8:	4613      	mov	r3, r2
 800aeda:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800aedc:	2300      	movs	r3, #0
 800aede:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800aee0:	2300      	movs	r3, #0
 800aee2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800aeea:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800aeec:	e025      	b.n	800af3a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800aeee:	7dfb      	ldrb	r3, [r7, #23]
 800aef0:	221a      	movs	r2, #26
 800aef2:	fb02 f303 	mul.w	r3, r2, r3
 800aef6:	3308      	adds	r3, #8
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	4413      	add	r3, r2
 800aefc:	3302      	adds	r3, #2
 800aefe:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	795b      	ldrb	r3, [r3, #5]
 800af04:	78fa      	ldrb	r2, [r7, #3]
 800af06:	429a      	cmp	r2, r3
 800af08:	d002      	beq.n	800af10 <USBH_FindInterface+0x4e>
 800af0a:	78fb      	ldrb	r3, [r7, #3]
 800af0c:	2bff      	cmp	r3, #255	; 0xff
 800af0e:	d111      	bne.n	800af34 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800af14:	78ba      	ldrb	r2, [r7, #2]
 800af16:	429a      	cmp	r2, r3
 800af18:	d002      	beq.n	800af20 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800af1a:	78bb      	ldrb	r3, [r7, #2]
 800af1c:	2bff      	cmp	r3, #255	; 0xff
 800af1e:	d109      	bne.n	800af34 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800af24:	787a      	ldrb	r2, [r7, #1]
 800af26:	429a      	cmp	r2, r3
 800af28:	d002      	beq.n	800af30 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800af2a:	787b      	ldrb	r3, [r7, #1]
 800af2c:	2bff      	cmp	r3, #255	; 0xff
 800af2e:	d101      	bne.n	800af34 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800af30:	7dfb      	ldrb	r3, [r7, #23]
 800af32:	e006      	b.n	800af42 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800af34:	7dfb      	ldrb	r3, [r7, #23]
 800af36:	3301      	adds	r3, #1
 800af38:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800af3a:	7dfb      	ldrb	r3, [r7, #23]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d9d6      	bls.n	800aeee <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800af40:	23ff      	movs	r3, #255	; 0xff
}
 800af42:	4618      	mov	r0, r3
 800af44:	371c      	adds	r7, #28
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr

0800af4e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b082      	sub	sp, #8
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f001 fd04 	bl	800c964 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800af5c:	2101      	movs	r1, #1
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f001 fe1d 	bl	800cb9e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
	...

0800af70 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b088      	sub	sp, #32
 800af74:	af04      	add	r7, sp, #16
 800af76:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800af78:	2302      	movs	r3, #2
 800af7a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800af7c:	2300      	movs	r3, #0
 800af7e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800af86:	b2db      	uxtb	r3, r3
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d102      	bne.n	800af92 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2203      	movs	r2, #3
 800af90:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	b2db      	uxtb	r3, r3
 800af98:	2b0b      	cmp	r3, #11
 800af9a:	f200 81be 	bhi.w	800b31a <USBH_Process+0x3aa>
 800af9e:	a201      	add	r2, pc, #4	; (adr r2, 800afa4 <USBH_Process+0x34>)
 800afa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa4:	0800afd5 	.word	0x0800afd5
 800afa8:	0800b007 	.word	0x0800b007
 800afac:	0800b06f 	.word	0x0800b06f
 800afb0:	0800b2b5 	.word	0x0800b2b5
 800afb4:	0800b31b 	.word	0x0800b31b
 800afb8:	0800b113 	.word	0x0800b113
 800afbc:	0800b25b 	.word	0x0800b25b
 800afc0:	0800b149 	.word	0x0800b149
 800afc4:	0800b169 	.word	0x0800b169
 800afc8:	0800b189 	.word	0x0800b189
 800afcc:	0800b1cd 	.word	0x0800b1cd
 800afd0:	0800b29d 	.word	0x0800b29d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f000 819e 	beq.w	800b31e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2201      	movs	r2, #1
 800afe6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800afe8:	20c8      	movs	r0, #200	; 0xc8
 800afea:	f001 fe22 	bl	800cc32 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f001 fd15 	bl	800ca1e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b004:	e18b      	b.n	800b31e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d107      	bne.n	800b020 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2202      	movs	r2, #2
 800b01c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b01e:	e18d      	b.n	800b33c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b026:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b02a:	d914      	bls.n	800b056 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b032:	3301      	adds	r3, #1
 800b034:	b2da      	uxtb	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b042:	2b03      	cmp	r3, #3
 800b044:	d903      	bls.n	800b04e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	220d      	movs	r2, #13
 800b04a:	701a      	strb	r2, [r3, #0]
      break;
 800b04c:	e176      	b.n	800b33c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	701a      	strb	r2, [r3, #0]
      break;
 800b054:	e172      	b.n	800b33c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b05c:	f103 020a 	add.w	r2, r3, #10
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b066:	200a      	movs	r0, #10
 800b068:	f001 fde3 	bl	800cc32 <USBH_Delay>
      break;
 800b06c:	e166      	b.n	800b33c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b074:	2b00      	cmp	r3, #0
 800b076:	d005      	beq.n	800b084 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b07e:	2104      	movs	r1, #4
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b084:	2064      	movs	r0, #100	; 0x64
 800b086:	f001 fdd4 	bl	800cc32 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f001 fca0 	bl	800c9d0 <USBH_LL_GetSpeed>
 800b090:	4603      	mov	r3, r0
 800b092:	461a      	mov	r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2205      	movs	r2, #5
 800b09e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f001 faab 	bl	800c5fe <USBH_AllocPipe>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b0b0:	2180      	movs	r1, #128	; 0x80
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f001 faa3 	bl	800c5fe <USBH_AllocPipe>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	7919      	ldrb	r1, [r3, #4]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b0d4:	b292      	uxth	r2, r2
 800b0d6:	9202      	str	r2, [sp, #8]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	9201      	str	r2, [sp, #4]
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2280      	movs	r2, #128	; 0x80
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f001 fa5c 	bl	800c5a0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	7959      	ldrb	r1, [r3, #5]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b0fc:	b292      	uxth	r2, r2
 800b0fe:	9202      	str	r2, [sp, #8]
 800b100:	2200      	movs	r2, #0
 800b102:	9201      	str	r2, [sp, #4]
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	4603      	mov	r3, r0
 800b108:	2200      	movs	r2, #0
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f001 fa48 	bl	800c5a0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b110:	e114      	b.n	800b33c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f918 	bl	800b348 <USBH_HandleEnum>
 800b118:	4603      	mov	r3, r0
 800b11a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b11c:	7bbb      	ldrb	r3, [r7, #14]
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	2b00      	cmp	r3, #0
 800b122:	f040 80fe 	bne.w	800b322 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b134:	2b01      	cmp	r3, #1
 800b136:	d103      	bne.n	800b140 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2208      	movs	r2, #8
 800b13c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b13e:	e0f0      	b.n	800b322 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2207      	movs	r2, #7
 800b144:	701a      	strb	r2, [r3, #0]
      break;
 800b146:	e0ec      	b.n	800b322 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f000 80e9 	beq.w	800b326 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b15a:	2101      	movs	r1, #1
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2208      	movs	r2, #8
 800b164:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b166:	e0de      	b.n	800b326 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b16e:	b29b      	uxth	r3, r3
 800b170:	4619      	mov	r1, r3
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fc3f 	bl	800b9f6 <USBH_SetCfg>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f040 80d5 	bne.w	800b32a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2209      	movs	r2, #9
 800b184:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b186:	e0d0      	b.n	800b32a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b18e:	f003 0320 	and.w	r3, r3, #32
 800b192:	2b00      	cmp	r3, #0
 800b194:	d016      	beq.n	800b1c4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b196:	2101      	movs	r1, #1
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 fc4f 	bl	800ba3c <USBH_SetFeature>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b1a2:	7bbb      	ldrb	r3, [r7, #14]
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d103      	bne.n	800b1b2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	220a      	movs	r2, #10
 800b1ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b1b0:	e0bd      	b.n	800b32e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800b1b2:	7bbb      	ldrb	r3, [r7, #14]
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	2b03      	cmp	r3, #3
 800b1b8:	f040 80b9 	bne.w	800b32e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	220a      	movs	r2, #10
 800b1c0:	701a      	strb	r2, [r3, #0]
      break;
 800b1c2:	e0b4      	b.n	800b32e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	220a      	movs	r2, #10
 800b1c8:	701a      	strb	r2, [r3, #0]
      break;
 800b1ca:	e0b0      	b.n	800b32e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	f000 80ad 	beq.w	800b332 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	73fb      	strb	r3, [r7, #15]
 800b1e4:	e016      	b.n	800b214 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b1e6:	7bfa      	ldrb	r2, [r7, #15]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	32de      	adds	r2, #222	; 0xde
 800b1ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f0:	791a      	ldrb	r2, [r3, #4]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d108      	bne.n	800b20e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b1fc:	7bfa      	ldrb	r2, [r7, #15]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	32de      	adds	r2, #222	; 0xde
 800b202:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b20c:	e005      	b.n	800b21a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b20e:	7bfb      	ldrb	r3, [r7, #15]
 800b210:	3301      	adds	r3, #1
 800b212:	73fb      	strb	r3, [r7, #15]
 800b214:	7bfb      	ldrb	r3, [r7, #15]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d0e5      	beq.n	800b1e6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b220:	2b00      	cmp	r3, #0
 800b222:	d016      	beq.n	800b252 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	4798      	blx	r3
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d109      	bne.n	800b24a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2206      	movs	r2, #6
 800b23a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b242:	2103      	movs	r1, #3
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b248:	e073      	b.n	800b332 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	220d      	movs	r2, #13
 800b24e:	701a      	strb	r2, [r3, #0]
      break;
 800b250:	e06f      	b.n	800b332 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	220d      	movs	r2, #13
 800b256:	701a      	strb	r2, [r3, #0]
      break;
 800b258:	e06b      	b.n	800b332 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b260:	2b00      	cmp	r3, #0
 800b262:	d017      	beq.n	800b294 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b26a:	691b      	ldr	r3, [r3, #16]
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	4798      	blx	r3
 800b270:	4603      	mov	r3, r0
 800b272:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b274:	7bbb      	ldrb	r3, [r7, #14]
 800b276:	b2db      	uxtb	r3, r3
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d103      	bne.n	800b284 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	220b      	movs	r2, #11
 800b280:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b282:	e058      	b.n	800b336 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800b284:	7bbb      	ldrb	r3, [r7, #14]
 800b286:	b2db      	uxtb	r3, r3
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d154      	bne.n	800b336 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	220d      	movs	r2, #13
 800b290:	701a      	strb	r2, [r3, #0]
      break;
 800b292:	e050      	b.n	800b336 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	220d      	movs	r2, #13
 800b298:	701a      	strb	r2, [r3, #0]
      break;
 800b29a:	e04c      	b.n	800b336 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d049      	beq.n	800b33a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2ac:	695b      	ldr	r3, [r3, #20]
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	4798      	blx	r3
      }
      break;
 800b2b2:	e042      	b.n	800b33a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff fd47 	bl	800ad50 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d009      	beq.n	800b2e0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2d2:	68db      	ldr	r3, [r3, #12]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d005      	beq.n	800b2f6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b2f0:	2105      	movs	r1, #5
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	d107      	bne.n	800b312 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f7ff fe1f 	bl	800af4e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b310:	e014      	b.n	800b33c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f001 fb26 	bl	800c964 <USBH_LL_Start>
      break;
 800b318:	e010      	b.n	800b33c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800b31a:	bf00      	nop
 800b31c:	e00e      	b.n	800b33c <USBH_Process+0x3cc>
      break;
 800b31e:	bf00      	nop
 800b320:	e00c      	b.n	800b33c <USBH_Process+0x3cc>
      break;
 800b322:	bf00      	nop
 800b324:	e00a      	b.n	800b33c <USBH_Process+0x3cc>
    break;
 800b326:	bf00      	nop
 800b328:	e008      	b.n	800b33c <USBH_Process+0x3cc>
      break;
 800b32a:	bf00      	nop
 800b32c:	e006      	b.n	800b33c <USBH_Process+0x3cc>
      break;
 800b32e:	bf00      	nop
 800b330:	e004      	b.n	800b33c <USBH_Process+0x3cc>
      break;
 800b332:	bf00      	nop
 800b334:	e002      	b.n	800b33c <USBH_Process+0x3cc>
      break;
 800b336:	bf00      	nop
 800b338:	e000      	b.n	800b33c <USBH_Process+0x3cc>
      break;
 800b33a:	bf00      	nop
  }
  return USBH_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop

0800b348 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b088      	sub	sp, #32
 800b34c:	af04      	add	r7, sp, #16
 800b34e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b350:	2301      	movs	r3, #1
 800b352:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b354:	2301      	movs	r3, #1
 800b356:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	785b      	ldrb	r3, [r3, #1]
 800b35c:	2b07      	cmp	r3, #7
 800b35e:	f200 81c1 	bhi.w	800b6e4 <USBH_HandleEnum+0x39c>
 800b362:	a201      	add	r2, pc, #4	; (adr r2, 800b368 <USBH_HandleEnum+0x20>)
 800b364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b368:	0800b389 	.word	0x0800b389
 800b36c:	0800b447 	.word	0x0800b447
 800b370:	0800b4b1 	.word	0x0800b4b1
 800b374:	0800b53f 	.word	0x0800b53f
 800b378:	0800b5a9 	.word	0x0800b5a9
 800b37c:	0800b619 	.word	0x0800b619
 800b380:	0800b65f 	.word	0x0800b65f
 800b384:	0800b6a5 	.word	0x0800b6a5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b388:	2108      	movs	r1, #8
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fa50 	bl	800b830 <USBH_Get_DevDesc>
 800b390:	4603      	mov	r3, r0
 800b392:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b394:	7bbb      	ldrb	r3, [r7, #14]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d130      	bne.n	800b3fc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	7919      	ldrb	r1, [r3, #4]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b3be:	b292      	uxth	r2, r2
 800b3c0:	9202      	str	r2, [sp, #8]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	9201      	str	r2, [sp, #4]
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2280      	movs	r2, #128	; 0x80
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f001 f8e7 	bl	800c5a0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	7959      	ldrb	r1, [r3, #5]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b3e6:	b292      	uxth	r2, r2
 800b3e8:	9202      	str	r2, [sp, #8]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	9201      	str	r2, [sp, #4]
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f001 f8d3 	bl	800c5a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b3fa:	e175      	b.n	800b6e8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b3fc:	7bbb      	ldrb	r3, [r7, #14]
 800b3fe:	2b03      	cmp	r3, #3
 800b400:	f040 8172 	bne.w	800b6e8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b40a:	3301      	adds	r3, #1
 800b40c:	b2da      	uxtb	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b41a:	2b03      	cmp	r3, #3
 800b41c:	d903      	bls.n	800b426 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	220d      	movs	r2, #13
 800b422:	701a      	strb	r2, [r3, #0]
      break;
 800b424:	e160      	b.n	800b6e8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	795b      	ldrb	r3, [r3, #5]
 800b42a:	4619      	mov	r1, r3
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f001 f907 	bl	800c640 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	791b      	ldrb	r3, [r3, #4]
 800b436:	4619      	mov	r1, r3
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f001 f901 	bl	800c640 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	701a      	strb	r2, [r3, #0]
      break;
 800b444:	e150      	b.n	800b6e8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b446:	2112      	movs	r1, #18
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f000 f9f1 	bl	800b830 <USBH_Get_DevDesc>
 800b44e:	4603      	mov	r3, r0
 800b450:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b452:	7bbb      	ldrb	r3, [r7, #14]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d103      	bne.n	800b460 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b45e:	e145      	b.n	800b6ec <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b460:	7bbb      	ldrb	r3, [r7, #14]
 800b462:	2b03      	cmp	r3, #3
 800b464:	f040 8142 	bne.w	800b6ec <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b46e:	3301      	adds	r3, #1
 800b470:	b2da      	uxtb	r2, r3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b47e:	2b03      	cmp	r3, #3
 800b480:	d903      	bls.n	800b48a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	220d      	movs	r2, #13
 800b486:	701a      	strb	r2, [r3, #0]
      break;
 800b488:	e130      	b.n	800b6ec <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	795b      	ldrb	r3, [r3, #5]
 800b48e:	4619      	mov	r1, r3
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f001 f8d5 	bl	800c640 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	791b      	ldrb	r3, [r3, #4]
 800b49a:	4619      	mov	r1, r3
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f001 f8cf 	bl	800c640 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	701a      	strb	r2, [r3, #0]
      break;
 800b4ae:	e11d      	b.n	800b6ec <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b4b0:	2101      	movs	r1, #1
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 fa7b 	bl	800b9ae <USBH_SetAddress>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b4bc:	7bbb      	ldrb	r3, [r7, #14]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d132      	bne.n	800b528 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b4c2:	2002      	movs	r0, #2
 800b4c4:	f001 fbb5 	bl	800cc32 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2203      	movs	r2, #3
 800b4d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	7919      	ldrb	r1, [r3, #4]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b4ea:	b292      	uxth	r2, r2
 800b4ec:	9202      	str	r2, [sp, #8]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	9201      	str	r2, [sp, #4]
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2280      	movs	r2, #128	; 0x80
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f001 f851 	bl	800c5a0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	7959      	ldrb	r1, [r3, #5]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b512:	b292      	uxth	r2, r2
 800b514:	9202      	str	r2, [sp, #8]
 800b516:	2200      	movs	r2, #0
 800b518:	9201      	str	r2, [sp, #4]
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	4603      	mov	r3, r0
 800b51e:	2200      	movs	r2, #0
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f001 f83d 	bl	800c5a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b526:	e0e3      	b.n	800b6f0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b528:	7bbb      	ldrb	r3, [r7, #14]
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	f040 80e0 	bne.w	800b6f0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	220d      	movs	r2, #13
 800b534:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	705a      	strb	r2, [r3, #1]
      break;
 800b53c:	e0d8      	b.n	800b6f0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b53e:	2109      	movs	r1, #9
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f9a1 	bl	800b888 <USBH_Get_CfgDesc>
 800b546:	4603      	mov	r3, r0
 800b548:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b54a:	7bbb      	ldrb	r3, [r7, #14]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d103      	bne.n	800b558 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2204      	movs	r2, #4
 800b554:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b556:	e0cd      	b.n	800b6f4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b558:	7bbb      	ldrb	r3, [r7, #14]
 800b55a:	2b03      	cmp	r3, #3
 800b55c:	f040 80ca 	bne.w	800b6f4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b566:	3301      	adds	r3, #1
 800b568:	b2da      	uxtb	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b576:	2b03      	cmp	r3, #3
 800b578:	d903      	bls.n	800b582 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	220d      	movs	r2, #13
 800b57e:	701a      	strb	r2, [r3, #0]
      break;
 800b580:	e0b8      	b.n	800b6f4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	795b      	ldrb	r3, [r3, #5]
 800b586:	4619      	mov	r1, r3
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f001 f859 	bl	800c640 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	791b      	ldrb	r3, [r3, #4]
 800b592:	4619      	mov	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f001 f853 	bl	800c640 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	701a      	strb	r2, [r3, #0]
      break;
 800b5a6:	e0a5      	b.n	800b6f4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 f969 	bl	800b888 <USBH_Get_CfgDesc>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b5ba:	7bbb      	ldrb	r3, [r7, #14]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d103      	bne.n	800b5c8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2205      	movs	r2, #5
 800b5c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b5c6:	e097      	b.n	800b6f8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b5c8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ca:	2b03      	cmp	r3, #3
 800b5cc:	f040 8094 	bne.w	800b6f8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b5e6:	2b03      	cmp	r3, #3
 800b5e8:	d903      	bls.n	800b5f2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	220d      	movs	r2, #13
 800b5ee:	701a      	strb	r2, [r3, #0]
      break;
 800b5f0:	e082      	b.n	800b6f8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	795b      	ldrb	r3, [r3, #5]
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f001 f821 	bl	800c640 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	791b      	ldrb	r3, [r3, #4]
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f001 f81b 	bl	800c640 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2200      	movs	r2, #0
 800b60e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	701a      	strb	r2, [r3, #0]
      break;
 800b616:	e06f      	b.n	800b6f8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d019      	beq.n	800b656 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b62e:	23ff      	movs	r3, #255	; 0xff
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f953 	bl	800b8dc <USBH_Get_StringDesc>
 800b636:	4603      	mov	r3, r0
 800b638:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b63a:	7bbb      	ldrb	r3, [r7, #14]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d103      	bne.n	800b648 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2206      	movs	r2, #6
 800b644:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b646:	e059      	b.n	800b6fc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b648:	7bbb      	ldrb	r3, [r7, #14]
 800b64a:	2b03      	cmp	r3, #3
 800b64c:	d156      	bne.n	800b6fc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2206      	movs	r2, #6
 800b652:	705a      	strb	r2, [r3, #1]
      break;
 800b654:	e052      	b.n	800b6fc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2206      	movs	r2, #6
 800b65a:	705a      	strb	r2, [r3, #1]
      break;
 800b65c:	e04e      	b.n	800b6fc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b664:	2b00      	cmp	r3, #0
 800b666:	d019      	beq.n	800b69c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b674:	23ff      	movs	r3, #255	; 0xff
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f930 	bl	800b8dc <USBH_Get_StringDesc>
 800b67c:	4603      	mov	r3, r0
 800b67e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b680:	7bbb      	ldrb	r3, [r7, #14]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d103      	bne.n	800b68e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2207      	movs	r2, #7
 800b68a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b68c:	e038      	b.n	800b700 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b68e:	7bbb      	ldrb	r3, [r7, #14]
 800b690:	2b03      	cmp	r3, #3
 800b692:	d135      	bne.n	800b700 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2207      	movs	r2, #7
 800b698:	705a      	strb	r2, [r3, #1]
      break;
 800b69a:	e031      	b.n	800b700 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2207      	movs	r2, #7
 800b6a0:	705a      	strb	r2, [r3, #1]
      break;
 800b6a2:	e02d      	b.n	800b700 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d017      	beq.n	800b6de <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b6ba:	23ff      	movs	r3, #255	; 0xff
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 f90d 	bl	800b8dc <USBH_Get_StringDesc>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b6c6:	7bbb      	ldrb	r3, [r7, #14]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d102      	bne.n	800b6d2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b6d0:	e018      	b.n	800b704 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b6d2:	7bbb      	ldrb	r3, [r7, #14]
 800b6d4:	2b03      	cmp	r3, #3
 800b6d6:	d115      	bne.n	800b704 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	73fb      	strb	r3, [r7, #15]
      break;
 800b6dc:	e012      	b.n	800b704 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b6e2:	e00f      	b.n	800b704 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b6e4:	bf00      	nop
 800b6e6:	e00e      	b.n	800b706 <USBH_HandleEnum+0x3be>
      break;
 800b6e8:	bf00      	nop
 800b6ea:	e00c      	b.n	800b706 <USBH_HandleEnum+0x3be>
      break;
 800b6ec:	bf00      	nop
 800b6ee:	e00a      	b.n	800b706 <USBH_HandleEnum+0x3be>
      break;
 800b6f0:	bf00      	nop
 800b6f2:	e008      	b.n	800b706 <USBH_HandleEnum+0x3be>
      break;
 800b6f4:	bf00      	nop
 800b6f6:	e006      	b.n	800b706 <USBH_HandleEnum+0x3be>
      break;
 800b6f8:	bf00      	nop
 800b6fa:	e004      	b.n	800b706 <USBH_HandleEnum+0x3be>
      break;
 800b6fc:	bf00      	nop
 800b6fe:	e002      	b.n	800b706 <USBH_HandleEnum+0x3be>
      break;
 800b700:	bf00      	nop
 800b702:	e000      	b.n	800b706 <USBH_HandleEnum+0x3be>
      break;
 800b704:	bf00      	nop
  }
  return Status;
 800b706:	7bfb      	ldrb	r3, [r7, #15]
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3710      	adds	r7, #16
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	683a      	ldr	r2, [r7, #0]
 800b71e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b722:	bf00      	nop
 800b724:	370c      	adds	r7, #12
 800b726:	46bd      	mov	sp, r7
 800b728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72c:	4770      	bx	lr

0800b72e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b082      	sub	sp, #8
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b73c:	1c5a      	adds	r2, r3, #1
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 f804 	bl	800b752 <USBH_HandleSof>
}
 800b74a:	bf00      	nop
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b082      	sub	sp, #8
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	2b0b      	cmp	r3, #11
 800b762:	d10a      	bne.n	800b77a <USBH_HandleSof+0x28>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d005      	beq.n	800b77a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b774:	699b      	ldr	r3, [r3, #24]
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	4798      	blx	r3
  }
}
 800b77a:	bf00      	nop
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}

0800b782 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b782:	b480      	push	{r7}
 800b784:	b083      	sub	sp, #12
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2201      	movs	r2, #1
 800b78e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b792:	bf00      	nop
}
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b083      	sub	sp, #12
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b7ae:	bf00      	nop
}
 800b7b0:	370c      	adds	r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b7ba:	b480      	push	{r7}
 800b7bc:	b083      	sub	sp, #12
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f001 f8c6 	bl	800c99a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	791b      	ldrb	r3, [r3, #4]
 800b812:	4619      	mov	r1, r3
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 ff13 	bl	800c640 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	795b      	ldrb	r3, [r3, #5]
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 ff0d 	bl	800c640 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b826:	2300      	movs	r3, #0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b086      	sub	sp, #24
 800b834:	af02      	add	r7, sp, #8
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	460b      	mov	r3, r1
 800b83a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800b83c:	887b      	ldrh	r3, [r7, #2]
 800b83e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b842:	d901      	bls.n	800b848 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b844:	2303      	movs	r3, #3
 800b846:	e01b      	b.n	800b880 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b84e:	887b      	ldrh	r3, [r7, #2]
 800b850:	9300      	str	r3, [sp, #0]
 800b852:	4613      	mov	r3, r2
 800b854:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b858:	2100      	movs	r1, #0
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 f872 	bl	800b944 <USBH_GetDescriptor>
 800b860:	4603      	mov	r3, r0
 800b862:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800b864:	7bfb      	ldrb	r3, [r7, #15]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d109      	bne.n	800b87e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b870:	887a      	ldrh	r2, [r7, #2]
 800b872:	4619      	mov	r1, r3
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 f929 	bl	800bacc <USBH_ParseDevDesc>
 800b87a:	4603      	mov	r3, r0
 800b87c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af02      	add	r7, sp, #8
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	460b      	mov	r3, r1
 800b892:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	331c      	adds	r3, #28
 800b898:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800b89a:	887b      	ldrh	r3, [r7, #2]
 800b89c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a0:	d901      	bls.n	800b8a6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b8a2:	2303      	movs	r3, #3
 800b8a4:	e016      	b.n	800b8d4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b8a6:	887b      	ldrh	r3, [r7, #2]
 800b8a8:	9300      	str	r3, [sp, #0]
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f846 	bl	800b944 <USBH_GetDescriptor>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b8bc:	7bfb      	ldrb	r3, [r7, #15]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d107      	bne.n	800b8d2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b8c2:	887b      	ldrh	r3, [r7, #2]
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	68b9      	ldr	r1, [r7, #8]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f9b3 	bl	800bc34 <USBH_ParseCfgDesc>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3710      	adds	r7, #16
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b088      	sub	sp, #32
 800b8e0:	af02      	add	r7, sp, #8
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	607a      	str	r2, [r7, #4]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	72fb      	strb	r3, [r7, #11]
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800b8f0:	893b      	ldrh	r3, [r7, #8]
 800b8f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8f6:	d802      	bhi.n	800b8fe <USBH_Get_StringDesc+0x22>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d101      	bne.n	800b902 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800b8fe:	2303      	movs	r3, #3
 800b900:	e01c      	b.n	800b93c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800b902:	7afb      	ldrb	r3, [r7, #11]
 800b904:	b29b      	uxth	r3, r3
 800b906:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b90a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b912:	893b      	ldrh	r3, [r7, #8]
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	460b      	mov	r3, r1
 800b918:	2100      	movs	r1, #0
 800b91a:	68f8      	ldr	r0, [r7, #12]
 800b91c:	f000 f812 	bl	800b944 <USBH_GetDescriptor>
 800b920:	4603      	mov	r3, r0
 800b922:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b924:	7dfb      	ldrb	r3, [r7, #23]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d107      	bne.n	800b93a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b930:	893a      	ldrh	r2, [r7, #8]
 800b932:	6879      	ldr	r1, [r7, #4]
 800b934:	4618      	mov	r0, r3
 800b936:	f000 fb93 	bl	800c060 <USBH_ParseStringDesc>
  }

  return status;
 800b93a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3718      	adds	r7, #24
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	607b      	str	r3, [r7, #4]
 800b94e:	460b      	mov	r3, r1
 800b950:	72fb      	strb	r3, [r7, #11]
 800b952:	4613      	mov	r3, r2
 800b954:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	789b      	ldrb	r3, [r3, #2]
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d11c      	bne.n	800b998 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b95e:	7afb      	ldrb	r3, [r7, #11]
 800b960:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b964:	b2da      	uxtb	r2, r3
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2206      	movs	r2, #6
 800b96e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	893a      	ldrh	r2, [r7, #8]
 800b974:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b976:	893b      	ldrh	r3, [r7, #8]
 800b978:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b97c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b980:	d104      	bne.n	800b98c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f240 4209 	movw	r2, #1033	; 0x409
 800b988:	829a      	strh	r2, [r3, #20]
 800b98a:	e002      	b.n	800b992 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2200      	movs	r2, #0
 800b990:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	8b3a      	ldrh	r2, [r7, #24]
 800b996:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b998:	8b3b      	ldrh	r3, [r7, #24]
 800b99a:	461a      	mov	r2, r3
 800b99c:	6879      	ldr	r1, [r7, #4]
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f000 fbac 	bl	800c0fc <USBH_CtlReq>
 800b9a4:	4603      	mov	r3, r0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b082      	sub	sp, #8
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	789b      	ldrb	r3, [r3, #2]
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d10f      	bne.n	800b9e2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2205      	movs	r2, #5
 800b9cc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b9ce:	78fb      	ldrb	r3, [r7, #3]
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fb88 	bl	800c0fc <USBH_CtlReq>
 800b9ec:	4603      	mov	r3, r0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b082      	sub	sp, #8
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	789b      	ldrb	r3, [r3, #2]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d10e      	bne.n	800ba28 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2209      	movs	r2, #9
 800ba14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	887a      	ldrh	r2, [r7, #2]
 800ba1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ba28:	2200      	movs	r2, #0
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fb65 	bl	800c0fc <USBH_CtlReq>
 800ba32:	4603      	mov	r3, r0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	460b      	mov	r3, r1
 800ba46:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	789b      	ldrb	r3, [r3, #2]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d10f      	bne.n	800ba70 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2203      	movs	r2, #3
 800ba5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ba5c:	78fb      	ldrb	r3, [r7, #3]
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ba70:	2200      	movs	r2, #0
 800ba72:	2100      	movs	r1, #0
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 fb41 	bl	800c0fc <USBH_CtlReq>
 800ba7a:	4603      	mov	r3, r0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	789b      	ldrb	r3, [r3, #2]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d10f      	bne.n	800bab8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2202      	movs	r2, #2
 800ba9c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2201      	movs	r2, #1
 800baa2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800baaa:	78fb      	ldrb	r3, [r7, #3]
 800baac:	b29a      	uxth	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bab8:	2200      	movs	r2, #0
 800baba:	2100      	movs	r1, #0
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 fb1d 	bl	800c0fc <USBH_CtlReq>
 800bac2:	4603      	mov	r3, r0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bacc:	b480      	push	{r7}
 800bace:	b087      	sub	sp, #28
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	4613      	mov	r3, r2
 800bad8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f203 3326 	addw	r3, r3, #806	; 0x326
 800bae0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d101      	bne.n	800baf0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800baec:	2302      	movs	r3, #2
 800baee:	e098      	b.n	800bc22 <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	781a      	ldrb	r2, [r3, #0]
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	785a      	ldrb	r2, [r3, #1]
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	3302      	adds	r3, #2
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	3303      	adds	r3, #3
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	021b      	lsls	r3, r3, #8
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	4313      	orrs	r3, r2
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	791a      	ldrb	r2, [r3, #4]
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	795a      	ldrb	r2, [r3, #5]
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	799a      	ldrb	r2, [r3, #6]
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	79da      	ldrb	r2, [r3, #7]
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d004      	beq.n	800bb50 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d11b      	bne.n	800bb88 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	79db      	ldrb	r3, [r3, #7]
 800bb54:	2b20      	cmp	r3, #32
 800bb56:	dc0f      	bgt.n	800bb78 <USBH_ParseDevDesc+0xac>
 800bb58:	2b08      	cmp	r3, #8
 800bb5a:	db0f      	blt.n	800bb7c <USBH_ParseDevDesc+0xb0>
 800bb5c:	3b08      	subs	r3, #8
 800bb5e:	4a34      	ldr	r2, [pc, #208]	; (800bc30 <USBH_ParseDevDesc+0x164>)
 800bb60:	fa22 f303 	lsr.w	r3, r2, r3
 800bb64:	f003 0301 	and.w	r3, r3, #1
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	bf14      	ite	ne
 800bb6c:	2301      	movne	r3, #1
 800bb6e:	2300      	moveq	r3, #0
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d106      	bne.n	800bb84 <USBH_ParseDevDesc+0xb8>
 800bb76:	e001      	b.n	800bb7c <USBH_ParseDevDesc+0xb0>
 800bb78:	2b40      	cmp	r3, #64	; 0x40
 800bb7a:	d003      	beq.n	800bb84 <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	2208      	movs	r2, #8
 800bb80:	71da      	strb	r2, [r3, #7]
        break;
 800bb82:	e000      	b.n	800bb86 <USBH_ParseDevDesc+0xba>
        break;
 800bb84:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800bb86:	e00e      	b.n	800bba6 <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bb8e:	2b02      	cmp	r3, #2
 800bb90:	d107      	bne.n	800bba2 <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	79db      	ldrb	r3, [r3, #7]
 800bb96:	2b08      	cmp	r3, #8
 800bb98:	d005      	beq.n	800bba6 <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	2208      	movs	r2, #8
 800bb9e:	71da      	strb	r2, [r3, #7]
 800bba0:	e001      	b.n	800bba6 <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bba2:	2303      	movs	r3, #3
 800bba4:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800bba6:	88fb      	ldrh	r3, [r7, #6]
 800bba8:	2b08      	cmp	r3, #8
 800bbaa:	d939      	bls.n	800bc20 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	3308      	adds	r3, #8
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	3309      	adds	r3, #9
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	021b      	lsls	r3, r3, #8
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	330a      	adds	r3, #10
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	b29a      	uxth	r2, r3
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	330b      	adds	r3, #11
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	021b      	lsls	r3, r3, #8
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	330c      	adds	r3, #12
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	b29a      	uxth	r2, r3
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	330d      	adds	r3, #13
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	021b      	lsls	r3, r3, #8
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	7b9a      	ldrb	r2, [r3, #14]
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	7bda      	ldrb	r2, [r3, #15]
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	7c1a      	ldrb	r2, [r3, #16]
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	7c5a      	ldrb	r2, [r3, #17]
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800bc20:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	371c      	adds	r7, #28
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	01000101 	.word	0x01000101

0800bc34 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b08c      	sub	sp, #48	; 0x30
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	4613      	mov	r3, r2
 800bc40:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bc48:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bc50:	2300      	movs	r3, #0
 800bc52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800bc56:	2300      	movs	r3, #0
 800bc58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d101      	bne.n	800bc66 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800bc62:	2302      	movs	r3, #2
 800bc64:	e0db      	b.n	800be1e <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	781a      	ldrb	r2, [r3, #0]
 800bc6e:	6a3b      	ldr	r3, [r7, #32]
 800bc70:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	785a      	ldrb	r2, [r3, #1]
 800bc76:	6a3b      	ldr	r3, [r7, #32]
 800bc78:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	3302      	adds	r3, #2
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	3303      	adds	r3, #3
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	021b      	lsls	r3, r3, #8
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc96:	bf28      	it	cs
 800bc98:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	6a3b      	ldr	r3, [r7, #32]
 800bca0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	791a      	ldrb	r2, [r3, #4]
 800bca6:	6a3b      	ldr	r3, [r7, #32]
 800bca8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	795a      	ldrb	r2, [r3, #5]
 800bcae:	6a3b      	ldr	r3, [r7, #32]
 800bcb0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	799a      	ldrb	r2, [r3, #6]
 800bcb6:	6a3b      	ldr	r3, [r7, #32]
 800bcb8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	79da      	ldrb	r2, [r3, #7]
 800bcbe:	6a3b      	ldr	r3, [r7, #32]
 800bcc0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	7a1a      	ldrb	r2, [r3, #8]
 800bcc6:	6a3b      	ldr	r3, [r7, #32]
 800bcc8:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800bcca:	6a3b      	ldr	r3, [r7, #32]
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	2b09      	cmp	r3, #9
 800bcd0:	d002      	beq.n	800bcd8 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bcd2:	6a3b      	ldr	r3, [r7, #32]
 800bcd4:	2209      	movs	r2, #9
 800bcd6:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bcd8:	88fb      	ldrh	r3, [r7, #6]
 800bcda:	2b09      	cmp	r3, #9
 800bcdc:	f240 809d 	bls.w	800be1a <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800bce0:	2309      	movs	r3, #9
 800bce2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bce4:	2300      	movs	r3, #0
 800bce6:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bce8:	e081      	b.n	800bdee <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bcea:	f107 0316 	add.w	r3, r7, #22
 800bcee:	4619      	mov	r1, r3
 800bcf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcf2:	f000 f9e8 	bl	800c0c6 <USBH_GetNextDesc>
 800bcf6:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfa:	785b      	ldrb	r3, [r3, #1]
 800bcfc:	2b04      	cmp	r3, #4
 800bcfe:	d176      	bne.n	800bdee <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	2b09      	cmp	r3, #9
 800bd06:	d002      	beq.n	800bd0e <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800bd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0a:	2209      	movs	r2, #9
 800bd0c:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800bd0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd12:	221a      	movs	r2, #26
 800bd14:	fb02 f303 	mul.w	r3, r2, r3
 800bd18:	3308      	adds	r3, #8
 800bd1a:	6a3a      	ldr	r2, [r7, #32]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	3302      	adds	r3, #2
 800bd20:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bd22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd24:	69f8      	ldr	r0, [r7, #28]
 800bd26:	f000 f87e 	bl	800be26 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800bd30:	2300      	movs	r3, #0
 800bd32:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bd34:	e043      	b.n	800bdbe <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bd36:	f107 0316 	add.w	r3, r7, #22
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd3e:	f000 f9c2 	bl	800c0c6 <USBH_GetNextDesc>
 800bd42:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd46:	785b      	ldrb	r3, [r3, #1]
 800bd48:	2b05      	cmp	r3, #5
 800bd4a:	d138      	bne.n	800bdbe <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	795b      	ldrb	r3, [r3, #5]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d113      	bne.n	800bd7c <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d003      	beq.n	800bd64 <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	799b      	ldrb	r3, [r3, #6]
 800bd60:	2b03      	cmp	r3, #3
 800bd62:	d10b      	bne.n	800bd7c <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	79db      	ldrb	r3, [r3, #7]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d10b      	bne.n	800bd84 <USBH_ParseCfgDesc+0x150>
 800bd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	2b09      	cmp	r3, #9
 800bd72:	d007      	beq.n	800bd84 <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800bd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd76:	2209      	movs	r2, #9
 800bd78:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bd7a:	e003      	b.n	800bd84 <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800bd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7e:	2207      	movs	r2, #7
 800bd80:	701a      	strb	r2, [r3, #0]
 800bd82:	e000      	b.n	800bd86 <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800bd84:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bd86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd8a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bd8e:	3201      	adds	r2, #1
 800bd90:	00d2      	lsls	r2, r2, #3
 800bd92:	211a      	movs	r1, #26
 800bd94:	fb01 f303 	mul.w	r3, r1, r3
 800bd98:	4413      	add	r3, r2
 800bd9a:	3308      	adds	r3, #8
 800bd9c:	6a3a      	ldr	r2, [r7, #32]
 800bd9e:	4413      	add	r3, r2
 800bda0:	3304      	adds	r3, #4
 800bda2:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800bda4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bda6:	69b9      	ldr	r1, [r7, #24]
 800bda8:	68f8      	ldr	r0, [r7, #12]
 800bdaa:	f000 f870 	bl	800be8e <USBH_ParseEPDesc>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800bdb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bdb8:	3301      	adds	r3, #1
 800bdba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	791b      	ldrb	r3, [r3, #4]
 800bdc2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d204      	bcs.n	800bdd4 <USBH_ParseCfgDesc+0x1a0>
 800bdca:	6a3b      	ldr	r3, [r7, #32]
 800bdcc:	885a      	ldrh	r2, [r3, #2]
 800bdce:	8afb      	ldrh	r3, [r7, #22]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d8b0      	bhi.n	800bd36 <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	791b      	ldrb	r3, [r3, #4]
 800bdd8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d201      	bcs.n	800bde4 <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800bde0:	2303      	movs	r3, #3
 800bde2:	e01c      	b.n	800be1e <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800bde4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bde8:	3301      	adds	r3, #1
 800bdea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bdee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d805      	bhi.n	800be02 <USBH_ParseCfgDesc+0x1ce>
 800bdf6:	6a3b      	ldr	r3, [r7, #32]
 800bdf8:	885a      	ldrh	r2, [r3, #2]
 800bdfa:	8afb      	ldrh	r3, [r7, #22]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	f63f af74 	bhi.w	800bcea <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800be02:	6a3b      	ldr	r3, [r7, #32]
 800be04:	791b      	ldrb	r3, [r3, #4]
 800be06:	2b02      	cmp	r3, #2
 800be08:	bf28      	it	cs
 800be0a:	2302      	movcs	r3, #2
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800be12:	429a      	cmp	r2, r3
 800be14:	d201      	bcs.n	800be1a <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800be16:	2303      	movs	r3, #3
 800be18:	e001      	b.n	800be1e <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800be1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3730      	adds	r7, #48	; 0x30
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800be26:	b480      	push	{r7}
 800be28:	b083      	sub	sp, #12
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
 800be2e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	781a      	ldrb	r2, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	785a      	ldrb	r2, [r3, #1]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	789a      	ldrb	r2, [r3, #2]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	78da      	ldrb	r2, [r3, #3]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	3304      	adds	r3, #4
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2b02      	cmp	r3, #2
 800be58:	bf28      	it	cs
 800be5a:	2302      	movcs	r3, #2
 800be5c:	b2da      	uxtb	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	795a      	ldrb	r2, [r3, #5]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	799a      	ldrb	r2, [r3, #6]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	79da      	ldrb	r2, [r3, #7]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	7a1a      	ldrb	r2, [r3, #8]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	721a      	strb	r2, [r3, #8]
}
 800be82:	bf00      	nop
 800be84:	370c      	adds	r7, #12
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr

0800be8e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800be8e:	b480      	push	{r7}
 800be90:	b087      	sub	sp, #28
 800be92:	af00      	add	r7, sp, #0
 800be94:	60f8      	str	r0, [r7, #12]
 800be96:	60b9      	str	r1, [r7, #8]
 800be98:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	781a      	ldrb	r2, [r3, #0]
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	785a      	ldrb	r2, [r3, #1]
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	789a      	ldrb	r2, [r3, #2]
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	78da      	ldrb	r2, [r3, #3]
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	3304      	adds	r3, #4
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	b29a      	uxth	r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	3305      	adds	r3, #5
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	b29b      	uxth	r3, r3
 800bece:	021b      	lsls	r3, r3, #8
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	4313      	orrs	r3, r2
 800bed4:	b29a      	uxth	r2, r3
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	799a      	ldrb	r2, [r3, #6]
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	889b      	ldrh	r3, [r3, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d009      	beq.n	800befe <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800beee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bef2:	d804      	bhi.n	800befe <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800bef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800befc:	d901      	bls.n	800bf02 <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800befe:	2303      	movs	r3, #3
 800bf00:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d136      	bne.n	800bf7a <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	78db      	ldrb	r3, [r3, #3]
 800bf10:	f003 0303 	and.w	r3, r3, #3
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	d108      	bne.n	800bf2a <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	889b      	ldrh	r3, [r3, #4]
 800bf1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf20:	f240 8097 	bls.w	800c052 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bf24:	2303      	movs	r3, #3
 800bf26:	75fb      	strb	r3, [r7, #23]
 800bf28:	e093      	b.n	800c052 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	78db      	ldrb	r3, [r3, #3]
 800bf2e:	f003 0303 	and.w	r3, r3, #3
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d107      	bne.n	800bf46 <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	889b      	ldrh	r3, [r3, #4]
 800bf3a:	2b40      	cmp	r3, #64	; 0x40
 800bf3c:	f240 8089 	bls.w	800c052 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bf40:	2303      	movs	r3, #3
 800bf42:	75fb      	strb	r3, [r7, #23]
 800bf44:	e085      	b.n	800c052 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	78db      	ldrb	r3, [r3, #3]
 800bf4a:	f003 0303 	and.w	r3, r3, #3
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d005      	beq.n	800bf5e <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	78db      	ldrb	r3, [r3, #3]
 800bf56:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bf5a:	2b03      	cmp	r3, #3
 800bf5c:	d10a      	bne.n	800bf74 <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	799b      	ldrb	r3, [r3, #6]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d003      	beq.n	800bf6e <USBH_ParseEPDesc+0xe0>
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	799b      	ldrb	r3, [r3, #6]
 800bf6a:	2b10      	cmp	r3, #16
 800bf6c:	d970      	bls.n	800c050 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800bf6e:	2303      	movs	r3, #3
 800bf70:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bf72:	e06d      	b.n	800c050 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bf74:	2303      	movs	r3, #3
 800bf76:	75fb      	strb	r3, [r7, #23]
 800bf78:	e06b      	b.n	800c052 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d13c      	bne.n	800bffe <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	78db      	ldrb	r3, [r3, #3]
 800bf88:	f003 0303 	and.w	r3, r3, #3
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	d005      	beq.n	800bf9c <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	78db      	ldrb	r3, [r3, #3]
 800bf94:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d106      	bne.n	800bfaa <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	889b      	ldrh	r3, [r3, #4]
 800bfa0:	2b40      	cmp	r3, #64	; 0x40
 800bfa2:	d956      	bls.n	800c052 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bfa4:	2303      	movs	r3, #3
 800bfa6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800bfa8:	e053      	b.n	800c052 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	78db      	ldrb	r3, [r3, #3]
 800bfae:	f003 0303 	and.w	r3, r3, #3
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d10e      	bne.n	800bfd4 <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	799b      	ldrb	r3, [r3, #6]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d007      	beq.n	800bfce <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800bfc2:	2b10      	cmp	r3, #16
 800bfc4:	d803      	bhi.n	800bfce <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800bfca:	2b40      	cmp	r3, #64	; 0x40
 800bfcc:	d941      	bls.n	800c052 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bfce:	2303      	movs	r3, #3
 800bfd0:	75fb      	strb	r3, [r7, #23]
 800bfd2:	e03e      	b.n	800c052 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	78db      	ldrb	r3, [r3, #3]
 800bfd8:	f003 0303 	and.w	r3, r3, #3
 800bfdc:	2b03      	cmp	r3, #3
 800bfde:	d10b      	bne.n	800bff8 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	799b      	ldrb	r3, [r3, #6]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d004      	beq.n	800bff2 <USBH_ParseEPDesc+0x164>
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	889b      	ldrh	r3, [r3, #4]
 800bfec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bff0:	d32f      	bcc.n	800c052 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800bff2:	2303      	movs	r3, #3
 800bff4:	75fb      	strb	r3, [r7, #23]
 800bff6:	e02c      	b.n	800c052 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800bff8:	2303      	movs	r3, #3
 800bffa:	75fb      	strb	r3, [r7, #23]
 800bffc:	e029      	b.n	800c052 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c004:	2b02      	cmp	r3, #2
 800c006:	d120      	bne.n	800c04a <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	78db      	ldrb	r3, [r3, #3]
 800c00c:	f003 0303 	and.w	r3, r3, #3
 800c010:	2b00      	cmp	r3, #0
 800c012:	d106      	bne.n	800c022 <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	889b      	ldrh	r3, [r3, #4]
 800c018:	2b08      	cmp	r3, #8
 800c01a:	d01a      	beq.n	800c052 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c01c:	2303      	movs	r3, #3
 800c01e:	75fb      	strb	r3, [r7, #23]
 800c020:	e017      	b.n	800c052 <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	78db      	ldrb	r3, [r3, #3]
 800c026:	f003 0303 	and.w	r3, r3, #3
 800c02a:	2b03      	cmp	r3, #3
 800c02c:	d10a      	bne.n	800c044 <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	799b      	ldrb	r3, [r3, #6]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d003      	beq.n	800c03e <USBH_ParseEPDesc+0x1b0>
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	889b      	ldrh	r3, [r3, #4]
 800c03a:	2b08      	cmp	r3, #8
 800c03c:	d909      	bls.n	800c052 <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800c03e:	2303      	movs	r3, #3
 800c040:	75fb      	strb	r3, [r7, #23]
 800c042:	e006      	b.n	800c052 <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c044:	2303      	movs	r3, #3
 800c046:	75fb      	strb	r3, [r7, #23]
 800c048:	e003      	b.n	800c052 <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c04a:	2303      	movs	r3, #3
 800c04c:	75fb      	strb	r3, [r7, #23]
 800c04e:	e000      	b.n	800c052 <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c050:	bf00      	nop
  }

  return status;
 800c052:	7dfb      	ldrb	r3, [r7, #23]
}
 800c054:	4618      	mov	r0, r3
 800c056:	371c      	adds	r7, #28
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c060:	b480      	push	{r7}
 800c062:	b087      	sub	sp, #28
 800c064:	af00      	add	r7, sp, #0
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	4613      	mov	r3, r2
 800c06c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	3301      	adds	r3, #1
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	2b03      	cmp	r3, #3
 800c076:	d120      	bne.n	800c0ba <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	1e9a      	subs	r2, r3, #2
 800c07e:	88fb      	ldrh	r3, [r7, #6]
 800c080:	4293      	cmp	r3, r2
 800c082:	bf28      	it	cs
 800c084:	4613      	movcs	r3, r2
 800c086:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	3302      	adds	r3, #2
 800c08c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c08e:	2300      	movs	r3, #0
 800c090:	82fb      	strh	r3, [r7, #22]
 800c092:	e00b      	b.n	800c0ac <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c094:	8afb      	ldrh	r3, [r7, #22]
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	4413      	add	r3, r2
 800c09a:	781a      	ldrb	r2, [r3, #0]
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c0a6:	8afb      	ldrh	r3, [r7, #22]
 800c0a8:	3302      	adds	r3, #2
 800c0aa:	82fb      	strh	r3, [r7, #22]
 800c0ac:	8afa      	ldrh	r2, [r7, #22]
 800c0ae:	8abb      	ldrh	r3, [r7, #20]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d3ef      	bcc.n	800c094 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	701a      	strb	r2, [r3, #0]
  }
}
 800c0ba:	bf00      	nop
 800c0bc:	371c      	adds	r7, #28
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr

0800c0c6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c0c6:	b480      	push	{r7}
 800c0c8:	b085      	sub	sp, #20
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
 800c0ce:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	881a      	ldrh	r2, [r3, #0]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	4413      	add	r3, r2
 800c0dc:	b29a      	uxth	r2, r3
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	4613      	mov	r3, r2
 800c108:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c10a:	2301      	movs	r3, #1
 800c10c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	789b      	ldrb	r3, [r3, #2]
 800c112:	2b01      	cmp	r3, #1
 800c114:	d002      	beq.n	800c11c <USBH_CtlReq+0x20>
 800c116:	2b02      	cmp	r3, #2
 800c118:	d00f      	beq.n	800c13a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c11a:	e027      	b.n	800c16c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	68ba      	ldr	r2, [r7, #8]
 800c120:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	88fa      	ldrh	r2, [r7, #6]
 800c126:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2201      	movs	r2, #1
 800c12c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2202      	movs	r2, #2
 800c132:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c134:	2301      	movs	r3, #1
 800c136:	75fb      	strb	r3, [r7, #23]
      break;
 800c138:	e018      	b.n	800c16c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f000 f81c 	bl	800c178 <USBH_HandleControl>
 800c140:	4603      	mov	r3, r0
 800c142:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c144:	7dfb      	ldrb	r3, [r7, #23]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d002      	beq.n	800c150 <USBH_CtlReq+0x54>
 800c14a:	7dfb      	ldrb	r3, [r7, #23]
 800c14c:	2b03      	cmp	r3, #3
 800c14e:	d106      	bne.n	800c15e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2201      	movs	r2, #1
 800c154:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	761a      	strb	r2, [r3, #24]
      break;
 800c15c:	e005      	b.n	800c16a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c15e:	7dfb      	ldrb	r3, [r7, #23]
 800c160:	2b02      	cmp	r3, #2
 800c162:	d102      	bne.n	800c16a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2201      	movs	r2, #1
 800c168:	709a      	strb	r2, [r3, #2]
      break;
 800c16a:	bf00      	nop
  }
  return status;
 800c16c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3718      	adds	r7, #24
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
	...

0800c178 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af02      	add	r7, sp, #8
 800c17e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c180:	2301      	movs	r3, #1
 800c182:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c184:	2300      	movs	r3, #0
 800c186:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	7e1b      	ldrb	r3, [r3, #24]
 800c18c:	3b01      	subs	r3, #1
 800c18e:	2b0a      	cmp	r3, #10
 800c190:	f200 8156 	bhi.w	800c440 <USBH_HandleControl+0x2c8>
 800c194:	a201      	add	r2, pc, #4	; (adr r2, 800c19c <USBH_HandleControl+0x24>)
 800c196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c19a:	bf00      	nop
 800c19c:	0800c1c9 	.word	0x0800c1c9
 800c1a0:	0800c1e3 	.word	0x0800c1e3
 800c1a4:	0800c24d 	.word	0x0800c24d
 800c1a8:	0800c273 	.word	0x0800c273
 800c1ac:	0800c2ab 	.word	0x0800c2ab
 800c1b0:	0800c2d5 	.word	0x0800c2d5
 800c1b4:	0800c327 	.word	0x0800c327
 800c1b8:	0800c349 	.word	0x0800c349
 800c1bc:	0800c385 	.word	0x0800c385
 800c1c0:	0800c3ab 	.word	0x0800c3ab
 800c1c4:	0800c3e9 	.word	0x0800c3e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f103 0110 	add.w	r1, r3, #16
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	795b      	ldrb	r3, [r3, #5]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 f943 	bl	800c460 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2202      	movs	r2, #2
 800c1de:	761a      	strb	r2, [r3, #24]
      break;
 800c1e0:	e139      	b.n	800c456 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	795b      	ldrb	r3, [r3, #5]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 fcc5 	bl	800cb78 <USBH_LL_GetURBState>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c1f2:	7bbb      	ldrb	r3, [r7, #14]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d11e      	bne.n	800c236 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	7c1b      	ldrb	r3, [r3, #16]
 800c1fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c200:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	8adb      	ldrh	r3, [r3, #22]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00a      	beq.n	800c220 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c20a:	7b7b      	ldrb	r3, [r7, #13]
 800c20c:	2b80      	cmp	r3, #128	; 0x80
 800c20e:	d103      	bne.n	800c218 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2203      	movs	r2, #3
 800c214:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c216:	e115      	b.n	800c444 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2205      	movs	r2, #5
 800c21c:	761a      	strb	r2, [r3, #24]
      break;
 800c21e:	e111      	b.n	800c444 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c220:	7b7b      	ldrb	r3, [r7, #13]
 800c222:	2b80      	cmp	r3, #128	; 0x80
 800c224:	d103      	bne.n	800c22e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2209      	movs	r2, #9
 800c22a:	761a      	strb	r2, [r3, #24]
      break;
 800c22c:	e10a      	b.n	800c444 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2207      	movs	r2, #7
 800c232:	761a      	strb	r2, [r3, #24]
      break;
 800c234:	e106      	b.n	800c444 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c236:	7bbb      	ldrb	r3, [r7, #14]
 800c238:	2b04      	cmp	r3, #4
 800c23a:	d003      	beq.n	800c244 <USBH_HandleControl+0xcc>
 800c23c:	7bbb      	ldrb	r3, [r7, #14]
 800c23e:	2b02      	cmp	r3, #2
 800c240:	f040 8100 	bne.w	800c444 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	220b      	movs	r2, #11
 800c248:	761a      	strb	r2, [r3, #24]
      break;
 800c24a:	e0fb      	b.n	800c444 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c252:	b29a      	uxth	r2, r3
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6899      	ldr	r1, [r3, #8]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	899a      	ldrh	r2, [r3, #12]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	791b      	ldrb	r3, [r3, #4]
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 f93a 	bl	800c4de <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2204      	movs	r2, #4
 800c26e:	761a      	strb	r2, [r3, #24]
      break;
 800c270:	e0f1      	b.n	800c456 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	791b      	ldrb	r3, [r3, #4]
 800c276:	4619      	mov	r1, r3
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 fc7d 	bl	800cb78 <USBH_LL_GetURBState>
 800c27e:	4603      	mov	r3, r0
 800c280:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c282:	7bbb      	ldrb	r3, [r7, #14]
 800c284:	2b01      	cmp	r3, #1
 800c286:	d102      	bne.n	800c28e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2209      	movs	r2, #9
 800c28c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c28e:	7bbb      	ldrb	r3, [r7, #14]
 800c290:	2b05      	cmp	r3, #5
 800c292:	d102      	bne.n	800c29a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c294:	2303      	movs	r3, #3
 800c296:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c298:	e0d6      	b.n	800c448 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c29a:	7bbb      	ldrb	r3, [r7, #14]
 800c29c:	2b04      	cmp	r3, #4
 800c29e:	f040 80d3 	bne.w	800c448 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	220b      	movs	r2, #11
 800c2a6:	761a      	strb	r2, [r3, #24]
      break;
 800c2a8:	e0ce      	b.n	800c448 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6899      	ldr	r1, [r3, #8]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	899a      	ldrh	r2, [r3, #12]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	795b      	ldrb	r3, [r3, #5]
 800c2b6:	2001      	movs	r0, #1
 800c2b8:	9000      	str	r0, [sp, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 f8ea 	bl	800c494 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2206      	movs	r2, #6
 800c2d0:	761a      	strb	r2, [r3, #24]
      break;
 800c2d2:	e0c0      	b.n	800c456 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	795b      	ldrb	r3, [r3, #5]
 800c2d8:	4619      	mov	r1, r3
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 fc4c 	bl	800cb78 <USBH_LL_GetURBState>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c2e4:	7bbb      	ldrb	r3, [r7, #14]
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d103      	bne.n	800c2f2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2207      	movs	r2, #7
 800c2ee:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c2f0:	e0ac      	b.n	800c44c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c2f2:	7bbb      	ldrb	r3, [r7, #14]
 800c2f4:	2b05      	cmp	r3, #5
 800c2f6:	d105      	bne.n	800c304 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	220c      	movs	r2, #12
 800c2fc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c2fe:	2303      	movs	r3, #3
 800c300:	73fb      	strb	r3, [r7, #15]
      break;
 800c302:	e0a3      	b.n	800c44c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c304:	7bbb      	ldrb	r3, [r7, #14]
 800c306:	2b02      	cmp	r3, #2
 800c308:	d103      	bne.n	800c312 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2205      	movs	r2, #5
 800c30e:	761a      	strb	r2, [r3, #24]
      break;
 800c310:	e09c      	b.n	800c44c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c312:	7bbb      	ldrb	r3, [r7, #14]
 800c314:	2b04      	cmp	r3, #4
 800c316:	f040 8099 	bne.w	800c44c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	220b      	movs	r2, #11
 800c31e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c320:	2302      	movs	r3, #2
 800c322:	73fb      	strb	r3, [r7, #15]
      break;
 800c324:	e092      	b.n	800c44c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	791b      	ldrb	r3, [r3, #4]
 800c32a:	2200      	movs	r2, #0
 800c32c:	2100      	movs	r1, #0
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 f8d5 	bl	800c4de <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c33a:	b29a      	uxth	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2208      	movs	r2, #8
 800c344:	761a      	strb	r2, [r3, #24]

      break;
 800c346:	e086      	b.n	800c456 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	791b      	ldrb	r3, [r3, #4]
 800c34c:	4619      	mov	r1, r3
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 fc12 	bl	800cb78 <USBH_LL_GetURBState>
 800c354:	4603      	mov	r3, r0
 800c356:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c358:	7bbb      	ldrb	r3, [r7, #14]
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d105      	bne.n	800c36a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	220d      	movs	r2, #13
 800c362:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c364:	2300      	movs	r3, #0
 800c366:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c368:	e072      	b.n	800c450 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c36a:	7bbb      	ldrb	r3, [r7, #14]
 800c36c:	2b04      	cmp	r3, #4
 800c36e:	d103      	bne.n	800c378 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	220b      	movs	r2, #11
 800c374:	761a      	strb	r2, [r3, #24]
      break;
 800c376:	e06b      	b.n	800c450 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c378:	7bbb      	ldrb	r3, [r7, #14]
 800c37a:	2b05      	cmp	r3, #5
 800c37c:	d168      	bne.n	800c450 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c37e:	2303      	movs	r3, #3
 800c380:	73fb      	strb	r3, [r7, #15]
      break;
 800c382:	e065      	b.n	800c450 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	795b      	ldrb	r3, [r3, #5]
 800c388:	2201      	movs	r2, #1
 800c38a:	9200      	str	r2, [sp, #0]
 800c38c:	2200      	movs	r2, #0
 800c38e:	2100      	movs	r1, #0
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 f87f 	bl	800c494 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c39c:	b29a      	uxth	r2, r3
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	220a      	movs	r2, #10
 800c3a6:	761a      	strb	r2, [r3, #24]
      break;
 800c3a8:	e055      	b.n	800c456 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	795b      	ldrb	r3, [r3, #5]
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 fbe1 	bl	800cb78 <USBH_LL_GetURBState>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c3ba:	7bbb      	ldrb	r3, [r7, #14]
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d105      	bne.n	800c3cc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	220d      	movs	r2, #13
 800c3c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c3ca:	e043      	b.n	800c454 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c3cc:	7bbb      	ldrb	r3, [r7, #14]
 800c3ce:	2b02      	cmp	r3, #2
 800c3d0:	d103      	bne.n	800c3da <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2209      	movs	r2, #9
 800c3d6:	761a      	strb	r2, [r3, #24]
      break;
 800c3d8:	e03c      	b.n	800c454 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c3da:	7bbb      	ldrb	r3, [r7, #14]
 800c3dc:	2b04      	cmp	r3, #4
 800c3de:	d139      	bne.n	800c454 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	220b      	movs	r2, #11
 800c3e4:	761a      	strb	r2, [r3, #24]
      break;
 800c3e6:	e035      	b.n	800c454 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	7e5b      	ldrb	r3, [r3, #25]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	b2da      	uxtb	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	765a      	strb	r2, [r3, #25]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	7e5b      	ldrb	r3, [r3, #25]
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	d806      	bhi.n	800c40a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2201      	movs	r2, #1
 800c400:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2201      	movs	r2, #1
 800c406:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c408:	e025      	b.n	800c456 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c410:	2106      	movs	r1, #6
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	795b      	ldrb	r3, [r3, #5]
 800c420:	4619      	mov	r1, r3
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 f90c 	bl	800c640 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	791b      	ldrb	r3, [r3, #4]
 800c42c:	4619      	mov	r1, r3
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f906 	bl	800c640 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c43a:	2302      	movs	r3, #2
 800c43c:	73fb      	strb	r3, [r7, #15]
      break;
 800c43e:	e00a      	b.n	800c456 <USBH_HandleControl+0x2de>

    default:
      break;
 800c440:	bf00      	nop
 800c442:	e008      	b.n	800c456 <USBH_HandleControl+0x2de>
      break;
 800c444:	bf00      	nop
 800c446:	e006      	b.n	800c456 <USBH_HandleControl+0x2de>
      break;
 800c448:	bf00      	nop
 800c44a:	e004      	b.n	800c456 <USBH_HandleControl+0x2de>
      break;
 800c44c:	bf00      	nop
 800c44e:	e002      	b.n	800c456 <USBH_HandleControl+0x2de>
      break;
 800c450:	bf00      	nop
 800c452:	e000      	b.n	800c456 <USBH_HandleControl+0x2de>
      break;
 800c454:	bf00      	nop
  }

  return status;
 800c456:	7bfb      	ldrb	r3, [r7, #15]
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b088      	sub	sp, #32
 800c464:	af04      	add	r7, sp, #16
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	4613      	mov	r3, r2
 800c46c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c46e:	79f9      	ldrb	r1, [r7, #7]
 800c470:	2300      	movs	r3, #0
 800c472:	9303      	str	r3, [sp, #12]
 800c474:	2308      	movs	r3, #8
 800c476:	9302      	str	r3, [sp, #8]
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	9301      	str	r3, [sp, #4]
 800c47c:	2300      	movs	r3, #0
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	2300      	movs	r3, #0
 800c482:	2200      	movs	r2, #0
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f000 fb46 	bl	800cb16 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c48a:	2300      	movs	r3, #0
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b088      	sub	sp, #32
 800c498:	af04      	add	r7, sp, #16
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	4611      	mov	r1, r2
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	80fb      	strh	r3, [r7, #6]
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d001      	beq.n	800c4b8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c4b8:	7979      	ldrb	r1, [r7, #5]
 800c4ba:	7e3b      	ldrb	r3, [r7, #24]
 800c4bc:	9303      	str	r3, [sp, #12]
 800c4be:	88fb      	ldrh	r3, [r7, #6]
 800c4c0:	9302      	str	r3, [sp, #8]
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	9301      	str	r3, [sp, #4]
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	9300      	str	r3, [sp, #0]
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f000 fb21 	bl	800cb16 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b088      	sub	sp, #32
 800c4e2:	af04      	add	r7, sp, #16
 800c4e4:	60f8      	str	r0, [r7, #12]
 800c4e6:	60b9      	str	r1, [r7, #8]
 800c4e8:	4611      	mov	r1, r2
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	80fb      	strh	r3, [r7, #6]
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c4f4:	7979      	ldrb	r1, [r7, #5]
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	9303      	str	r3, [sp, #12]
 800c4fa:	88fb      	ldrh	r3, [r7, #6]
 800c4fc:	9302      	str	r3, [sp, #8]
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	9301      	str	r3, [sp, #4]
 800c502:	2301      	movs	r3, #1
 800c504:	9300      	str	r3, [sp, #0]
 800c506:	2300      	movs	r3, #0
 800c508:	2201      	movs	r2, #1
 800c50a:	68f8      	ldr	r0, [r7, #12]
 800c50c:	f000 fb03 	bl	800cb16 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c510:	2300      	movs	r3, #0

}
 800c512:	4618      	mov	r0, r3
 800c514:	3710      	adds	r7, #16
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}

0800c51a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c51a:	b580      	push	{r7, lr}
 800c51c:	b088      	sub	sp, #32
 800c51e:	af04      	add	r7, sp, #16
 800c520:	60f8      	str	r0, [r7, #12]
 800c522:	60b9      	str	r1, [r7, #8]
 800c524:	4611      	mov	r1, r2
 800c526:	461a      	mov	r2, r3
 800c528:	460b      	mov	r3, r1
 800c52a:	80fb      	strh	r3, [r7, #6]
 800c52c:	4613      	mov	r3, r2
 800c52e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c53a:	2300      	movs	r3, #0
 800c53c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c53e:	7979      	ldrb	r1, [r7, #5]
 800c540:	7e3b      	ldrb	r3, [r7, #24]
 800c542:	9303      	str	r3, [sp, #12]
 800c544:	88fb      	ldrh	r3, [r7, #6]
 800c546:	9302      	str	r3, [sp, #8]
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	9301      	str	r3, [sp, #4]
 800c54c:	2301      	movs	r3, #1
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	2302      	movs	r3, #2
 800c552:	2200      	movs	r2, #0
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f000 fade 	bl	800cb16 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b088      	sub	sp, #32
 800c568:	af04      	add	r7, sp, #16
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	4611      	mov	r1, r2
 800c570:	461a      	mov	r2, r3
 800c572:	460b      	mov	r3, r1
 800c574:	80fb      	strh	r3, [r7, #6]
 800c576:	4613      	mov	r3, r2
 800c578:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c57a:	7979      	ldrb	r1, [r7, #5]
 800c57c:	2300      	movs	r3, #0
 800c57e:	9303      	str	r3, [sp, #12]
 800c580:	88fb      	ldrh	r3, [r7, #6]
 800c582:	9302      	str	r3, [sp, #8]
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	9301      	str	r3, [sp, #4]
 800c588:	2301      	movs	r3, #1
 800c58a:	9300      	str	r3, [sp, #0]
 800c58c:	2302      	movs	r3, #2
 800c58e:	2201      	movs	r2, #1
 800c590:	68f8      	ldr	r0, [r7, #12]
 800c592:	f000 fac0 	bl	800cb16 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c596:	2300      	movs	r3, #0
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3710      	adds	r7, #16
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b086      	sub	sp, #24
 800c5a4:	af04      	add	r7, sp, #16
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	4608      	mov	r0, r1
 800c5aa:	4611      	mov	r1, r2
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	70fb      	strb	r3, [r7, #3]
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	70bb      	strb	r3, [r7, #2]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c5ba:	7878      	ldrb	r0, [r7, #1]
 800c5bc:	78ba      	ldrb	r2, [r7, #2]
 800c5be:	78f9      	ldrb	r1, [r7, #3]
 800c5c0:	8b3b      	ldrh	r3, [r7, #24]
 800c5c2:	9302      	str	r3, [sp, #8]
 800c5c4:	7d3b      	ldrb	r3, [r7, #20]
 800c5c6:	9301      	str	r3, [sp, #4]
 800c5c8:	7c3b      	ldrb	r3, [r7, #16]
 800c5ca:	9300      	str	r3, [sp, #0]
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fa53 	bl	800ca7a <USBH_LL_OpenPipe>

  return USBH_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3708      	adds	r7, #8
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b082      	sub	sp, #8
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c5ea:	78fb      	ldrb	r3, [r7, #3]
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 fa72 	bl	800cad8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3708      	adds	r7, #8
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}

0800c5fe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b084      	sub	sp, #16
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
 800c606:	460b      	mov	r3, r1
 800c608:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 f836 	bl	800c67c <USBH_GetFreePipe>
 800c610:	4603      	mov	r3, r0
 800c612:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c614:	89fb      	ldrh	r3, [r7, #14]
 800c616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d00a      	beq.n	800c634 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c61e:	78fa      	ldrb	r2, [r7, #3]
 800c620:	89fb      	ldrh	r3, [r7, #14]
 800c622:	f003 030f 	and.w	r3, r3, #15
 800c626:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c62a:	6879      	ldr	r1, [r7, #4]
 800c62c:	33e0      	adds	r3, #224	; 0xe0
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	440b      	add	r3, r1
 800c632:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c634:	89fb      	ldrh	r3, [r7, #14]
 800c636:	b2db      	uxtb	r3, r3
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	460b      	mov	r3, r1
 800c64a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c64c:	78fb      	ldrb	r3, [r7, #3]
 800c64e:	2b0f      	cmp	r3, #15
 800c650:	d80d      	bhi.n	800c66e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c652:	78fb      	ldrb	r3, [r7, #3]
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	33e0      	adds	r3, #224	; 0xe0
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	4413      	add	r3, r2
 800c65c:	685a      	ldr	r2, [r3, #4]
 800c65e:	78fb      	ldrb	r3, [r7, #3]
 800c660:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c664:	6879      	ldr	r1, [r7, #4]
 800c666:	33e0      	adds	r3, #224	; 0xe0
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	440b      	add	r3, r1
 800c66c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c66e:	2300      	movs	r3, #0
}
 800c670:	4618      	mov	r0, r3
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c684:	2300      	movs	r3, #0
 800c686:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c688:	2300      	movs	r3, #0
 800c68a:	73fb      	strb	r3, [r7, #15]
 800c68c:	e00f      	b.n	800c6ae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c68e:	7bfb      	ldrb	r3, [r7, #15]
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	33e0      	adds	r3, #224	; 0xe0
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	4413      	add	r3, r2
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d102      	bne.n	800c6a8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c6a2:	7bfb      	ldrb	r3, [r7, #15]
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	e007      	b.n	800c6b8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c6a8:	7bfb      	ldrb	r3, [r7, #15]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	73fb      	strb	r3, [r7, #15]
 800c6ae:	7bfb      	ldrb	r3, [r7, #15]
 800c6b0:	2b0f      	cmp	r3, #15
 800c6b2:	d9ec      	bls.n	800c68e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c6b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3714      	adds	r7, #20
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr

0800c6c4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	490e      	ldr	r1, [pc, #56]	; (800c704 <MX_USB_HOST_Init+0x40>)
 800c6cc:	480e      	ldr	r0, [pc, #56]	; (800c708 <MX_USB_HOST_Init+0x44>)
 800c6ce:	f7fe fb05 	bl	800acdc <USBH_Init>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d001      	beq.n	800c6dc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c6d8:	f7f5 fddc 	bl	8002294 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c6dc:	490b      	ldr	r1, [pc, #44]	; (800c70c <MX_USB_HOST_Init+0x48>)
 800c6de:	480a      	ldr	r0, [pc, #40]	; (800c708 <MX_USB_HOST_Init+0x44>)
 800c6e0:	f7fe fba9 	bl	800ae36 <USBH_RegisterClass>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d001      	beq.n	800c6ee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c6ea:	f7f5 fdd3 	bl	8002294 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c6ee:	4806      	ldr	r0, [pc, #24]	; (800c708 <MX_USB_HOST_Init+0x44>)
 800c6f0:	f7fe fc2d 	bl	800af4e <USBH_Start>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d001      	beq.n	800c6fe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c6fa:	f7f5 fdcb 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c6fe:	bf00      	nop
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	0800c725 	.word	0x0800c725
 800c708:	200005d8 	.word	0x200005d8
 800c70c:	20000020 	.word	0x20000020

0800c710 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c714:	4802      	ldr	r0, [pc, #8]	; (800c720 <MX_USB_HOST_Process+0x10>)
 800c716:	f7fe fc2b 	bl	800af70 <USBH_Process>
}
 800c71a:	bf00      	nop
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	200005d8 	.word	0x200005d8

0800c724 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c724:	b480      	push	{r7}
 800c726:	b083      	sub	sp, #12
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	460b      	mov	r3, r1
 800c72e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c730:	78fb      	ldrb	r3, [r7, #3]
 800c732:	3b01      	subs	r3, #1
 800c734:	2b04      	cmp	r3, #4
 800c736:	d819      	bhi.n	800c76c <USBH_UserProcess+0x48>
 800c738:	a201      	add	r2, pc, #4	; (adr r2, 800c740 <USBH_UserProcess+0x1c>)
 800c73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c73e:	bf00      	nop
 800c740:	0800c76d 	.word	0x0800c76d
 800c744:	0800c75d 	.word	0x0800c75d
 800c748:	0800c76d 	.word	0x0800c76d
 800c74c:	0800c765 	.word	0x0800c765
 800c750:	0800c755 	.word	0x0800c755
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c754:	4b09      	ldr	r3, [pc, #36]	; (800c77c <USBH_UserProcess+0x58>)
 800c756:	2203      	movs	r2, #3
 800c758:	701a      	strb	r2, [r3, #0]
  break;
 800c75a:	e008      	b.n	800c76e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c75c:	4b07      	ldr	r3, [pc, #28]	; (800c77c <USBH_UserProcess+0x58>)
 800c75e:	2202      	movs	r2, #2
 800c760:	701a      	strb	r2, [r3, #0]
  break;
 800c762:	e004      	b.n	800c76e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c764:	4b05      	ldr	r3, [pc, #20]	; (800c77c <USBH_UserProcess+0x58>)
 800c766:	2201      	movs	r2, #1
 800c768:	701a      	strb	r2, [r3, #0]
  break;
 800c76a:	e000      	b.n	800c76e <USBH_UserProcess+0x4a>

  default:
  break;
 800c76c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c76e:	bf00      	nop
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	200009b0 	.word	0x200009b0

0800c780 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b08a      	sub	sp, #40	; 0x28
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c788:	f107 0314 	add.w	r3, r7, #20
 800c78c:	2200      	movs	r2, #0
 800c78e:	601a      	str	r2, [r3, #0]
 800c790:	605a      	str	r2, [r3, #4]
 800c792:	609a      	str	r2, [r3, #8]
 800c794:	60da      	str	r2, [r3, #12]
 800c796:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7a0:	d147      	bne.n	800c832 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	613b      	str	r3, [r7, #16]
 800c7a6:	4b25      	ldr	r3, [pc, #148]	; (800c83c <HAL_HCD_MspInit+0xbc>)
 800c7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7aa:	4a24      	ldr	r2, [pc, #144]	; (800c83c <HAL_HCD_MspInit+0xbc>)
 800c7ac:	f043 0301 	orr.w	r3, r3, #1
 800c7b0:	6313      	str	r3, [r2, #48]	; 0x30
 800c7b2:	4b22      	ldr	r3, [pc, #136]	; (800c83c <HAL_HCD_MspInit+0xbc>)
 800c7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7b6:	f003 0301 	and.w	r3, r3, #1
 800c7ba:	613b      	str	r3, [r7, #16]
 800c7bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c7be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c7cc:	f107 0314 	add.w	r3, r7, #20
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	481b      	ldr	r0, [pc, #108]	; (800c840 <HAL_HCD_MspInit+0xc0>)
 800c7d4:	f7f6 fe28 	bl	8003428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c7d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c7dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7de:	2302      	movs	r3, #2
 800c7e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c7ea:	230a      	movs	r3, #10
 800c7ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7ee:	f107 0314 	add.w	r3, r7, #20
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	4812      	ldr	r0, [pc, #72]	; (800c840 <HAL_HCD_MspInit+0xc0>)
 800c7f6:	f7f6 fe17 	bl	8003428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c7fa:	4b10      	ldr	r3, [pc, #64]	; (800c83c <HAL_HCD_MspInit+0xbc>)
 800c7fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7fe:	4a0f      	ldr	r2, [pc, #60]	; (800c83c <HAL_HCD_MspInit+0xbc>)
 800c800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c804:	6353      	str	r3, [r2, #52]	; 0x34
 800c806:	2300      	movs	r3, #0
 800c808:	60fb      	str	r3, [r7, #12]
 800c80a:	4b0c      	ldr	r3, [pc, #48]	; (800c83c <HAL_HCD_MspInit+0xbc>)
 800c80c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c80e:	4a0b      	ldr	r2, [pc, #44]	; (800c83c <HAL_HCD_MspInit+0xbc>)
 800c810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c814:	6453      	str	r3, [r2, #68]	; 0x44
 800c816:	4b09      	ldr	r3, [pc, #36]	; (800c83c <HAL_HCD_MspInit+0xbc>)
 800c818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c81a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c81e:	60fb      	str	r3, [r7, #12]
 800c820:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c822:	2200      	movs	r2, #0
 800c824:	2100      	movs	r1, #0
 800c826:	2043      	movs	r0, #67	; 0x43
 800c828:	f7f6 fa4b 	bl	8002cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c82c:	2043      	movs	r0, #67	; 0x43
 800c82e:	f7f6 fa64 	bl	8002cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c832:	bf00      	nop
 800c834:	3728      	adds	r7, #40	; 0x28
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	40023800 	.word	0x40023800
 800c840:	40020000 	.word	0x40020000

0800c844 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c852:	4618      	mov	r0, r3
 800c854:	f7fe ff6b 	bl	800b72e <USBH_LL_IncTimer>
}
 800c858:	bf00      	nop
 800c85a:	3708      	adds	r7, #8
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c86e:	4618      	mov	r0, r3
 800c870:	f7fe ffa3 	bl	800b7ba <USBH_LL_Connect>
}
 800c874:	bf00      	nop
 800c876:	3708      	adds	r7, #8
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fe ffac 	bl	800b7e8 <USBH_LL_Disconnect>
}
 800c890:	bf00      	nop
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	70fb      	strb	r3, [r7, #3]
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c8a8:	bf00      	nop
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7fe ff5d 	bl	800b782 <USBH_LL_PortEnabled>
}
 800c8c8:	bf00      	nop
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fe ff5d 	bl	800b79e <USBH_LL_PortDisabled>
}
 800c8e4:	bf00      	nop
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	d12a      	bne.n	800c954 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c8fe:	4a18      	ldr	r2, [pc, #96]	; (800c960 <USBH_LL_Init+0x74>)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	4a15      	ldr	r2, [pc, #84]	; (800c960 <USBH_LL_Init+0x74>)
 800c90a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c90e:	4b14      	ldr	r3, [pc, #80]	; (800c960 <USBH_LL_Init+0x74>)
 800c910:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c914:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800c916:	4b12      	ldr	r3, [pc, #72]	; (800c960 <USBH_LL_Init+0x74>)
 800c918:	2208      	movs	r2, #8
 800c91a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c91c:	4b10      	ldr	r3, [pc, #64]	; (800c960 <USBH_LL_Init+0x74>)
 800c91e:	2201      	movs	r2, #1
 800c920:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c922:	4b0f      	ldr	r3, [pc, #60]	; (800c960 <USBH_LL_Init+0x74>)
 800c924:	2200      	movs	r2, #0
 800c926:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c928:	4b0d      	ldr	r3, [pc, #52]	; (800c960 <USBH_LL_Init+0x74>)
 800c92a:	2202      	movs	r2, #2
 800c92c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c92e:	4b0c      	ldr	r3, [pc, #48]	; (800c960 <USBH_LL_Init+0x74>)
 800c930:	2200      	movs	r2, #0
 800c932:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c934:	480a      	ldr	r0, [pc, #40]	; (800c960 <USBH_LL_Init+0x74>)
 800c936:	f7f6 ff2c 	bl	8003792 <HAL_HCD_Init>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d001      	beq.n	800c944 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c940:	f7f5 fca8 	bl	8002294 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c944:	4806      	ldr	r0, [pc, #24]	; (800c960 <USBH_LL_Init+0x74>)
 800c946:	f7f7 fb8d 	bl	8004064 <HAL_HCD_GetCurrentFrame>
 800c94a:	4603      	mov	r3, r0
 800c94c:	4619      	mov	r1, r3
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7fe fede 	bl	800b710 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	200009b4 	.word	0x200009b4

0800c964 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c96c:	2300      	movs	r3, #0
 800c96e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c970:	2300      	movs	r3, #0
 800c972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7f7 fafa 	bl	8003f74 <HAL_HCD_Start>
 800c980:	4603      	mov	r3, r0
 800c982:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c984:	7bfb      	ldrb	r3, [r7, #15]
 800c986:	4618      	mov	r0, r3
 800c988:	f000 f95e 	bl	800cc48 <USBH_Get_USB_Status>
 800c98c:	4603      	mov	r3, r0
 800c98e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c990:	7bbb      	ldrb	r3, [r7, #14]
}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b084      	sub	sp, #16
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7f7 fb02 	bl	8003fba <HAL_HCD_Stop>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c9ba:	7bfb      	ldrb	r3, [r7, #15]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f000 f943 	bl	800cc48 <USBH_Get_USB_Status>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3710      	adds	r7, #16
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7f7 fb4c 	bl	8004080 <HAL_HCD_GetCurrentSpeed>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d00c      	beq.n	800ca08 <USBH_LL_GetSpeed+0x38>
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d80d      	bhi.n	800ca0e <USBH_LL_GetSpeed+0x3e>
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d002      	beq.n	800c9fc <USBH_LL_GetSpeed+0x2c>
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d003      	beq.n	800ca02 <USBH_LL_GetSpeed+0x32>
 800c9fa:	e008      	b.n	800ca0e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	73fb      	strb	r3, [r7, #15]
    break;
 800ca00:	e008      	b.n	800ca14 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ca02:	2301      	movs	r3, #1
 800ca04:	73fb      	strb	r3, [r7, #15]
    break;
 800ca06:	e005      	b.n	800ca14 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ca08:	2302      	movs	r3, #2
 800ca0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca0c:	e002      	b.n	800ca14 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	73fb      	strb	r3, [r7, #15]
    break;
 800ca12:	bf00      	nop
  }
  return  speed;
 800ca14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b084      	sub	sp, #16
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7f7 fadd 	bl	8003ff4 <HAL_HCD_ResetPort>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca3e:	7bfb      	ldrb	r3, [r7, #15]
 800ca40:	4618      	mov	r0, r3
 800ca42:	f000 f901 	bl	800cc48 <USBH_Get_USB_Status>
 800ca46:	4603      	mov	r3, r0
 800ca48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}

0800ca54 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca66:	78fa      	ldrb	r2, [r7, #3]
 800ca68:	4611      	mov	r1, r2
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7f7 fae5 	bl	800403a <HAL_HCD_HC_GetXferCount>
 800ca70:	4603      	mov	r3, r0
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3708      	adds	r7, #8
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ca7a:	b590      	push	{r4, r7, lr}
 800ca7c:	b089      	sub	sp, #36	; 0x24
 800ca7e:	af04      	add	r7, sp, #16
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	4608      	mov	r0, r1
 800ca84:	4611      	mov	r1, r2
 800ca86:	461a      	mov	r2, r3
 800ca88:	4603      	mov	r3, r0
 800ca8a:	70fb      	strb	r3, [r7, #3]
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	70bb      	strb	r3, [r7, #2]
 800ca90:	4613      	mov	r3, r2
 800ca92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca94:	2300      	movs	r3, #0
 800ca96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800caa2:	787c      	ldrb	r4, [r7, #1]
 800caa4:	78ba      	ldrb	r2, [r7, #2]
 800caa6:	78f9      	ldrb	r1, [r7, #3]
 800caa8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800caaa:	9302      	str	r3, [sp, #8]
 800caac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cab0:	9301      	str	r3, [sp, #4]
 800cab2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cab6:	9300      	str	r3, [sp, #0]
 800cab8:	4623      	mov	r3, r4
 800caba:	f7f6 fed1 	bl	8003860 <HAL_HCD_HC_Init>
 800cabe:	4603      	mov	r3, r0
 800cac0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cac2:	7bfb      	ldrb	r3, [r7, #15]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f000 f8bf 	bl	800cc48 <USBH_Get_USB_Status>
 800caca:	4603      	mov	r3, r0
 800cacc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cace:	7bbb      	ldrb	r3, [r7, #14]
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3714      	adds	r7, #20
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd90      	pop	{r4, r7, pc}

0800cad8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	460b      	mov	r3, r1
 800cae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cae4:	2300      	movs	r3, #0
 800cae6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cae8:	2300      	movs	r3, #0
 800caea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800caf2:	78fa      	ldrb	r2, [r7, #3]
 800caf4:	4611      	mov	r1, r2
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7f6 ff6a 	bl	80039d0 <HAL_HCD_HC_Halt>
 800cafc:	4603      	mov	r3, r0
 800cafe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f000 f8a0 	bl	800cc48 <USBH_Get_USB_Status>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cb16:	b590      	push	{r4, r7, lr}
 800cb18:	b089      	sub	sp, #36	; 0x24
 800cb1a:	af04      	add	r7, sp, #16
 800cb1c:	6078      	str	r0, [r7, #4]
 800cb1e:	4608      	mov	r0, r1
 800cb20:	4611      	mov	r1, r2
 800cb22:	461a      	mov	r2, r3
 800cb24:	4603      	mov	r3, r0
 800cb26:	70fb      	strb	r3, [r7, #3]
 800cb28:	460b      	mov	r3, r1
 800cb2a:	70bb      	strb	r3, [r7, #2]
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb30:	2300      	movs	r3, #0
 800cb32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb34:	2300      	movs	r3, #0
 800cb36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cb3e:	787c      	ldrb	r4, [r7, #1]
 800cb40:	78ba      	ldrb	r2, [r7, #2]
 800cb42:	78f9      	ldrb	r1, [r7, #3]
 800cb44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cb48:	9303      	str	r3, [sp, #12]
 800cb4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cb4c:	9302      	str	r3, [sp, #8]
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb50:	9301      	str	r3, [sp, #4]
 800cb52:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	4623      	mov	r3, r4
 800cb5a:	f7f6 ff5d 	bl	8003a18 <HAL_HCD_HC_SubmitRequest>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cb62:	7bfb      	ldrb	r3, [r7, #15]
 800cb64:	4618      	mov	r0, r3
 800cb66:	f000 f86f 	bl	800cc48 <USBH_Get_USB_Status>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3714      	adds	r7, #20
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd90      	pop	{r4, r7, pc}

0800cb78 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	460b      	mov	r3, r1
 800cb82:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cb8a:	78fa      	ldrb	r2, [r7, #3]
 800cb8c:	4611      	mov	r1, r2
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7f7 fa3e 	bl	8004010 <HAL_HCD_HC_GetURBState>
 800cb94:	4603      	mov	r3, r0
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3708      	adds	r7, #8
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}

0800cb9e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b082      	sub	sp, #8
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
 800cba6:	460b      	mov	r3, r1
 800cba8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d103      	bne.n	800cbbc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800cbb4:	78fb      	ldrb	r3, [r7, #3]
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f000 f872 	bl	800cca0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cbbc:	20c8      	movs	r0, #200	; 0xc8
 800cbbe:	f7f5 ff81 	bl	8002ac4 <HAL_Delay>
  return USBH_OK;
 800cbc2:	2300      	movs	r3, #0
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	70fb      	strb	r3, [r7, #3]
 800cbd8:	4613      	mov	r3, r2
 800cbda:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cbe2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cbe4:	78fa      	ldrb	r2, [r7, #3]
 800cbe6:	68f9      	ldr	r1, [r7, #12]
 800cbe8:	4613      	mov	r3, r2
 800cbea:	011b      	lsls	r3, r3, #4
 800cbec:	1a9b      	subs	r3, r3, r2
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	440b      	add	r3, r1
 800cbf2:	3317      	adds	r3, #23
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d00a      	beq.n	800cc10 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cbfa:	78fa      	ldrb	r2, [r7, #3]
 800cbfc:	68f9      	ldr	r1, [r7, #12]
 800cbfe:	4613      	mov	r3, r2
 800cc00:	011b      	lsls	r3, r3, #4
 800cc02:	1a9b      	subs	r3, r3, r2
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	440b      	add	r3, r1
 800cc08:	333c      	adds	r3, #60	; 0x3c
 800cc0a:	78ba      	ldrb	r2, [r7, #2]
 800cc0c:	701a      	strb	r2, [r3, #0]
 800cc0e:	e009      	b.n	800cc24 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cc10:	78fa      	ldrb	r2, [r7, #3]
 800cc12:	68f9      	ldr	r1, [r7, #12]
 800cc14:	4613      	mov	r3, r2
 800cc16:	011b      	lsls	r3, r3, #4
 800cc18:	1a9b      	subs	r3, r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	440b      	add	r3, r1
 800cc1e:	333d      	adds	r3, #61	; 0x3d
 800cc20:	78ba      	ldrb	r2, [r7, #2]
 800cc22:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cc24:	2300      	movs	r3, #0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3714      	adds	r7, #20
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr

0800cc32 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b082      	sub	sp, #8
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f7f5 ff42 	bl	8002ac4 <HAL_Delay>
}
 800cc40:	bf00      	nop
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	4603      	mov	r3, r0
 800cc50:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc52:	2300      	movs	r3, #0
 800cc54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cc56:	79fb      	ldrb	r3, [r7, #7]
 800cc58:	2b03      	cmp	r3, #3
 800cc5a:	d817      	bhi.n	800cc8c <USBH_Get_USB_Status+0x44>
 800cc5c:	a201      	add	r2, pc, #4	; (adr r2, 800cc64 <USBH_Get_USB_Status+0x1c>)
 800cc5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc62:	bf00      	nop
 800cc64:	0800cc75 	.word	0x0800cc75
 800cc68:	0800cc7b 	.word	0x0800cc7b
 800cc6c:	0800cc81 	.word	0x0800cc81
 800cc70:	0800cc87 	.word	0x0800cc87
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cc74:	2300      	movs	r3, #0
 800cc76:	73fb      	strb	r3, [r7, #15]
    break;
 800cc78:	e00b      	b.n	800cc92 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cc7a:	2302      	movs	r3, #2
 800cc7c:	73fb      	strb	r3, [r7, #15]
    break;
 800cc7e:	e008      	b.n	800cc92 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cc80:	2301      	movs	r3, #1
 800cc82:	73fb      	strb	r3, [r7, #15]
    break;
 800cc84:	e005      	b.n	800cc92 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cc86:	2302      	movs	r3, #2
 800cc88:	73fb      	strb	r3, [r7, #15]
    break;
 800cc8a:	e002      	b.n	800cc92 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc90:	bf00      	nop
  }
  return usb_status;
 800cc92:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	4603      	mov	r3, r0
 800cca8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ccaa:	79fb      	ldrb	r3, [r7, #7]
 800ccac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ccae:	79fb      	ldrb	r3, [r7, #7]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d102      	bne.n	800ccba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	73fb      	strb	r3, [r7, #15]
 800ccb8:	e001      	b.n	800ccbe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	2101      	movs	r1, #1
 800ccc4:	4803      	ldr	r0, [pc, #12]	; (800ccd4 <MX_DriverVbusFS+0x34>)
 800ccc6:	f7f6 fd4b 	bl	8003760 <HAL_GPIO_WritePin>
}
 800ccca:	bf00      	nop
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	40020800 	.word	0x40020800

0800ccd8 <atof>:
 800ccd8:	2100      	movs	r1, #0
 800ccda:	f000 becf 	b.w	800da7c <strtod>
	...

0800cce0 <malloc>:
 800cce0:	4b02      	ldr	r3, [pc, #8]	; (800ccec <malloc+0xc>)
 800cce2:	4601      	mov	r1, r0
 800cce4:	6818      	ldr	r0, [r3, #0]
 800cce6:	f000 b82b 	b.w	800cd40 <_malloc_r>
 800ccea:	bf00      	nop
 800ccec:	20000204 	.word	0x20000204

0800ccf0 <free>:
 800ccf0:	4b02      	ldr	r3, [pc, #8]	; (800ccfc <free+0xc>)
 800ccf2:	4601      	mov	r1, r0
 800ccf4:	6818      	ldr	r0, [r3, #0]
 800ccf6:	f002 bda5 	b.w	800f844 <_free_r>
 800ccfa:	bf00      	nop
 800ccfc:	20000204 	.word	0x20000204

0800cd00 <sbrk_aligned>:
 800cd00:	b570      	push	{r4, r5, r6, lr}
 800cd02:	4e0e      	ldr	r6, [pc, #56]	; (800cd3c <sbrk_aligned+0x3c>)
 800cd04:	460c      	mov	r4, r1
 800cd06:	6831      	ldr	r1, [r6, #0]
 800cd08:	4605      	mov	r5, r0
 800cd0a:	b911      	cbnz	r1, 800cd12 <sbrk_aligned+0x12>
 800cd0c:	f001 feb0 	bl	800ea70 <_sbrk_r>
 800cd10:	6030      	str	r0, [r6, #0]
 800cd12:	4621      	mov	r1, r4
 800cd14:	4628      	mov	r0, r5
 800cd16:	f001 feab 	bl	800ea70 <_sbrk_r>
 800cd1a:	1c43      	adds	r3, r0, #1
 800cd1c:	d00a      	beq.n	800cd34 <sbrk_aligned+0x34>
 800cd1e:	1cc4      	adds	r4, r0, #3
 800cd20:	f024 0403 	bic.w	r4, r4, #3
 800cd24:	42a0      	cmp	r0, r4
 800cd26:	d007      	beq.n	800cd38 <sbrk_aligned+0x38>
 800cd28:	1a21      	subs	r1, r4, r0
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	f001 fea0 	bl	800ea70 <_sbrk_r>
 800cd30:	3001      	adds	r0, #1
 800cd32:	d101      	bne.n	800cd38 <sbrk_aligned+0x38>
 800cd34:	f04f 34ff 	mov.w	r4, #4294967295
 800cd38:	4620      	mov	r0, r4
 800cd3a:	bd70      	pop	{r4, r5, r6, pc}
 800cd3c:	20000d98 	.word	0x20000d98

0800cd40 <_malloc_r>:
 800cd40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd44:	1ccd      	adds	r5, r1, #3
 800cd46:	f025 0503 	bic.w	r5, r5, #3
 800cd4a:	3508      	adds	r5, #8
 800cd4c:	2d0c      	cmp	r5, #12
 800cd4e:	bf38      	it	cc
 800cd50:	250c      	movcc	r5, #12
 800cd52:	2d00      	cmp	r5, #0
 800cd54:	4607      	mov	r7, r0
 800cd56:	db01      	blt.n	800cd5c <_malloc_r+0x1c>
 800cd58:	42a9      	cmp	r1, r5
 800cd5a:	d905      	bls.n	800cd68 <_malloc_r+0x28>
 800cd5c:	230c      	movs	r3, #12
 800cd5e:	603b      	str	r3, [r7, #0]
 800cd60:	2600      	movs	r6, #0
 800cd62:	4630      	mov	r0, r6
 800cd64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ce3c <_malloc_r+0xfc>
 800cd6c:	f000 f868 	bl	800ce40 <__malloc_lock>
 800cd70:	f8d8 3000 	ldr.w	r3, [r8]
 800cd74:	461c      	mov	r4, r3
 800cd76:	bb5c      	cbnz	r4, 800cdd0 <_malloc_r+0x90>
 800cd78:	4629      	mov	r1, r5
 800cd7a:	4638      	mov	r0, r7
 800cd7c:	f7ff ffc0 	bl	800cd00 <sbrk_aligned>
 800cd80:	1c43      	adds	r3, r0, #1
 800cd82:	4604      	mov	r4, r0
 800cd84:	d155      	bne.n	800ce32 <_malloc_r+0xf2>
 800cd86:	f8d8 4000 	ldr.w	r4, [r8]
 800cd8a:	4626      	mov	r6, r4
 800cd8c:	2e00      	cmp	r6, #0
 800cd8e:	d145      	bne.n	800ce1c <_malloc_r+0xdc>
 800cd90:	2c00      	cmp	r4, #0
 800cd92:	d048      	beq.n	800ce26 <_malloc_r+0xe6>
 800cd94:	6823      	ldr	r3, [r4, #0]
 800cd96:	4631      	mov	r1, r6
 800cd98:	4638      	mov	r0, r7
 800cd9a:	eb04 0903 	add.w	r9, r4, r3
 800cd9e:	f001 fe67 	bl	800ea70 <_sbrk_r>
 800cda2:	4581      	cmp	r9, r0
 800cda4:	d13f      	bne.n	800ce26 <_malloc_r+0xe6>
 800cda6:	6821      	ldr	r1, [r4, #0]
 800cda8:	1a6d      	subs	r5, r5, r1
 800cdaa:	4629      	mov	r1, r5
 800cdac:	4638      	mov	r0, r7
 800cdae:	f7ff ffa7 	bl	800cd00 <sbrk_aligned>
 800cdb2:	3001      	adds	r0, #1
 800cdb4:	d037      	beq.n	800ce26 <_malloc_r+0xe6>
 800cdb6:	6823      	ldr	r3, [r4, #0]
 800cdb8:	442b      	add	r3, r5
 800cdba:	6023      	str	r3, [r4, #0]
 800cdbc:	f8d8 3000 	ldr.w	r3, [r8]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d038      	beq.n	800ce36 <_malloc_r+0xf6>
 800cdc4:	685a      	ldr	r2, [r3, #4]
 800cdc6:	42a2      	cmp	r2, r4
 800cdc8:	d12b      	bne.n	800ce22 <_malloc_r+0xe2>
 800cdca:	2200      	movs	r2, #0
 800cdcc:	605a      	str	r2, [r3, #4]
 800cdce:	e00f      	b.n	800cdf0 <_malloc_r+0xb0>
 800cdd0:	6822      	ldr	r2, [r4, #0]
 800cdd2:	1b52      	subs	r2, r2, r5
 800cdd4:	d41f      	bmi.n	800ce16 <_malloc_r+0xd6>
 800cdd6:	2a0b      	cmp	r2, #11
 800cdd8:	d917      	bls.n	800ce0a <_malloc_r+0xca>
 800cdda:	1961      	adds	r1, r4, r5
 800cddc:	42a3      	cmp	r3, r4
 800cdde:	6025      	str	r5, [r4, #0]
 800cde0:	bf18      	it	ne
 800cde2:	6059      	strne	r1, [r3, #4]
 800cde4:	6863      	ldr	r3, [r4, #4]
 800cde6:	bf08      	it	eq
 800cde8:	f8c8 1000 	streq.w	r1, [r8]
 800cdec:	5162      	str	r2, [r4, r5]
 800cdee:	604b      	str	r3, [r1, #4]
 800cdf0:	4638      	mov	r0, r7
 800cdf2:	f104 060b 	add.w	r6, r4, #11
 800cdf6:	f000 f829 	bl	800ce4c <__malloc_unlock>
 800cdfa:	f026 0607 	bic.w	r6, r6, #7
 800cdfe:	1d23      	adds	r3, r4, #4
 800ce00:	1af2      	subs	r2, r6, r3
 800ce02:	d0ae      	beq.n	800cd62 <_malloc_r+0x22>
 800ce04:	1b9b      	subs	r3, r3, r6
 800ce06:	50a3      	str	r3, [r4, r2]
 800ce08:	e7ab      	b.n	800cd62 <_malloc_r+0x22>
 800ce0a:	42a3      	cmp	r3, r4
 800ce0c:	6862      	ldr	r2, [r4, #4]
 800ce0e:	d1dd      	bne.n	800cdcc <_malloc_r+0x8c>
 800ce10:	f8c8 2000 	str.w	r2, [r8]
 800ce14:	e7ec      	b.n	800cdf0 <_malloc_r+0xb0>
 800ce16:	4623      	mov	r3, r4
 800ce18:	6864      	ldr	r4, [r4, #4]
 800ce1a:	e7ac      	b.n	800cd76 <_malloc_r+0x36>
 800ce1c:	4634      	mov	r4, r6
 800ce1e:	6876      	ldr	r6, [r6, #4]
 800ce20:	e7b4      	b.n	800cd8c <_malloc_r+0x4c>
 800ce22:	4613      	mov	r3, r2
 800ce24:	e7cc      	b.n	800cdc0 <_malloc_r+0x80>
 800ce26:	230c      	movs	r3, #12
 800ce28:	603b      	str	r3, [r7, #0]
 800ce2a:	4638      	mov	r0, r7
 800ce2c:	f000 f80e 	bl	800ce4c <__malloc_unlock>
 800ce30:	e797      	b.n	800cd62 <_malloc_r+0x22>
 800ce32:	6025      	str	r5, [r4, #0]
 800ce34:	e7dc      	b.n	800cdf0 <_malloc_r+0xb0>
 800ce36:	605b      	str	r3, [r3, #4]
 800ce38:	deff      	udf	#255	; 0xff
 800ce3a:	bf00      	nop
 800ce3c:	20000d94 	.word	0x20000d94

0800ce40 <__malloc_lock>:
 800ce40:	4801      	ldr	r0, [pc, #4]	; (800ce48 <__malloc_lock+0x8>)
 800ce42:	f001 be62 	b.w	800eb0a <__retarget_lock_acquire_recursive>
 800ce46:	bf00      	nop
 800ce48:	20000edc 	.word	0x20000edc

0800ce4c <__malloc_unlock>:
 800ce4c:	4801      	ldr	r0, [pc, #4]	; (800ce54 <__malloc_unlock+0x8>)
 800ce4e:	f001 be5d 	b.w	800eb0c <__retarget_lock_release_recursive>
 800ce52:	bf00      	nop
 800ce54:	20000edc 	.word	0x20000edc

0800ce58 <sulp>:
 800ce58:	b570      	push	{r4, r5, r6, lr}
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	460d      	mov	r5, r1
 800ce5e:	ec45 4b10 	vmov	d0, r4, r5
 800ce62:	4616      	mov	r6, r2
 800ce64:	f003 fc10 	bl	8010688 <__ulp>
 800ce68:	ec51 0b10 	vmov	r0, r1, d0
 800ce6c:	b17e      	cbz	r6, 800ce8e <sulp+0x36>
 800ce6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ce72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	dd09      	ble.n	800ce8e <sulp+0x36>
 800ce7a:	051b      	lsls	r3, r3, #20
 800ce7c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ce80:	2400      	movs	r4, #0
 800ce82:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ce86:	4622      	mov	r2, r4
 800ce88:	462b      	mov	r3, r5
 800ce8a:	f7f3 fbb5 	bl	80005f8 <__aeabi_dmul>
 800ce8e:	bd70      	pop	{r4, r5, r6, pc}

0800ce90 <_strtod_l>:
 800ce90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce94:	ed2d 8b02 	vpush	{d8}
 800ce98:	b09b      	sub	sp, #108	; 0x6c
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	9213      	str	r2, [sp, #76]	; 0x4c
 800ce9e:	2200      	movs	r2, #0
 800cea0:	9216      	str	r2, [sp, #88]	; 0x58
 800cea2:	460d      	mov	r5, r1
 800cea4:	f04f 0800 	mov.w	r8, #0
 800cea8:	f04f 0900 	mov.w	r9, #0
 800ceac:	460a      	mov	r2, r1
 800ceae:	9215      	str	r2, [sp, #84]	; 0x54
 800ceb0:	7811      	ldrb	r1, [r2, #0]
 800ceb2:	292b      	cmp	r1, #43	; 0x2b
 800ceb4:	d04c      	beq.n	800cf50 <_strtod_l+0xc0>
 800ceb6:	d83a      	bhi.n	800cf2e <_strtod_l+0x9e>
 800ceb8:	290d      	cmp	r1, #13
 800ceba:	d834      	bhi.n	800cf26 <_strtod_l+0x96>
 800cebc:	2908      	cmp	r1, #8
 800cebe:	d834      	bhi.n	800cf2a <_strtod_l+0x9a>
 800cec0:	2900      	cmp	r1, #0
 800cec2:	d03d      	beq.n	800cf40 <_strtod_l+0xb0>
 800cec4:	2200      	movs	r2, #0
 800cec6:	920a      	str	r2, [sp, #40]	; 0x28
 800cec8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ceca:	7832      	ldrb	r2, [r6, #0]
 800cecc:	2a30      	cmp	r2, #48	; 0x30
 800cece:	f040 80b4 	bne.w	800d03a <_strtod_l+0x1aa>
 800ced2:	7872      	ldrb	r2, [r6, #1]
 800ced4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ced8:	2a58      	cmp	r2, #88	; 0x58
 800ceda:	d170      	bne.n	800cfbe <_strtod_l+0x12e>
 800cedc:	9302      	str	r3, [sp, #8]
 800cede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cee0:	9301      	str	r3, [sp, #4]
 800cee2:	ab16      	add	r3, sp, #88	; 0x58
 800cee4:	9300      	str	r3, [sp, #0]
 800cee6:	4a8e      	ldr	r2, [pc, #568]	; (800d120 <_strtod_l+0x290>)
 800cee8:	ab17      	add	r3, sp, #92	; 0x5c
 800ceea:	a915      	add	r1, sp, #84	; 0x54
 800ceec:	4620      	mov	r0, r4
 800ceee:	f002 fd5d 	bl	800f9ac <__gethex>
 800cef2:	f010 070f 	ands.w	r7, r0, #15
 800cef6:	4605      	mov	r5, r0
 800cef8:	d005      	beq.n	800cf06 <_strtod_l+0x76>
 800cefa:	2f06      	cmp	r7, #6
 800cefc:	d12a      	bne.n	800cf54 <_strtod_l+0xc4>
 800cefe:	3601      	adds	r6, #1
 800cf00:	2300      	movs	r3, #0
 800cf02:	9615      	str	r6, [sp, #84]	; 0x54
 800cf04:	930a      	str	r3, [sp, #40]	; 0x28
 800cf06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f040 857f 	bne.w	800da0c <_strtod_l+0xb7c>
 800cf0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf10:	b1db      	cbz	r3, 800cf4a <_strtod_l+0xba>
 800cf12:	4642      	mov	r2, r8
 800cf14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cf18:	ec43 2b10 	vmov	d0, r2, r3
 800cf1c:	b01b      	add	sp, #108	; 0x6c
 800cf1e:	ecbd 8b02 	vpop	{d8}
 800cf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf26:	2920      	cmp	r1, #32
 800cf28:	d1cc      	bne.n	800cec4 <_strtod_l+0x34>
 800cf2a:	3201      	adds	r2, #1
 800cf2c:	e7bf      	b.n	800ceae <_strtod_l+0x1e>
 800cf2e:	292d      	cmp	r1, #45	; 0x2d
 800cf30:	d1c8      	bne.n	800cec4 <_strtod_l+0x34>
 800cf32:	2101      	movs	r1, #1
 800cf34:	910a      	str	r1, [sp, #40]	; 0x28
 800cf36:	1c51      	adds	r1, r2, #1
 800cf38:	9115      	str	r1, [sp, #84]	; 0x54
 800cf3a:	7852      	ldrb	r2, [r2, #1]
 800cf3c:	2a00      	cmp	r2, #0
 800cf3e:	d1c3      	bne.n	800cec8 <_strtod_l+0x38>
 800cf40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cf42:	9515      	str	r5, [sp, #84]	; 0x54
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f040 855f 	bne.w	800da08 <_strtod_l+0xb78>
 800cf4a:	4642      	mov	r2, r8
 800cf4c:	464b      	mov	r3, r9
 800cf4e:	e7e3      	b.n	800cf18 <_strtod_l+0x88>
 800cf50:	2100      	movs	r1, #0
 800cf52:	e7ef      	b.n	800cf34 <_strtod_l+0xa4>
 800cf54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cf56:	b13a      	cbz	r2, 800cf68 <_strtod_l+0xd8>
 800cf58:	2135      	movs	r1, #53	; 0x35
 800cf5a:	a818      	add	r0, sp, #96	; 0x60
 800cf5c:	f003 fc91 	bl	8010882 <__copybits>
 800cf60:	9916      	ldr	r1, [sp, #88]	; 0x58
 800cf62:	4620      	mov	r0, r4
 800cf64:	f003 f864 	bl	8010030 <_Bfree>
 800cf68:	3f01      	subs	r7, #1
 800cf6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf6c:	2f04      	cmp	r7, #4
 800cf6e:	d806      	bhi.n	800cf7e <_strtod_l+0xee>
 800cf70:	e8df f007 	tbb	[pc, r7]
 800cf74:	201d0314 	.word	0x201d0314
 800cf78:	14          	.byte	0x14
 800cf79:	00          	.byte	0x00
 800cf7a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800cf7e:	05e9      	lsls	r1, r5, #23
 800cf80:	bf48      	it	mi
 800cf82:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800cf86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cf8a:	0d1b      	lsrs	r3, r3, #20
 800cf8c:	051b      	lsls	r3, r3, #20
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d1b9      	bne.n	800cf06 <_strtod_l+0x76>
 800cf92:	f001 fd8f 	bl	800eab4 <__errno>
 800cf96:	2322      	movs	r3, #34	; 0x22
 800cf98:	6003      	str	r3, [r0, #0]
 800cf9a:	e7b4      	b.n	800cf06 <_strtod_l+0x76>
 800cf9c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800cfa0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cfa4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cfa8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800cfac:	e7e7      	b.n	800cf7e <_strtod_l+0xee>
 800cfae:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d128 <_strtod_l+0x298>
 800cfb2:	e7e4      	b.n	800cf7e <_strtod_l+0xee>
 800cfb4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800cfb8:	f04f 38ff 	mov.w	r8, #4294967295
 800cfbc:	e7df      	b.n	800cf7e <_strtod_l+0xee>
 800cfbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfc0:	1c5a      	adds	r2, r3, #1
 800cfc2:	9215      	str	r2, [sp, #84]	; 0x54
 800cfc4:	785b      	ldrb	r3, [r3, #1]
 800cfc6:	2b30      	cmp	r3, #48	; 0x30
 800cfc8:	d0f9      	beq.n	800cfbe <_strtod_l+0x12e>
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d09b      	beq.n	800cf06 <_strtod_l+0x76>
 800cfce:	2301      	movs	r3, #1
 800cfd0:	f04f 0a00 	mov.w	sl, #0
 800cfd4:	9304      	str	r3, [sp, #16]
 800cfd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800cfda:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cfde:	46d3      	mov	fp, sl
 800cfe0:	220a      	movs	r2, #10
 800cfe2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800cfe4:	7806      	ldrb	r6, [r0, #0]
 800cfe6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cfea:	b2d9      	uxtb	r1, r3
 800cfec:	2909      	cmp	r1, #9
 800cfee:	d926      	bls.n	800d03e <_strtod_l+0x1ae>
 800cff0:	494c      	ldr	r1, [pc, #304]	; (800d124 <_strtod_l+0x294>)
 800cff2:	2201      	movs	r2, #1
 800cff4:	f001 fcf1 	bl	800e9da <strncmp>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	d030      	beq.n	800d05e <_strtod_l+0x1ce>
 800cffc:	2000      	movs	r0, #0
 800cffe:	4632      	mov	r2, r6
 800d000:	9005      	str	r0, [sp, #20]
 800d002:	465e      	mov	r6, fp
 800d004:	4603      	mov	r3, r0
 800d006:	2a65      	cmp	r2, #101	; 0x65
 800d008:	d001      	beq.n	800d00e <_strtod_l+0x17e>
 800d00a:	2a45      	cmp	r2, #69	; 0x45
 800d00c:	d113      	bne.n	800d036 <_strtod_l+0x1a6>
 800d00e:	b91e      	cbnz	r6, 800d018 <_strtod_l+0x188>
 800d010:	9a04      	ldr	r2, [sp, #16]
 800d012:	4302      	orrs	r2, r0
 800d014:	d094      	beq.n	800cf40 <_strtod_l+0xb0>
 800d016:	2600      	movs	r6, #0
 800d018:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d01a:	1c6a      	adds	r2, r5, #1
 800d01c:	9215      	str	r2, [sp, #84]	; 0x54
 800d01e:	786a      	ldrb	r2, [r5, #1]
 800d020:	2a2b      	cmp	r2, #43	; 0x2b
 800d022:	d074      	beq.n	800d10e <_strtod_l+0x27e>
 800d024:	2a2d      	cmp	r2, #45	; 0x2d
 800d026:	d078      	beq.n	800d11a <_strtod_l+0x28a>
 800d028:	f04f 0c00 	mov.w	ip, #0
 800d02c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d030:	2909      	cmp	r1, #9
 800d032:	d97f      	bls.n	800d134 <_strtod_l+0x2a4>
 800d034:	9515      	str	r5, [sp, #84]	; 0x54
 800d036:	2700      	movs	r7, #0
 800d038:	e09e      	b.n	800d178 <_strtod_l+0x2e8>
 800d03a:	2300      	movs	r3, #0
 800d03c:	e7c8      	b.n	800cfd0 <_strtod_l+0x140>
 800d03e:	f1bb 0f08 	cmp.w	fp, #8
 800d042:	bfd8      	it	le
 800d044:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800d046:	f100 0001 	add.w	r0, r0, #1
 800d04a:	bfda      	itte	le
 800d04c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d050:	9309      	strle	r3, [sp, #36]	; 0x24
 800d052:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800d056:	f10b 0b01 	add.w	fp, fp, #1
 800d05a:	9015      	str	r0, [sp, #84]	; 0x54
 800d05c:	e7c1      	b.n	800cfe2 <_strtod_l+0x152>
 800d05e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d060:	1c5a      	adds	r2, r3, #1
 800d062:	9215      	str	r2, [sp, #84]	; 0x54
 800d064:	785a      	ldrb	r2, [r3, #1]
 800d066:	f1bb 0f00 	cmp.w	fp, #0
 800d06a:	d037      	beq.n	800d0dc <_strtod_l+0x24c>
 800d06c:	9005      	str	r0, [sp, #20]
 800d06e:	465e      	mov	r6, fp
 800d070:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d074:	2b09      	cmp	r3, #9
 800d076:	d912      	bls.n	800d09e <_strtod_l+0x20e>
 800d078:	2301      	movs	r3, #1
 800d07a:	e7c4      	b.n	800d006 <_strtod_l+0x176>
 800d07c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d07e:	1c5a      	adds	r2, r3, #1
 800d080:	9215      	str	r2, [sp, #84]	; 0x54
 800d082:	785a      	ldrb	r2, [r3, #1]
 800d084:	3001      	adds	r0, #1
 800d086:	2a30      	cmp	r2, #48	; 0x30
 800d088:	d0f8      	beq.n	800d07c <_strtod_l+0x1ec>
 800d08a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d08e:	2b08      	cmp	r3, #8
 800d090:	f200 84c1 	bhi.w	800da16 <_strtod_l+0xb86>
 800d094:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d096:	9005      	str	r0, [sp, #20]
 800d098:	2000      	movs	r0, #0
 800d09a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d09c:	4606      	mov	r6, r0
 800d09e:	3a30      	subs	r2, #48	; 0x30
 800d0a0:	f100 0301 	add.w	r3, r0, #1
 800d0a4:	d014      	beq.n	800d0d0 <_strtod_l+0x240>
 800d0a6:	9905      	ldr	r1, [sp, #20]
 800d0a8:	4419      	add	r1, r3
 800d0aa:	9105      	str	r1, [sp, #20]
 800d0ac:	4633      	mov	r3, r6
 800d0ae:	eb00 0c06 	add.w	ip, r0, r6
 800d0b2:	210a      	movs	r1, #10
 800d0b4:	4563      	cmp	r3, ip
 800d0b6:	d113      	bne.n	800d0e0 <_strtod_l+0x250>
 800d0b8:	1833      	adds	r3, r6, r0
 800d0ba:	2b08      	cmp	r3, #8
 800d0bc:	f106 0601 	add.w	r6, r6, #1
 800d0c0:	4406      	add	r6, r0
 800d0c2:	dc1a      	bgt.n	800d0fa <_strtod_l+0x26a>
 800d0c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0c6:	230a      	movs	r3, #10
 800d0c8:	fb03 2301 	mla	r3, r3, r1, r2
 800d0cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d0d2:	1c51      	adds	r1, r2, #1
 800d0d4:	9115      	str	r1, [sp, #84]	; 0x54
 800d0d6:	7852      	ldrb	r2, [r2, #1]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	e7c9      	b.n	800d070 <_strtod_l+0x1e0>
 800d0dc:	4658      	mov	r0, fp
 800d0de:	e7d2      	b.n	800d086 <_strtod_l+0x1f6>
 800d0e0:	2b08      	cmp	r3, #8
 800d0e2:	f103 0301 	add.w	r3, r3, #1
 800d0e6:	dc03      	bgt.n	800d0f0 <_strtod_l+0x260>
 800d0e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d0ea:	434f      	muls	r7, r1
 800d0ec:	9709      	str	r7, [sp, #36]	; 0x24
 800d0ee:	e7e1      	b.n	800d0b4 <_strtod_l+0x224>
 800d0f0:	2b10      	cmp	r3, #16
 800d0f2:	bfd8      	it	le
 800d0f4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800d0f8:	e7dc      	b.n	800d0b4 <_strtod_l+0x224>
 800d0fa:	2e10      	cmp	r6, #16
 800d0fc:	bfdc      	itt	le
 800d0fe:	230a      	movle	r3, #10
 800d100:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800d104:	e7e3      	b.n	800d0ce <_strtod_l+0x23e>
 800d106:	2300      	movs	r3, #0
 800d108:	9305      	str	r3, [sp, #20]
 800d10a:	2301      	movs	r3, #1
 800d10c:	e780      	b.n	800d010 <_strtod_l+0x180>
 800d10e:	f04f 0c00 	mov.w	ip, #0
 800d112:	1caa      	adds	r2, r5, #2
 800d114:	9215      	str	r2, [sp, #84]	; 0x54
 800d116:	78aa      	ldrb	r2, [r5, #2]
 800d118:	e788      	b.n	800d02c <_strtod_l+0x19c>
 800d11a:	f04f 0c01 	mov.w	ip, #1
 800d11e:	e7f8      	b.n	800d112 <_strtod_l+0x282>
 800d120:	08013bf0 	.word	0x08013bf0
 800d124:	08013bec 	.word	0x08013bec
 800d128:	7ff00000 	.word	0x7ff00000
 800d12c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d12e:	1c51      	adds	r1, r2, #1
 800d130:	9115      	str	r1, [sp, #84]	; 0x54
 800d132:	7852      	ldrb	r2, [r2, #1]
 800d134:	2a30      	cmp	r2, #48	; 0x30
 800d136:	d0f9      	beq.n	800d12c <_strtod_l+0x29c>
 800d138:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d13c:	2908      	cmp	r1, #8
 800d13e:	f63f af7a 	bhi.w	800d036 <_strtod_l+0x1a6>
 800d142:	3a30      	subs	r2, #48	; 0x30
 800d144:	9208      	str	r2, [sp, #32]
 800d146:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d148:	920c      	str	r2, [sp, #48]	; 0x30
 800d14a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d14c:	1c57      	adds	r7, r2, #1
 800d14e:	9715      	str	r7, [sp, #84]	; 0x54
 800d150:	7852      	ldrb	r2, [r2, #1]
 800d152:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d156:	f1be 0f09 	cmp.w	lr, #9
 800d15a:	d938      	bls.n	800d1ce <_strtod_l+0x33e>
 800d15c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d15e:	1a7f      	subs	r7, r7, r1
 800d160:	2f08      	cmp	r7, #8
 800d162:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d166:	dc03      	bgt.n	800d170 <_strtod_l+0x2e0>
 800d168:	9908      	ldr	r1, [sp, #32]
 800d16a:	428f      	cmp	r7, r1
 800d16c:	bfa8      	it	ge
 800d16e:	460f      	movge	r7, r1
 800d170:	f1bc 0f00 	cmp.w	ip, #0
 800d174:	d000      	beq.n	800d178 <_strtod_l+0x2e8>
 800d176:	427f      	negs	r7, r7
 800d178:	2e00      	cmp	r6, #0
 800d17a:	d14f      	bne.n	800d21c <_strtod_l+0x38c>
 800d17c:	9904      	ldr	r1, [sp, #16]
 800d17e:	4301      	orrs	r1, r0
 800d180:	f47f aec1 	bne.w	800cf06 <_strtod_l+0x76>
 800d184:	2b00      	cmp	r3, #0
 800d186:	f47f aedb 	bne.w	800cf40 <_strtod_l+0xb0>
 800d18a:	2a69      	cmp	r2, #105	; 0x69
 800d18c:	d029      	beq.n	800d1e2 <_strtod_l+0x352>
 800d18e:	dc26      	bgt.n	800d1de <_strtod_l+0x34e>
 800d190:	2a49      	cmp	r2, #73	; 0x49
 800d192:	d026      	beq.n	800d1e2 <_strtod_l+0x352>
 800d194:	2a4e      	cmp	r2, #78	; 0x4e
 800d196:	f47f aed3 	bne.w	800cf40 <_strtod_l+0xb0>
 800d19a:	499b      	ldr	r1, [pc, #620]	; (800d408 <_strtod_l+0x578>)
 800d19c:	a815      	add	r0, sp, #84	; 0x54
 800d19e:	f002 fe45 	bl	800fe2c <__match>
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	f43f aecc 	beq.w	800cf40 <_strtod_l+0xb0>
 800d1a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	2b28      	cmp	r3, #40	; 0x28
 800d1ae:	d12f      	bne.n	800d210 <_strtod_l+0x380>
 800d1b0:	4996      	ldr	r1, [pc, #600]	; (800d40c <_strtod_l+0x57c>)
 800d1b2:	aa18      	add	r2, sp, #96	; 0x60
 800d1b4:	a815      	add	r0, sp, #84	; 0x54
 800d1b6:	f002 fe4d 	bl	800fe54 <__hexnan>
 800d1ba:	2805      	cmp	r0, #5
 800d1bc:	d128      	bne.n	800d210 <_strtod_l+0x380>
 800d1be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d1c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d1c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d1c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d1cc:	e69b      	b.n	800cf06 <_strtod_l+0x76>
 800d1ce:	9f08      	ldr	r7, [sp, #32]
 800d1d0:	210a      	movs	r1, #10
 800d1d2:	fb01 2107 	mla	r1, r1, r7, r2
 800d1d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800d1da:	9208      	str	r2, [sp, #32]
 800d1dc:	e7b5      	b.n	800d14a <_strtod_l+0x2ba>
 800d1de:	2a6e      	cmp	r2, #110	; 0x6e
 800d1e0:	e7d9      	b.n	800d196 <_strtod_l+0x306>
 800d1e2:	498b      	ldr	r1, [pc, #556]	; (800d410 <_strtod_l+0x580>)
 800d1e4:	a815      	add	r0, sp, #84	; 0x54
 800d1e6:	f002 fe21 	bl	800fe2c <__match>
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	f43f aea8 	beq.w	800cf40 <_strtod_l+0xb0>
 800d1f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1f2:	4988      	ldr	r1, [pc, #544]	; (800d414 <_strtod_l+0x584>)
 800d1f4:	3b01      	subs	r3, #1
 800d1f6:	a815      	add	r0, sp, #84	; 0x54
 800d1f8:	9315      	str	r3, [sp, #84]	; 0x54
 800d1fa:	f002 fe17 	bl	800fe2c <__match>
 800d1fe:	b910      	cbnz	r0, 800d206 <_strtod_l+0x376>
 800d200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d202:	3301      	adds	r3, #1
 800d204:	9315      	str	r3, [sp, #84]	; 0x54
 800d206:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800d424 <_strtod_l+0x594>
 800d20a:	f04f 0800 	mov.w	r8, #0
 800d20e:	e67a      	b.n	800cf06 <_strtod_l+0x76>
 800d210:	4881      	ldr	r0, [pc, #516]	; (800d418 <_strtod_l+0x588>)
 800d212:	f001 fc8d 	bl	800eb30 <nan>
 800d216:	ec59 8b10 	vmov	r8, r9, d0
 800d21a:	e674      	b.n	800cf06 <_strtod_l+0x76>
 800d21c:	9b05      	ldr	r3, [sp, #20]
 800d21e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d220:	1afb      	subs	r3, r7, r3
 800d222:	f1bb 0f00 	cmp.w	fp, #0
 800d226:	bf08      	it	eq
 800d228:	46b3      	moveq	fp, r6
 800d22a:	2e10      	cmp	r6, #16
 800d22c:	9308      	str	r3, [sp, #32]
 800d22e:	4635      	mov	r5, r6
 800d230:	bfa8      	it	ge
 800d232:	2510      	movge	r5, #16
 800d234:	f7f3 f966 	bl	8000504 <__aeabi_ui2d>
 800d238:	2e09      	cmp	r6, #9
 800d23a:	4680      	mov	r8, r0
 800d23c:	4689      	mov	r9, r1
 800d23e:	dd13      	ble.n	800d268 <_strtod_l+0x3d8>
 800d240:	4b76      	ldr	r3, [pc, #472]	; (800d41c <_strtod_l+0x58c>)
 800d242:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d246:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d24a:	f7f3 f9d5 	bl	80005f8 <__aeabi_dmul>
 800d24e:	4680      	mov	r8, r0
 800d250:	4650      	mov	r0, sl
 800d252:	4689      	mov	r9, r1
 800d254:	f7f3 f956 	bl	8000504 <__aeabi_ui2d>
 800d258:	4602      	mov	r2, r0
 800d25a:	460b      	mov	r3, r1
 800d25c:	4640      	mov	r0, r8
 800d25e:	4649      	mov	r1, r9
 800d260:	f7f3 f814 	bl	800028c <__adddf3>
 800d264:	4680      	mov	r8, r0
 800d266:	4689      	mov	r9, r1
 800d268:	2e0f      	cmp	r6, #15
 800d26a:	dc38      	bgt.n	800d2de <_strtod_l+0x44e>
 800d26c:	9b08      	ldr	r3, [sp, #32]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	f43f ae49 	beq.w	800cf06 <_strtod_l+0x76>
 800d274:	dd24      	ble.n	800d2c0 <_strtod_l+0x430>
 800d276:	2b16      	cmp	r3, #22
 800d278:	dc0b      	bgt.n	800d292 <_strtod_l+0x402>
 800d27a:	4968      	ldr	r1, [pc, #416]	; (800d41c <_strtod_l+0x58c>)
 800d27c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d280:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d284:	4642      	mov	r2, r8
 800d286:	464b      	mov	r3, r9
 800d288:	f7f3 f9b6 	bl	80005f8 <__aeabi_dmul>
 800d28c:	4680      	mov	r8, r0
 800d28e:	4689      	mov	r9, r1
 800d290:	e639      	b.n	800cf06 <_strtod_l+0x76>
 800d292:	9a08      	ldr	r2, [sp, #32]
 800d294:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800d298:	4293      	cmp	r3, r2
 800d29a:	db20      	blt.n	800d2de <_strtod_l+0x44e>
 800d29c:	4c5f      	ldr	r4, [pc, #380]	; (800d41c <_strtod_l+0x58c>)
 800d29e:	f1c6 060f 	rsb	r6, r6, #15
 800d2a2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800d2a6:	4642      	mov	r2, r8
 800d2a8:	464b      	mov	r3, r9
 800d2aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2ae:	f7f3 f9a3 	bl	80005f8 <__aeabi_dmul>
 800d2b2:	9b08      	ldr	r3, [sp, #32]
 800d2b4:	1b9e      	subs	r6, r3, r6
 800d2b6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800d2ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d2be:	e7e3      	b.n	800d288 <_strtod_l+0x3f8>
 800d2c0:	9b08      	ldr	r3, [sp, #32]
 800d2c2:	3316      	adds	r3, #22
 800d2c4:	db0b      	blt.n	800d2de <_strtod_l+0x44e>
 800d2c6:	9b05      	ldr	r3, [sp, #20]
 800d2c8:	1bdf      	subs	r7, r3, r7
 800d2ca:	4b54      	ldr	r3, [pc, #336]	; (800d41c <_strtod_l+0x58c>)
 800d2cc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d2d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2d4:	4640      	mov	r0, r8
 800d2d6:	4649      	mov	r1, r9
 800d2d8:	f7f3 fab8 	bl	800084c <__aeabi_ddiv>
 800d2dc:	e7d6      	b.n	800d28c <_strtod_l+0x3fc>
 800d2de:	9b08      	ldr	r3, [sp, #32]
 800d2e0:	1b75      	subs	r5, r6, r5
 800d2e2:	441d      	add	r5, r3
 800d2e4:	2d00      	cmp	r5, #0
 800d2e6:	dd70      	ble.n	800d3ca <_strtod_l+0x53a>
 800d2e8:	f015 030f 	ands.w	r3, r5, #15
 800d2ec:	d00a      	beq.n	800d304 <_strtod_l+0x474>
 800d2ee:	494b      	ldr	r1, [pc, #300]	; (800d41c <_strtod_l+0x58c>)
 800d2f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d2f4:	4642      	mov	r2, r8
 800d2f6:	464b      	mov	r3, r9
 800d2f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2fc:	f7f3 f97c 	bl	80005f8 <__aeabi_dmul>
 800d300:	4680      	mov	r8, r0
 800d302:	4689      	mov	r9, r1
 800d304:	f035 050f 	bics.w	r5, r5, #15
 800d308:	d04d      	beq.n	800d3a6 <_strtod_l+0x516>
 800d30a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800d30e:	dd22      	ble.n	800d356 <_strtod_l+0x4c6>
 800d310:	2500      	movs	r5, #0
 800d312:	46ab      	mov	fp, r5
 800d314:	9509      	str	r5, [sp, #36]	; 0x24
 800d316:	9505      	str	r5, [sp, #20]
 800d318:	2322      	movs	r3, #34	; 0x22
 800d31a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800d424 <_strtod_l+0x594>
 800d31e:	6023      	str	r3, [r4, #0]
 800d320:	f04f 0800 	mov.w	r8, #0
 800d324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d326:	2b00      	cmp	r3, #0
 800d328:	f43f aded 	beq.w	800cf06 <_strtod_l+0x76>
 800d32c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d32e:	4620      	mov	r0, r4
 800d330:	f002 fe7e 	bl	8010030 <_Bfree>
 800d334:	9905      	ldr	r1, [sp, #20]
 800d336:	4620      	mov	r0, r4
 800d338:	f002 fe7a 	bl	8010030 <_Bfree>
 800d33c:	4659      	mov	r1, fp
 800d33e:	4620      	mov	r0, r4
 800d340:	f002 fe76 	bl	8010030 <_Bfree>
 800d344:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d346:	4620      	mov	r0, r4
 800d348:	f002 fe72 	bl	8010030 <_Bfree>
 800d34c:	4629      	mov	r1, r5
 800d34e:	4620      	mov	r0, r4
 800d350:	f002 fe6e 	bl	8010030 <_Bfree>
 800d354:	e5d7      	b.n	800cf06 <_strtod_l+0x76>
 800d356:	4b32      	ldr	r3, [pc, #200]	; (800d420 <_strtod_l+0x590>)
 800d358:	9304      	str	r3, [sp, #16]
 800d35a:	2300      	movs	r3, #0
 800d35c:	112d      	asrs	r5, r5, #4
 800d35e:	4640      	mov	r0, r8
 800d360:	4649      	mov	r1, r9
 800d362:	469a      	mov	sl, r3
 800d364:	2d01      	cmp	r5, #1
 800d366:	dc21      	bgt.n	800d3ac <_strtod_l+0x51c>
 800d368:	b10b      	cbz	r3, 800d36e <_strtod_l+0x4de>
 800d36a:	4680      	mov	r8, r0
 800d36c:	4689      	mov	r9, r1
 800d36e:	492c      	ldr	r1, [pc, #176]	; (800d420 <_strtod_l+0x590>)
 800d370:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d374:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d378:	4642      	mov	r2, r8
 800d37a:	464b      	mov	r3, r9
 800d37c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d380:	f7f3 f93a 	bl	80005f8 <__aeabi_dmul>
 800d384:	4b27      	ldr	r3, [pc, #156]	; (800d424 <_strtod_l+0x594>)
 800d386:	460a      	mov	r2, r1
 800d388:	400b      	ands	r3, r1
 800d38a:	4927      	ldr	r1, [pc, #156]	; (800d428 <_strtod_l+0x598>)
 800d38c:	428b      	cmp	r3, r1
 800d38e:	4680      	mov	r8, r0
 800d390:	d8be      	bhi.n	800d310 <_strtod_l+0x480>
 800d392:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d396:	428b      	cmp	r3, r1
 800d398:	bf86      	itte	hi
 800d39a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800d42c <_strtod_l+0x59c>
 800d39e:	f04f 38ff 	movhi.w	r8, #4294967295
 800d3a2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	9304      	str	r3, [sp, #16]
 800d3aa:	e07b      	b.n	800d4a4 <_strtod_l+0x614>
 800d3ac:	07ea      	lsls	r2, r5, #31
 800d3ae:	d505      	bpl.n	800d3bc <_strtod_l+0x52c>
 800d3b0:	9b04      	ldr	r3, [sp, #16]
 800d3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b6:	f7f3 f91f 	bl	80005f8 <__aeabi_dmul>
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	9a04      	ldr	r2, [sp, #16]
 800d3be:	3208      	adds	r2, #8
 800d3c0:	f10a 0a01 	add.w	sl, sl, #1
 800d3c4:	106d      	asrs	r5, r5, #1
 800d3c6:	9204      	str	r2, [sp, #16]
 800d3c8:	e7cc      	b.n	800d364 <_strtod_l+0x4d4>
 800d3ca:	d0ec      	beq.n	800d3a6 <_strtod_l+0x516>
 800d3cc:	426d      	negs	r5, r5
 800d3ce:	f015 020f 	ands.w	r2, r5, #15
 800d3d2:	d00a      	beq.n	800d3ea <_strtod_l+0x55a>
 800d3d4:	4b11      	ldr	r3, [pc, #68]	; (800d41c <_strtod_l+0x58c>)
 800d3d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3da:	4640      	mov	r0, r8
 800d3dc:	4649      	mov	r1, r9
 800d3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e2:	f7f3 fa33 	bl	800084c <__aeabi_ddiv>
 800d3e6:	4680      	mov	r8, r0
 800d3e8:	4689      	mov	r9, r1
 800d3ea:	112d      	asrs	r5, r5, #4
 800d3ec:	d0db      	beq.n	800d3a6 <_strtod_l+0x516>
 800d3ee:	2d1f      	cmp	r5, #31
 800d3f0:	dd1e      	ble.n	800d430 <_strtod_l+0x5a0>
 800d3f2:	2500      	movs	r5, #0
 800d3f4:	46ab      	mov	fp, r5
 800d3f6:	9509      	str	r5, [sp, #36]	; 0x24
 800d3f8:	9505      	str	r5, [sp, #20]
 800d3fa:	2322      	movs	r3, #34	; 0x22
 800d3fc:	f04f 0800 	mov.w	r8, #0
 800d400:	f04f 0900 	mov.w	r9, #0
 800d404:	6023      	str	r3, [r4, #0]
 800d406:	e78d      	b.n	800d324 <_strtod_l+0x494>
 800d408:	08013c4d 	.word	0x08013c4d
 800d40c:	08013c04 	.word	0x08013c04
 800d410:	08013c45 	.word	0x08013c45
 800d414:	08013c84 	.word	0x08013c84
 800d418:	08014011 	.word	0x08014011
 800d41c:	08013df0 	.word	0x08013df0
 800d420:	08013dc8 	.word	0x08013dc8
 800d424:	7ff00000 	.word	0x7ff00000
 800d428:	7ca00000 	.word	0x7ca00000
 800d42c:	7fefffff 	.word	0x7fefffff
 800d430:	f015 0310 	ands.w	r3, r5, #16
 800d434:	bf18      	it	ne
 800d436:	236a      	movne	r3, #106	; 0x6a
 800d438:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800d7dc <_strtod_l+0x94c>
 800d43c:	9304      	str	r3, [sp, #16]
 800d43e:	4640      	mov	r0, r8
 800d440:	4649      	mov	r1, r9
 800d442:	2300      	movs	r3, #0
 800d444:	07ea      	lsls	r2, r5, #31
 800d446:	d504      	bpl.n	800d452 <_strtod_l+0x5c2>
 800d448:	e9da 2300 	ldrd	r2, r3, [sl]
 800d44c:	f7f3 f8d4 	bl	80005f8 <__aeabi_dmul>
 800d450:	2301      	movs	r3, #1
 800d452:	106d      	asrs	r5, r5, #1
 800d454:	f10a 0a08 	add.w	sl, sl, #8
 800d458:	d1f4      	bne.n	800d444 <_strtod_l+0x5b4>
 800d45a:	b10b      	cbz	r3, 800d460 <_strtod_l+0x5d0>
 800d45c:	4680      	mov	r8, r0
 800d45e:	4689      	mov	r9, r1
 800d460:	9b04      	ldr	r3, [sp, #16]
 800d462:	b1bb      	cbz	r3, 800d494 <_strtod_l+0x604>
 800d464:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800d468:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	4649      	mov	r1, r9
 800d470:	dd10      	ble.n	800d494 <_strtod_l+0x604>
 800d472:	2b1f      	cmp	r3, #31
 800d474:	f340 811e 	ble.w	800d6b4 <_strtod_l+0x824>
 800d478:	2b34      	cmp	r3, #52	; 0x34
 800d47a:	bfde      	ittt	le
 800d47c:	f04f 33ff 	movle.w	r3, #4294967295
 800d480:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d484:	4093      	lslle	r3, r2
 800d486:	f04f 0800 	mov.w	r8, #0
 800d48a:	bfcc      	ite	gt
 800d48c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d490:	ea03 0901 	andle.w	r9, r3, r1
 800d494:	2200      	movs	r2, #0
 800d496:	2300      	movs	r3, #0
 800d498:	4640      	mov	r0, r8
 800d49a:	4649      	mov	r1, r9
 800d49c:	f7f3 fb14 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	d1a6      	bne.n	800d3f2 <_strtod_l+0x562>
 800d4a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d4aa:	4633      	mov	r3, r6
 800d4ac:	465a      	mov	r2, fp
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	f002 fe26 	bl	8010100 <__s2b>
 800d4b4:	9009      	str	r0, [sp, #36]	; 0x24
 800d4b6:	2800      	cmp	r0, #0
 800d4b8:	f43f af2a 	beq.w	800d310 <_strtod_l+0x480>
 800d4bc:	9a08      	ldr	r2, [sp, #32]
 800d4be:	9b05      	ldr	r3, [sp, #20]
 800d4c0:	2a00      	cmp	r2, #0
 800d4c2:	eba3 0307 	sub.w	r3, r3, r7
 800d4c6:	bfa8      	it	ge
 800d4c8:	2300      	movge	r3, #0
 800d4ca:	930c      	str	r3, [sp, #48]	; 0x30
 800d4cc:	2500      	movs	r5, #0
 800d4ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d4d2:	9312      	str	r3, [sp, #72]	; 0x48
 800d4d4:	46ab      	mov	fp, r5
 800d4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4d8:	4620      	mov	r0, r4
 800d4da:	6859      	ldr	r1, [r3, #4]
 800d4dc:	f002 fd68 	bl	800ffb0 <_Balloc>
 800d4e0:	9005      	str	r0, [sp, #20]
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	f43f af18 	beq.w	800d318 <_strtod_l+0x488>
 800d4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4ea:	691a      	ldr	r2, [r3, #16]
 800d4ec:	3202      	adds	r2, #2
 800d4ee:	f103 010c 	add.w	r1, r3, #12
 800d4f2:	0092      	lsls	r2, r2, #2
 800d4f4:	300c      	adds	r0, #12
 800d4f6:	f001 fb0a 	bl	800eb0e <memcpy>
 800d4fa:	ec49 8b10 	vmov	d0, r8, r9
 800d4fe:	aa18      	add	r2, sp, #96	; 0x60
 800d500:	a917      	add	r1, sp, #92	; 0x5c
 800d502:	4620      	mov	r0, r4
 800d504:	f003 f930 	bl	8010768 <__d2b>
 800d508:	ec49 8b18 	vmov	d8, r8, r9
 800d50c:	9016      	str	r0, [sp, #88]	; 0x58
 800d50e:	2800      	cmp	r0, #0
 800d510:	f43f af02 	beq.w	800d318 <_strtod_l+0x488>
 800d514:	2101      	movs	r1, #1
 800d516:	4620      	mov	r0, r4
 800d518:	f002 fe8a 	bl	8010230 <__i2b>
 800d51c:	4683      	mov	fp, r0
 800d51e:	2800      	cmp	r0, #0
 800d520:	f43f aefa 	beq.w	800d318 <_strtod_l+0x488>
 800d524:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d526:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d528:	2e00      	cmp	r6, #0
 800d52a:	bfab      	itete	ge
 800d52c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800d52e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800d530:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d532:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800d536:	bfac      	ite	ge
 800d538:	eb06 0a03 	addge.w	sl, r6, r3
 800d53c:	1b9f      	sublt	r7, r3, r6
 800d53e:	9b04      	ldr	r3, [sp, #16]
 800d540:	1af6      	subs	r6, r6, r3
 800d542:	4416      	add	r6, r2
 800d544:	4ba0      	ldr	r3, [pc, #640]	; (800d7c8 <_strtod_l+0x938>)
 800d546:	3e01      	subs	r6, #1
 800d548:	429e      	cmp	r6, r3
 800d54a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d54e:	f280 80c4 	bge.w	800d6da <_strtod_l+0x84a>
 800d552:	1b9b      	subs	r3, r3, r6
 800d554:	2b1f      	cmp	r3, #31
 800d556:	eba2 0203 	sub.w	r2, r2, r3
 800d55a:	f04f 0101 	mov.w	r1, #1
 800d55e:	f300 80b0 	bgt.w	800d6c2 <_strtod_l+0x832>
 800d562:	fa01 f303 	lsl.w	r3, r1, r3
 800d566:	930e      	str	r3, [sp, #56]	; 0x38
 800d568:	2300      	movs	r3, #0
 800d56a:	930d      	str	r3, [sp, #52]	; 0x34
 800d56c:	eb0a 0602 	add.w	r6, sl, r2
 800d570:	9b04      	ldr	r3, [sp, #16]
 800d572:	45b2      	cmp	sl, r6
 800d574:	4417      	add	r7, r2
 800d576:	441f      	add	r7, r3
 800d578:	4653      	mov	r3, sl
 800d57a:	bfa8      	it	ge
 800d57c:	4633      	movge	r3, r6
 800d57e:	42bb      	cmp	r3, r7
 800d580:	bfa8      	it	ge
 800d582:	463b      	movge	r3, r7
 800d584:	2b00      	cmp	r3, #0
 800d586:	bfc2      	ittt	gt
 800d588:	1af6      	subgt	r6, r6, r3
 800d58a:	1aff      	subgt	r7, r7, r3
 800d58c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800d590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d592:	2b00      	cmp	r3, #0
 800d594:	dd17      	ble.n	800d5c6 <_strtod_l+0x736>
 800d596:	4659      	mov	r1, fp
 800d598:	461a      	mov	r2, r3
 800d59a:	4620      	mov	r0, r4
 800d59c:	f002 ff08 	bl	80103b0 <__pow5mult>
 800d5a0:	4683      	mov	fp, r0
 800d5a2:	2800      	cmp	r0, #0
 800d5a4:	f43f aeb8 	beq.w	800d318 <_strtod_l+0x488>
 800d5a8:	4601      	mov	r1, r0
 800d5aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f002 fe55 	bl	801025c <__multiply>
 800d5b2:	900b      	str	r0, [sp, #44]	; 0x2c
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	f43f aeaf 	beq.w	800d318 <_strtod_l+0x488>
 800d5ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d5bc:	4620      	mov	r0, r4
 800d5be:	f002 fd37 	bl	8010030 <_Bfree>
 800d5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5c4:	9316      	str	r3, [sp, #88]	; 0x58
 800d5c6:	2e00      	cmp	r6, #0
 800d5c8:	f300 808c 	bgt.w	800d6e4 <_strtod_l+0x854>
 800d5cc:	9b08      	ldr	r3, [sp, #32]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	dd08      	ble.n	800d5e4 <_strtod_l+0x754>
 800d5d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d5d4:	9905      	ldr	r1, [sp, #20]
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	f002 feea 	bl	80103b0 <__pow5mult>
 800d5dc:	9005      	str	r0, [sp, #20]
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	f43f ae9a 	beq.w	800d318 <_strtod_l+0x488>
 800d5e4:	2f00      	cmp	r7, #0
 800d5e6:	dd08      	ble.n	800d5fa <_strtod_l+0x76a>
 800d5e8:	9905      	ldr	r1, [sp, #20]
 800d5ea:	463a      	mov	r2, r7
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	f002 ff39 	bl	8010464 <__lshift>
 800d5f2:	9005      	str	r0, [sp, #20]
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	f43f ae8f 	beq.w	800d318 <_strtod_l+0x488>
 800d5fa:	f1ba 0f00 	cmp.w	sl, #0
 800d5fe:	dd08      	ble.n	800d612 <_strtod_l+0x782>
 800d600:	4659      	mov	r1, fp
 800d602:	4652      	mov	r2, sl
 800d604:	4620      	mov	r0, r4
 800d606:	f002 ff2d 	bl	8010464 <__lshift>
 800d60a:	4683      	mov	fp, r0
 800d60c:	2800      	cmp	r0, #0
 800d60e:	f43f ae83 	beq.w	800d318 <_strtod_l+0x488>
 800d612:	9a05      	ldr	r2, [sp, #20]
 800d614:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d616:	4620      	mov	r0, r4
 800d618:	f002 ffac 	bl	8010574 <__mdiff>
 800d61c:	4605      	mov	r5, r0
 800d61e:	2800      	cmp	r0, #0
 800d620:	f43f ae7a 	beq.w	800d318 <_strtod_l+0x488>
 800d624:	68c3      	ldr	r3, [r0, #12]
 800d626:	930b      	str	r3, [sp, #44]	; 0x2c
 800d628:	2300      	movs	r3, #0
 800d62a:	60c3      	str	r3, [r0, #12]
 800d62c:	4659      	mov	r1, fp
 800d62e:	f002 ff85 	bl	801053c <__mcmp>
 800d632:	2800      	cmp	r0, #0
 800d634:	da60      	bge.n	800d6f8 <_strtod_l+0x868>
 800d636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d638:	ea53 0308 	orrs.w	r3, r3, r8
 800d63c:	f040 8084 	bne.w	800d748 <_strtod_l+0x8b8>
 800d640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d644:	2b00      	cmp	r3, #0
 800d646:	d17f      	bne.n	800d748 <_strtod_l+0x8b8>
 800d648:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d64c:	0d1b      	lsrs	r3, r3, #20
 800d64e:	051b      	lsls	r3, r3, #20
 800d650:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d654:	d978      	bls.n	800d748 <_strtod_l+0x8b8>
 800d656:	696b      	ldr	r3, [r5, #20]
 800d658:	b913      	cbnz	r3, 800d660 <_strtod_l+0x7d0>
 800d65a:	692b      	ldr	r3, [r5, #16]
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	dd73      	ble.n	800d748 <_strtod_l+0x8b8>
 800d660:	4629      	mov	r1, r5
 800d662:	2201      	movs	r2, #1
 800d664:	4620      	mov	r0, r4
 800d666:	f002 fefd 	bl	8010464 <__lshift>
 800d66a:	4659      	mov	r1, fp
 800d66c:	4605      	mov	r5, r0
 800d66e:	f002 ff65 	bl	801053c <__mcmp>
 800d672:	2800      	cmp	r0, #0
 800d674:	dd68      	ble.n	800d748 <_strtod_l+0x8b8>
 800d676:	9904      	ldr	r1, [sp, #16]
 800d678:	4a54      	ldr	r2, [pc, #336]	; (800d7cc <_strtod_l+0x93c>)
 800d67a:	464b      	mov	r3, r9
 800d67c:	2900      	cmp	r1, #0
 800d67e:	f000 8084 	beq.w	800d78a <_strtod_l+0x8fa>
 800d682:	ea02 0109 	and.w	r1, r2, r9
 800d686:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d68a:	dc7e      	bgt.n	800d78a <_strtod_l+0x8fa>
 800d68c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d690:	f77f aeb3 	ble.w	800d3fa <_strtod_l+0x56a>
 800d694:	4b4e      	ldr	r3, [pc, #312]	; (800d7d0 <_strtod_l+0x940>)
 800d696:	4640      	mov	r0, r8
 800d698:	4649      	mov	r1, r9
 800d69a:	2200      	movs	r2, #0
 800d69c:	f7f2 ffac 	bl	80005f8 <__aeabi_dmul>
 800d6a0:	4b4a      	ldr	r3, [pc, #296]	; (800d7cc <_strtod_l+0x93c>)
 800d6a2:	400b      	ands	r3, r1
 800d6a4:	4680      	mov	r8, r0
 800d6a6:	4689      	mov	r9, r1
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	f47f ae3f 	bne.w	800d32c <_strtod_l+0x49c>
 800d6ae:	2322      	movs	r3, #34	; 0x22
 800d6b0:	6023      	str	r3, [r4, #0]
 800d6b2:	e63b      	b.n	800d32c <_strtod_l+0x49c>
 800d6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d6bc:	ea03 0808 	and.w	r8, r3, r8
 800d6c0:	e6e8      	b.n	800d494 <_strtod_l+0x604>
 800d6c2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d6c6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d6ca:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d6ce:	36e2      	adds	r6, #226	; 0xe2
 800d6d0:	fa01 f306 	lsl.w	r3, r1, r6
 800d6d4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800d6d8:	e748      	b.n	800d56c <_strtod_l+0x6dc>
 800d6da:	2100      	movs	r1, #0
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800d6e2:	e743      	b.n	800d56c <_strtod_l+0x6dc>
 800d6e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d6e6:	4632      	mov	r2, r6
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	f002 febb 	bl	8010464 <__lshift>
 800d6ee:	9016      	str	r0, [sp, #88]	; 0x58
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	f47f af6b 	bne.w	800d5cc <_strtod_l+0x73c>
 800d6f6:	e60f      	b.n	800d318 <_strtod_l+0x488>
 800d6f8:	46ca      	mov	sl, r9
 800d6fa:	d171      	bne.n	800d7e0 <_strtod_l+0x950>
 800d6fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d6fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d702:	b352      	cbz	r2, 800d75a <_strtod_l+0x8ca>
 800d704:	4a33      	ldr	r2, [pc, #204]	; (800d7d4 <_strtod_l+0x944>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d12a      	bne.n	800d760 <_strtod_l+0x8d0>
 800d70a:	9b04      	ldr	r3, [sp, #16]
 800d70c:	4641      	mov	r1, r8
 800d70e:	b1fb      	cbz	r3, 800d750 <_strtod_l+0x8c0>
 800d710:	4b2e      	ldr	r3, [pc, #184]	; (800d7cc <_strtod_l+0x93c>)
 800d712:	ea09 0303 	and.w	r3, r9, r3
 800d716:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d71a:	f04f 32ff 	mov.w	r2, #4294967295
 800d71e:	d81a      	bhi.n	800d756 <_strtod_l+0x8c6>
 800d720:	0d1b      	lsrs	r3, r3, #20
 800d722:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d726:	fa02 f303 	lsl.w	r3, r2, r3
 800d72a:	4299      	cmp	r1, r3
 800d72c:	d118      	bne.n	800d760 <_strtod_l+0x8d0>
 800d72e:	4b2a      	ldr	r3, [pc, #168]	; (800d7d8 <_strtod_l+0x948>)
 800d730:	459a      	cmp	sl, r3
 800d732:	d102      	bne.n	800d73a <_strtod_l+0x8aa>
 800d734:	3101      	adds	r1, #1
 800d736:	f43f adef 	beq.w	800d318 <_strtod_l+0x488>
 800d73a:	4b24      	ldr	r3, [pc, #144]	; (800d7cc <_strtod_l+0x93c>)
 800d73c:	ea0a 0303 	and.w	r3, sl, r3
 800d740:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800d744:	f04f 0800 	mov.w	r8, #0
 800d748:	9b04      	ldr	r3, [sp, #16]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d1a2      	bne.n	800d694 <_strtod_l+0x804>
 800d74e:	e5ed      	b.n	800d32c <_strtod_l+0x49c>
 800d750:	f04f 33ff 	mov.w	r3, #4294967295
 800d754:	e7e9      	b.n	800d72a <_strtod_l+0x89a>
 800d756:	4613      	mov	r3, r2
 800d758:	e7e7      	b.n	800d72a <_strtod_l+0x89a>
 800d75a:	ea53 0308 	orrs.w	r3, r3, r8
 800d75e:	d08a      	beq.n	800d676 <_strtod_l+0x7e6>
 800d760:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d762:	b1e3      	cbz	r3, 800d79e <_strtod_l+0x90e>
 800d764:	ea13 0f0a 	tst.w	r3, sl
 800d768:	d0ee      	beq.n	800d748 <_strtod_l+0x8b8>
 800d76a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d76c:	9a04      	ldr	r2, [sp, #16]
 800d76e:	4640      	mov	r0, r8
 800d770:	4649      	mov	r1, r9
 800d772:	b1c3      	cbz	r3, 800d7a6 <_strtod_l+0x916>
 800d774:	f7ff fb70 	bl	800ce58 <sulp>
 800d778:	4602      	mov	r2, r0
 800d77a:	460b      	mov	r3, r1
 800d77c:	ec51 0b18 	vmov	r0, r1, d8
 800d780:	f7f2 fd84 	bl	800028c <__adddf3>
 800d784:	4680      	mov	r8, r0
 800d786:	4689      	mov	r9, r1
 800d788:	e7de      	b.n	800d748 <_strtod_l+0x8b8>
 800d78a:	4013      	ands	r3, r2
 800d78c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d790:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d794:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d798:	f04f 38ff 	mov.w	r8, #4294967295
 800d79c:	e7d4      	b.n	800d748 <_strtod_l+0x8b8>
 800d79e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7a0:	ea13 0f08 	tst.w	r3, r8
 800d7a4:	e7e0      	b.n	800d768 <_strtod_l+0x8d8>
 800d7a6:	f7ff fb57 	bl	800ce58 <sulp>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	ec51 0b18 	vmov	r0, r1, d8
 800d7b2:	f7f2 fd69 	bl	8000288 <__aeabi_dsub>
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	4680      	mov	r8, r0
 800d7bc:	4689      	mov	r9, r1
 800d7be:	f7f3 f983 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	d0c0      	beq.n	800d748 <_strtod_l+0x8b8>
 800d7c6:	e618      	b.n	800d3fa <_strtod_l+0x56a>
 800d7c8:	fffffc02 	.word	0xfffffc02
 800d7cc:	7ff00000 	.word	0x7ff00000
 800d7d0:	39500000 	.word	0x39500000
 800d7d4:	000fffff 	.word	0x000fffff
 800d7d8:	7fefffff 	.word	0x7fefffff
 800d7dc:	08013c18 	.word	0x08013c18
 800d7e0:	4659      	mov	r1, fp
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	f003 f81a 	bl	801081c <__ratio>
 800d7e8:	ec57 6b10 	vmov	r6, r7, d0
 800d7ec:	ee10 0a10 	vmov	r0, s0
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7f6:	4639      	mov	r1, r7
 800d7f8:	f7f3 f97a 	bl	8000af0 <__aeabi_dcmple>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d071      	beq.n	800d8e4 <_strtod_l+0xa54>
 800d800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d802:	2b00      	cmp	r3, #0
 800d804:	d17c      	bne.n	800d900 <_strtod_l+0xa70>
 800d806:	f1b8 0f00 	cmp.w	r8, #0
 800d80a:	d15a      	bne.n	800d8c2 <_strtod_l+0xa32>
 800d80c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d810:	2b00      	cmp	r3, #0
 800d812:	d15d      	bne.n	800d8d0 <_strtod_l+0xa40>
 800d814:	4b90      	ldr	r3, [pc, #576]	; (800da58 <_strtod_l+0xbc8>)
 800d816:	2200      	movs	r2, #0
 800d818:	4630      	mov	r0, r6
 800d81a:	4639      	mov	r1, r7
 800d81c:	f7f3 f95e 	bl	8000adc <__aeabi_dcmplt>
 800d820:	2800      	cmp	r0, #0
 800d822:	d15c      	bne.n	800d8de <_strtod_l+0xa4e>
 800d824:	4630      	mov	r0, r6
 800d826:	4639      	mov	r1, r7
 800d828:	4b8c      	ldr	r3, [pc, #560]	; (800da5c <_strtod_l+0xbcc>)
 800d82a:	2200      	movs	r2, #0
 800d82c:	f7f2 fee4 	bl	80005f8 <__aeabi_dmul>
 800d830:	4606      	mov	r6, r0
 800d832:	460f      	mov	r7, r1
 800d834:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d838:	9606      	str	r6, [sp, #24]
 800d83a:	9307      	str	r3, [sp, #28]
 800d83c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d840:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d844:	4b86      	ldr	r3, [pc, #536]	; (800da60 <_strtod_l+0xbd0>)
 800d846:	ea0a 0303 	and.w	r3, sl, r3
 800d84a:	930d      	str	r3, [sp, #52]	; 0x34
 800d84c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d84e:	4b85      	ldr	r3, [pc, #532]	; (800da64 <_strtod_l+0xbd4>)
 800d850:	429a      	cmp	r2, r3
 800d852:	f040 8090 	bne.w	800d976 <_strtod_l+0xae6>
 800d856:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800d85a:	ec49 8b10 	vmov	d0, r8, r9
 800d85e:	f002 ff13 	bl	8010688 <__ulp>
 800d862:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d866:	ec51 0b10 	vmov	r0, r1, d0
 800d86a:	f7f2 fec5 	bl	80005f8 <__aeabi_dmul>
 800d86e:	4642      	mov	r2, r8
 800d870:	464b      	mov	r3, r9
 800d872:	f7f2 fd0b 	bl	800028c <__adddf3>
 800d876:	460b      	mov	r3, r1
 800d878:	4979      	ldr	r1, [pc, #484]	; (800da60 <_strtod_l+0xbd0>)
 800d87a:	4a7b      	ldr	r2, [pc, #492]	; (800da68 <_strtod_l+0xbd8>)
 800d87c:	4019      	ands	r1, r3
 800d87e:	4291      	cmp	r1, r2
 800d880:	4680      	mov	r8, r0
 800d882:	d944      	bls.n	800d90e <_strtod_l+0xa7e>
 800d884:	ee18 2a90 	vmov	r2, s17
 800d888:	4b78      	ldr	r3, [pc, #480]	; (800da6c <_strtod_l+0xbdc>)
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d104      	bne.n	800d898 <_strtod_l+0xa08>
 800d88e:	ee18 3a10 	vmov	r3, s16
 800d892:	3301      	adds	r3, #1
 800d894:	f43f ad40 	beq.w	800d318 <_strtod_l+0x488>
 800d898:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800da6c <_strtod_l+0xbdc>
 800d89c:	f04f 38ff 	mov.w	r8, #4294967295
 800d8a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d8a2:	4620      	mov	r0, r4
 800d8a4:	f002 fbc4 	bl	8010030 <_Bfree>
 800d8a8:	9905      	ldr	r1, [sp, #20]
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	f002 fbc0 	bl	8010030 <_Bfree>
 800d8b0:	4659      	mov	r1, fp
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	f002 fbbc 	bl	8010030 <_Bfree>
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	f002 fbb8 	bl	8010030 <_Bfree>
 800d8c0:	e609      	b.n	800d4d6 <_strtod_l+0x646>
 800d8c2:	f1b8 0f01 	cmp.w	r8, #1
 800d8c6:	d103      	bne.n	800d8d0 <_strtod_l+0xa40>
 800d8c8:	f1b9 0f00 	cmp.w	r9, #0
 800d8cc:	f43f ad95 	beq.w	800d3fa <_strtod_l+0x56a>
 800d8d0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800da28 <_strtod_l+0xb98>
 800d8d4:	4f60      	ldr	r7, [pc, #384]	; (800da58 <_strtod_l+0xbc8>)
 800d8d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d8da:	2600      	movs	r6, #0
 800d8dc:	e7ae      	b.n	800d83c <_strtod_l+0x9ac>
 800d8de:	4f5f      	ldr	r7, [pc, #380]	; (800da5c <_strtod_l+0xbcc>)
 800d8e0:	2600      	movs	r6, #0
 800d8e2:	e7a7      	b.n	800d834 <_strtod_l+0x9a4>
 800d8e4:	4b5d      	ldr	r3, [pc, #372]	; (800da5c <_strtod_l+0xbcc>)
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	4639      	mov	r1, r7
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f7f2 fe84 	bl	80005f8 <__aeabi_dmul>
 800d8f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8f2:	4606      	mov	r6, r0
 800d8f4:	460f      	mov	r7, r1
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d09c      	beq.n	800d834 <_strtod_l+0x9a4>
 800d8fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d8fe:	e79d      	b.n	800d83c <_strtod_l+0x9ac>
 800d900:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800da30 <_strtod_l+0xba0>
 800d904:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d908:	ec57 6b17 	vmov	r6, r7, d7
 800d90c:	e796      	b.n	800d83c <_strtod_l+0x9ac>
 800d90e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800d912:	9b04      	ldr	r3, [sp, #16]
 800d914:	46ca      	mov	sl, r9
 800d916:	2b00      	cmp	r3, #0
 800d918:	d1c2      	bne.n	800d8a0 <_strtod_l+0xa10>
 800d91a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d91e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d920:	0d1b      	lsrs	r3, r3, #20
 800d922:	051b      	lsls	r3, r3, #20
 800d924:	429a      	cmp	r2, r3
 800d926:	d1bb      	bne.n	800d8a0 <_strtod_l+0xa10>
 800d928:	4630      	mov	r0, r6
 800d92a:	4639      	mov	r1, r7
 800d92c:	f7f3 f9c4 	bl	8000cb8 <__aeabi_d2lz>
 800d930:	f7f2 fe34 	bl	800059c <__aeabi_l2d>
 800d934:	4602      	mov	r2, r0
 800d936:	460b      	mov	r3, r1
 800d938:	4630      	mov	r0, r6
 800d93a:	4639      	mov	r1, r7
 800d93c:	f7f2 fca4 	bl	8000288 <__aeabi_dsub>
 800d940:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d942:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d946:	ea43 0308 	orr.w	r3, r3, r8
 800d94a:	4313      	orrs	r3, r2
 800d94c:	4606      	mov	r6, r0
 800d94e:	460f      	mov	r7, r1
 800d950:	d054      	beq.n	800d9fc <_strtod_l+0xb6c>
 800d952:	a339      	add	r3, pc, #228	; (adr r3, 800da38 <_strtod_l+0xba8>)
 800d954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d958:	f7f3 f8c0 	bl	8000adc <__aeabi_dcmplt>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	f47f ace5 	bne.w	800d32c <_strtod_l+0x49c>
 800d962:	a337      	add	r3, pc, #220	; (adr r3, 800da40 <_strtod_l+0xbb0>)
 800d964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d968:	4630      	mov	r0, r6
 800d96a:	4639      	mov	r1, r7
 800d96c:	f7f3 f8d4 	bl	8000b18 <__aeabi_dcmpgt>
 800d970:	2800      	cmp	r0, #0
 800d972:	d095      	beq.n	800d8a0 <_strtod_l+0xa10>
 800d974:	e4da      	b.n	800d32c <_strtod_l+0x49c>
 800d976:	9b04      	ldr	r3, [sp, #16]
 800d978:	b333      	cbz	r3, 800d9c8 <_strtod_l+0xb38>
 800d97a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d97c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d980:	d822      	bhi.n	800d9c8 <_strtod_l+0xb38>
 800d982:	a331      	add	r3, pc, #196	; (adr r3, 800da48 <_strtod_l+0xbb8>)
 800d984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d988:	4630      	mov	r0, r6
 800d98a:	4639      	mov	r1, r7
 800d98c:	f7f3 f8b0 	bl	8000af0 <__aeabi_dcmple>
 800d990:	b1a0      	cbz	r0, 800d9bc <_strtod_l+0xb2c>
 800d992:	4639      	mov	r1, r7
 800d994:	4630      	mov	r0, r6
 800d996:	f7f3 f907 	bl	8000ba8 <__aeabi_d2uiz>
 800d99a:	2801      	cmp	r0, #1
 800d99c:	bf38      	it	cc
 800d99e:	2001      	movcc	r0, #1
 800d9a0:	f7f2 fdb0 	bl	8000504 <__aeabi_ui2d>
 800d9a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9a6:	4606      	mov	r6, r0
 800d9a8:	460f      	mov	r7, r1
 800d9aa:	bb23      	cbnz	r3, 800d9f6 <_strtod_l+0xb66>
 800d9ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9b0:	9010      	str	r0, [sp, #64]	; 0x40
 800d9b2:	9311      	str	r3, [sp, #68]	; 0x44
 800d9b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d9b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800d9bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d9be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d9c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d9c4:	1a9b      	subs	r3, r3, r2
 800d9c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d9cc:	eeb0 0a48 	vmov.f32	s0, s16
 800d9d0:	eef0 0a68 	vmov.f32	s1, s17
 800d9d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d9d8:	f002 fe56 	bl	8010688 <__ulp>
 800d9dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d9e0:	ec53 2b10 	vmov	r2, r3, d0
 800d9e4:	f7f2 fe08 	bl	80005f8 <__aeabi_dmul>
 800d9e8:	ec53 2b18 	vmov	r2, r3, d8
 800d9ec:	f7f2 fc4e 	bl	800028c <__adddf3>
 800d9f0:	4680      	mov	r8, r0
 800d9f2:	4689      	mov	r9, r1
 800d9f4:	e78d      	b.n	800d912 <_strtod_l+0xa82>
 800d9f6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800d9fa:	e7db      	b.n	800d9b4 <_strtod_l+0xb24>
 800d9fc:	a314      	add	r3, pc, #80	; (adr r3, 800da50 <_strtod_l+0xbc0>)
 800d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da02:	f7f3 f86b 	bl	8000adc <__aeabi_dcmplt>
 800da06:	e7b3      	b.n	800d970 <_strtod_l+0xae0>
 800da08:	2300      	movs	r3, #0
 800da0a:	930a      	str	r3, [sp, #40]	; 0x28
 800da0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800da0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da10:	6013      	str	r3, [r2, #0]
 800da12:	f7ff ba7c 	b.w	800cf0e <_strtod_l+0x7e>
 800da16:	2a65      	cmp	r2, #101	; 0x65
 800da18:	f43f ab75 	beq.w	800d106 <_strtod_l+0x276>
 800da1c:	2a45      	cmp	r2, #69	; 0x45
 800da1e:	f43f ab72 	beq.w	800d106 <_strtod_l+0x276>
 800da22:	2301      	movs	r3, #1
 800da24:	f7ff bbaa 	b.w	800d17c <_strtod_l+0x2ec>
 800da28:	00000000 	.word	0x00000000
 800da2c:	bff00000 	.word	0xbff00000
 800da30:	00000000 	.word	0x00000000
 800da34:	3ff00000 	.word	0x3ff00000
 800da38:	94a03595 	.word	0x94a03595
 800da3c:	3fdfffff 	.word	0x3fdfffff
 800da40:	35afe535 	.word	0x35afe535
 800da44:	3fe00000 	.word	0x3fe00000
 800da48:	ffc00000 	.word	0xffc00000
 800da4c:	41dfffff 	.word	0x41dfffff
 800da50:	94a03595 	.word	0x94a03595
 800da54:	3fcfffff 	.word	0x3fcfffff
 800da58:	3ff00000 	.word	0x3ff00000
 800da5c:	3fe00000 	.word	0x3fe00000
 800da60:	7ff00000 	.word	0x7ff00000
 800da64:	7fe00000 	.word	0x7fe00000
 800da68:	7c9fffff 	.word	0x7c9fffff
 800da6c:	7fefffff 	.word	0x7fefffff

0800da70 <_strtod_r>:
 800da70:	4b01      	ldr	r3, [pc, #4]	; (800da78 <_strtod_r+0x8>)
 800da72:	f7ff ba0d 	b.w	800ce90 <_strtod_l>
 800da76:	bf00      	nop
 800da78:	2000004c 	.word	0x2000004c

0800da7c <strtod>:
 800da7c:	460a      	mov	r2, r1
 800da7e:	4601      	mov	r1, r0
 800da80:	4802      	ldr	r0, [pc, #8]	; (800da8c <strtod+0x10>)
 800da82:	4b03      	ldr	r3, [pc, #12]	; (800da90 <strtod+0x14>)
 800da84:	6800      	ldr	r0, [r0, #0]
 800da86:	f7ff ba03 	b.w	800ce90 <_strtod_l>
 800da8a:	bf00      	nop
 800da8c:	20000204 	.word	0x20000204
 800da90:	2000004c 	.word	0x2000004c

0800da94 <__cvt>:
 800da94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da98:	ec55 4b10 	vmov	r4, r5, d0
 800da9c:	2d00      	cmp	r5, #0
 800da9e:	460e      	mov	r6, r1
 800daa0:	4619      	mov	r1, r3
 800daa2:	462b      	mov	r3, r5
 800daa4:	bfbb      	ittet	lt
 800daa6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800daaa:	461d      	movlt	r5, r3
 800daac:	2300      	movge	r3, #0
 800daae:	232d      	movlt	r3, #45	; 0x2d
 800dab0:	700b      	strb	r3, [r1, #0]
 800dab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dab4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dab8:	4691      	mov	r9, r2
 800daba:	f023 0820 	bic.w	r8, r3, #32
 800dabe:	bfbc      	itt	lt
 800dac0:	4622      	movlt	r2, r4
 800dac2:	4614      	movlt	r4, r2
 800dac4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dac8:	d005      	beq.n	800dad6 <__cvt+0x42>
 800daca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dace:	d100      	bne.n	800dad2 <__cvt+0x3e>
 800dad0:	3601      	adds	r6, #1
 800dad2:	2102      	movs	r1, #2
 800dad4:	e000      	b.n	800dad8 <__cvt+0x44>
 800dad6:	2103      	movs	r1, #3
 800dad8:	ab03      	add	r3, sp, #12
 800dada:	9301      	str	r3, [sp, #4]
 800dadc:	ab02      	add	r3, sp, #8
 800dade:	9300      	str	r3, [sp, #0]
 800dae0:	ec45 4b10 	vmov	d0, r4, r5
 800dae4:	4653      	mov	r3, sl
 800dae6:	4632      	mov	r2, r6
 800dae8:	f001 f8ba 	bl	800ec60 <_dtoa_r>
 800daec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800daf0:	4607      	mov	r7, r0
 800daf2:	d102      	bne.n	800dafa <__cvt+0x66>
 800daf4:	f019 0f01 	tst.w	r9, #1
 800daf8:	d022      	beq.n	800db40 <__cvt+0xac>
 800dafa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dafe:	eb07 0906 	add.w	r9, r7, r6
 800db02:	d110      	bne.n	800db26 <__cvt+0x92>
 800db04:	783b      	ldrb	r3, [r7, #0]
 800db06:	2b30      	cmp	r3, #48	; 0x30
 800db08:	d10a      	bne.n	800db20 <__cvt+0x8c>
 800db0a:	2200      	movs	r2, #0
 800db0c:	2300      	movs	r3, #0
 800db0e:	4620      	mov	r0, r4
 800db10:	4629      	mov	r1, r5
 800db12:	f7f2 ffd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800db16:	b918      	cbnz	r0, 800db20 <__cvt+0x8c>
 800db18:	f1c6 0601 	rsb	r6, r6, #1
 800db1c:	f8ca 6000 	str.w	r6, [sl]
 800db20:	f8da 3000 	ldr.w	r3, [sl]
 800db24:	4499      	add	r9, r3
 800db26:	2200      	movs	r2, #0
 800db28:	2300      	movs	r3, #0
 800db2a:	4620      	mov	r0, r4
 800db2c:	4629      	mov	r1, r5
 800db2e:	f7f2 ffcb 	bl	8000ac8 <__aeabi_dcmpeq>
 800db32:	b108      	cbz	r0, 800db38 <__cvt+0xa4>
 800db34:	f8cd 900c 	str.w	r9, [sp, #12]
 800db38:	2230      	movs	r2, #48	; 0x30
 800db3a:	9b03      	ldr	r3, [sp, #12]
 800db3c:	454b      	cmp	r3, r9
 800db3e:	d307      	bcc.n	800db50 <__cvt+0xbc>
 800db40:	9b03      	ldr	r3, [sp, #12]
 800db42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db44:	1bdb      	subs	r3, r3, r7
 800db46:	4638      	mov	r0, r7
 800db48:	6013      	str	r3, [r2, #0]
 800db4a:	b004      	add	sp, #16
 800db4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db50:	1c59      	adds	r1, r3, #1
 800db52:	9103      	str	r1, [sp, #12]
 800db54:	701a      	strb	r2, [r3, #0]
 800db56:	e7f0      	b.n	800db3a <__cvt+0xa6>

0800db58 <__exponent>:
 800db58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db5a:	4603      	mov	r3, r0
 800db5c:	2900      	cmp	r1, #0
 800db5e:	bfb8      	it	lt
 800db60:	4249      	neglt	r1, r1
 800db62:	f803 2b02 	strb.w	r2, [r3], #2
 800db66:	bfb4      	ite	lt
 800db68:	222d      	movlt	r2, #45	; 0x2d
 800db6a:	222b      	movge	r2, #43	; 0x2b
 800db6c:	2909      	cmp	r1, #9
 800db6e:	7042      	strb	r2, [r0, #1]
 800db70:	dd2a      	ble.n	800dbc8 <__exponent+0x70>
 800db72:	f10d 0207 	add.w	r2, sp, #7
 800db76:	4617      	mov	r7, r2
 800db78:	260a      	movs	r6, #10
 800db7a:	4694      	mov	ip, r2
 800db7c:	fb91 f5f6 	sdiv	r5, r1, r6
 800db80:	fb06 1415 	mls	r4, r6, r5, r1
 800db84:	3430      	adds	r4, #48	; 0x30
 800db86:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800db8a:	460c      	mov	r4, r1
 800db8c:	2c63      	cmp	r4, #99	; 0x63
 800db8e:	f102 32ff 	add.w	r2, r2, #4294967295
 800db92:	4629      	mov	r1, r5
 800db94:	dcf1      	bgt.n	800db7a <__exponent+0x22>
 800db96:	3130      	adds	r1, #48	; 0x30
 800db98:	f1ac 0402 	sub.w	r4, ip, #2
 800db9c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800dba0:	1c41      	adds	r1, r0, #1
 800dba2:	4622      	mov	r2, r4
 800dba4:	42ba      	cmp	r2, r7
 800dba6:	d30a      	bcc.n	800dbbe <__exponent+0x66>
 800dba8:	f10d 0209 	add.w	r2, sp, #9
 800dbac:	eba2 020c 	sub.w	r2, r2, ip
 800dbb0:	42bc      	cmp	r4, r7
 800dbb2:	bf88      	it	hi
 800dbb4:	2200      	movhi	r2, #0
 800dbb6:	4413      	add	r3, r2
 800dbb8:	1a18      	subs	r0, r3, r0
 800dbba:	b003      	add	sp, #12
 800dbbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbbe:	f812 5b01 	ldrb.w	r5, [r2], #1
 800dbc2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800dbc6:	e7ed      	b.n	800dba4 <__exponent+0x4c>
 800dbc8:	2330      	movs	r3, #48	; 0x30
 800dbca:	3130      	adds	r1, #48	; 0x30
 800dbcc:	7083      	strb	r3, [r0, #2]
 800dbce:	70c1      	strb	r1, [r0, #3]
 800dbd0:	1d03      	adds	r3, r0, #4
 800dbd2:	e7f1      	b.n	800dbb8 <__exponent+0x60>

0800dbd4 <_printf_float>:
 800dbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd8:	ed2d 8b02 	vpush	{d8}
 800dbdc:	b08d      	sub	sp, #52	; 0x34
 800dbde:	460c      	mov	r4, r1
 800dbe0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dbe4:	4616      	mov	r6, r2
 800dbe6:	461f      	mov	r7, r3
 800dbe8:	4605      	mov	r5, r0
 800dbea:	f000 ff09 	bl	800ea00 <_localeconv_r>
 800dbee:	f8d0 a000 	ldr.w	sl, [r0]
 800dbf2:	4650      	mov	r0, sl
 800dbf4:	f7f2 fb3c 	bl	8000270 <strlen>
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	930a      	str	r3, [sp, #40]	; 0x28
 800dbfc:	6823      	ldr	r3, [r4, #0]
 800dbfe:	9305      	str	r3, [sp, #20]
 800dc00:	f8d8 3000 	ldr.w	r3, [r8]
 800dc04:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dc08:	3307      	adds	r3, #7
 800dc0a:	f023 0307 	bic.w	r3, r3, #7
 800dc0e:	f103 0208 	add.w	r2, r3, #8
 800dc12:	f8c8 2000 	str.w	r2, [r8]
 800dc16:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dc1e:	9307      	str	r3, [sp, #28]
 800dc20:	f8cd 8018 	str.w	r8, [sp, #24]
 800dc24:	ee08 0a10 	vmov	s16, r0
 800dc28:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800dc2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc30:	4b9e      	ldr	r3, [pc, #632]	; (800deac <_printf_float+0x2d8>)
 800dc32:	f04f 32ff 	mov.w	r2, #4294967295
 800dc36:	f7f2 ff79 	bl	8000b2c <__aeabi_dcmpun>
 800dc3a:	bb88      	cbnz	r0, 800dca0 <_printf_float+0xcc>
 800dc3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc40:	4b9a      	ldr	r3, [pc, #616]	; (800deac <_printf_float+0x2d8>)
 800dc42:	f04f 32ff 	mov.w	r2, #4294967295
 800dc46:	f7f2 ff53 	bl	8000af0 <__aeabi_dcmple>
 800dc4a:	bb48      	cbnz	r0, 800dca0 <_printf_float+0xcc>
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	2300      	movs	r3, #0
 800dc50:	4640      	mov	r0, r8
 800dc52:	4649      	mov	r1, r9
 800dc54:	f7f2 ff42 	bl	8000adc <__aeabi_dcmplt>
 800dc58:	b110      	cbz	r0, 800dc60 <_printf_float+0x8c>
 800dc5a:	232d      	movs	r3, #45	; 0x2d
 800dc5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc60:	4a93      	ldr	r2, [pc, #588]	; (800deb0 <_printf_float+0x2dc>)
 800dc62:	4b94      	ldr	r3, [pc, #592]	; (800deb4 <_printf_float+0x2e0>)
 800dc64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dc68:	bf94      	ite	ls
 800dc6a:	4690      	movls	r8, r2
 800dc6c:	4698      	movhi	r8, r3
 800dc6e:	2303      	movs	r3, #3
 800dc70:	6123      	str	r3, [r4, #16]
 800dc72:	9b05      	ldr	r3, [sp, #20]
 800dc74:	f023 0304 	bic.w	r3, r3, #4
 800dc78:	6023      	str	r3, [r4, #0]
 800dc7a:	f04f 0900 	mov.w	r9, #0
 800dc7e:	9700      	str	r7, [sp, #0]
 800dc80:	4633      	mov	r3, r6
 800dc82:	aa0b      	add	r2, sp, #44	; 0x2c
 800dc84:	4621      	mov	r1, r4
 800dc86:	4628      	mov	r0, r5
 800dc88:	f000 f9da 	bl	800e040 <_printf_common>
 800dc8c:	3001      	adds	r0, #1
 800dc8e:	f040 8090 	bne.w	800ddb2 <_printf_float+0x1de>
 800dc92:	f04f 30ff 	mov.w	r0, #4294967295
 800dc96:	b00d      	add	sp, #52	; 0x34
 800dc98:	ecbd 8b02 	vpop	{d8}
 800dc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dca0:	4642      	mov	r2, r8
 800dca2:	464b      	mov	r3, r9
 800dca4:	4640      	mov	r0, r8
 800dca6:	4649      	mov	r1, r9
 800dca8:	f7f2 ff40 	bl	8000b2c <__aeabi_dcmpun>
 800dcac:	b140      	cbz	r0, 800dcc0 <_printf_float+0xec>
 800dcae:	464b      	mov	r3, r9
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	bfbc      	itt	lt
 800dcb4:	232d      	movlt	r3, #45	; 0x2d
 800dcb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dcba:	4a7f      	ldr	r2, [pc, #508]	; (800deb8 <_printf_float+0x2e4>)
 800dcbc:	4b7f      	ldr	r3, [pc, #508]	; (800debc <_printf_float+0x2e8>)
 800dcbe:	e7d1      	b.n	800dc64 <_printf_float+0x90>
 800dcc0:	6863      	ldr	r3, [r4, #4]
 800dcc2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dcc6:	9206      	str	r2, [sp, #24]
 800dcc8:	1c5a      	adds	r2, r3, #1
 800dcca:	d13f      	bne.n	800dd4c <_printf_float+0x178>
 800dccc:	2306      	movs	r3, #6
 800dcce:	6063      	str	r3, [r4, #4]
 800dcd0:	9b05      	ldr	r3, [sp, #20]
 800dcd2:	6861      	ldr	r1, [r4, #4]
 800dcd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dcd8:	2300      	movs	r3, #0
 800dcda:	9303      	str	r3, [sp, #12]
 800dcdc:	ab0a      	add	r3, sp, #40	; 0x28
 800dcde:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dce2:	ab09      	add	r3, sp, #36	; 0x24
 800dce4:	ec49 8b10 	vmov	d0, r8, r9
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	6022      	str	r2, [r4, #0]
 800dcec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	f7ff fecf 	bl	800da94 <__cvt>
 800dcf6:	9b06      	ldr	r3, [sp, #24]
 800dcf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dcfa:	2b47      	cmp	r3, #71	; 0x47
 800dcfc:	4680      	mov	r8, r0
 800dcfe:	d108      	bne.n	800dd12 <_printf_float+0x13e>
 800dd00:	1cc8      	adds	r0, r1, #3
 800dd02:	db02      	blt.n	800dd0a <_printf_float+0x136>
 800dd04:	6863      	ldr	r3, [r4, #4]
 800dd06:	4299      	cmp	r1, r3
 800dd08:	dd41      	ble.n	800dd8e <_printf_float+0x1ba>
 800dd0a:	f1ab 0302 	sub.w	r3, fp, #2
 800dd0e:	fa5f fb83 	uxtb.w	fp, r3
 800dd12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dd16:	d820      	bhi.n	800dd5a <_printf_float+0x186>
 800dd18:	3901      	subs	r1, #1
 800dd1a:	465a      	mov	r2, fp
 800dd1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dd20:	9109      	str	r1, [sp, #36]	; 0x24
 800dd22:	f7ff ff19 	bl	800db58 <__exponent>
 800dd26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd28:	1813      	adds	r3, r2, r0
 800dd2a:	2a01      	cmp	r2, #1
 800dd2c:	4681      	mov	r9, r0
 800dd2e:	6123      	str	r3, [r4, #16]
 800dd30:	dc02      	bgt.n	800dd38 <_printf_float+0x164>
 800dd32:	6822      	ldr	r2, [r4, #0]
 800dd34:	07d2      	lsls	r2, r2, #31
 800dd36:	d501      	bpl.n	800dd3c <_printf_float+0x168>
 800dd38:	3301      	adds	r3, #1
 800dd3a:	6123      	str	r3, [r4, #16]
 800dd3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d09c      	beq.n	800dc7e <_printf_float+0xaa>
 800dd44:	232d      	movs	r3, #45	; 0x2d
 800dd46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd4a:	e798      	b.n	800dc7e <_printf_float+0xaa>
 800dd4c:	9a06      	ldr	r2, [sp, #24]
 800dd4e:	2a47      	cmp	r2, #71	; 0x47
 800dd50:	d1be      	bne.n	800dcd0 <_printf_float+0xfc>
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d1bc      	bne.n	800dcd0 <_printf_float+0xfc>
 800dd56:	2301      	movs	r3, #1
 800dd58:	e7b9      	b.n	800dcce <_printf_float+0xfa>
 800dd5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dd5e:	d118      	bne.n	800dd92 <_printf_float+0x1be>
 800dd60:	2900      	cmp	r1, #0
 800dd62:	6863      	ldr	r3, [r4, #4]
 800dd64:	dd0b      	ble.n	800dd7e <_printf_float+0x1aa>
 800dd66:	6121      	str	r1, [r4, #16]
 800dd68:	b913      	cbnz	r3, 800dd70 <_printf_float+0x19c>
 800dd6a:	6822      	ldr	r2, [r4, #0]
 800dd6c:	07d0      	lsls	r0, r2, #31
 800dd6e:	d502      	bpl.n	800dd76 <_printf_float+0x1a2>
 800dd70:	3301      	adds	r3, #1
 800dd72:	440b      	add	r3, r1
 800dd74:	6123      	str	r3, [r4, #16]
 800dd76:	65a1      	str	r1, [r4, #88]	; 0x58
 800dd78:	f04f 0900 	mov.w	r9, #0
 800dd7c:	e7de      	b.n	800dd3c <_printf_float+0x168>
 800dd7e:	b913      	cbnz	r3, 800dd86 <_printf_float+0x1b2>
 800dd80:	6822      	ldr	r2, [r4, #0]
 800dd82:	07d2      	lsls	r2, r2, #31
 800dd84:	d501      	bpl.n	800dd8a <_printf_float+0x1b6>
 800dd86:	3302      	adds	r3, #2
 800dd88:	e7f4      	b.n	800dd74 <_printf_float+0x1a0>
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	e7f2      	b.n	800dd74 <_printf_float+0x1a0>
 800dd8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dd92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd94:	4299      	cmp	r1, r3
 800dd96:	db05      	blt.n	800dda4 <_printf_float+0x1d0>
 800dd98:	6823      	ldr	r3, [r4, #0]
 800dd9a:	6121      	str	r1, [r4, #16]
 800dd9c:	07d8      	lsls	r0, r3, #31
 800dd9e:	d5ea      	bpl.n	800dd76 <_printf_float+0x1a2>
 800dda0:	1c4b      	adds	r3, r1, #1
 800dda2:	e7e7      	b.n	800dd74 <_printf_float+0x1a0>
 800dda4:	2900      	cmp	r1, #0
 800dda6:	bfd4      	ite	le
 800dda8:	f1c1 0202 	rsble	r2, r1, #2
 800ddac:	2201      	movgt	r2, #1
 800ddae:	4413      	add	r3, r2
 800ddb0:	e7e0      	b.n	800dd74 <_printf_float+0x1a0>
 800ddb2:	6823      	ldr	r3, [r4, #0]
 800ddb4:	055a      	lsls	r2, r3, #21
 800ddb6:	d407      	bmi.n	800ddc8 <_printf_float+0x1f4>
 800ddb8:	6923      	ldr	r3, [r4, #16]
 800ddba:	4642      	mov	r2, r8
 800ddbc:	4631      	mov	r1, r6
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	47b8      	blx	r7
 800ddc2:	3001      	adds	r0, #1
 800ddc4:	d12c      	bne.n	800de20 <_printf_float+0x24c>
 800ddc6:	e764      	b.n	800dc92 <_printf_float+0xbe>
 800ddc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ddcc:	f240 80e0 	bls.w	800df90 <_printf_float+0x3bc>
 800ddd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	f7f2 fe76 	bl	8000ac8 <__aeabi_dcmpeq>
 800dddc:	2800      	cmp	r0, #0
 800ddde:	d034      	beq.n	800de4a <_printf_float+0x276>
 800dde0:	4a37      	ldr	r2, [pc, #220]	; (800dec0 <_printf_float+0x2ec>)
 800dde2:	2301      	movs	r3, #1
 800dde4:	4631      	mov	r1, r6
 800dde6:	4628      	mov	r0, r5
 800dde8:	47b8      	blx	r7
 800ddea:	3001      	adds	r0, #1
 800ddec:	f43f af51 	beq.w	800dc92 <_printf_float+0xbe>
 800ddf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	db02      	blt.n	800ddfe <_printf_float+0x22a>
 800ddf8:	6823      	ldr	r3, [r4, #0]
 800ddfa:	07d8      	lsls	r0, r3, #31
 800ddfc:	d510      	bpl.n	800de20 <_printf_float+0x24c>
 800ddfe:	ee18 3a10 	vmov	r3, s16
 800de02:	4652      	mov	r2, sl
 800de04:	4631      	mov	r1, r6
 800de06:	4628      	mov	r0, r5
 800de08:	47b8      	blx	r7
 800de0a:	3001      	adds	r0, #1
 800de0c:	f43f af41 	beq.w	800dc92 <_printf_float+0xbe>
 800de10:	f04f 0800 	mov.w	r8, #0
 800de14:	f104 091a 	add.w	r9, r4, #26
 800de18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de1a:	3b01      	subs	r3, #1
 800de1c:	4543      	cmp	r3, r8
 800de1e:	dc09      	bgt.n	800de34 <_printf_float+0x260>
 800de20:	6823      	ldr	r3, [r4, #0]
 800de22:	079b      	lsls	r3, r3, #30
 800de24:	f100 8107 	bmi.w	800e036 <_printf_float+0x462>
 800de28:	68e0      	ldr	r0, [r4, #12]
 800de2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de2c:	4298      	cmp	r0, r3
 800de2e:	bfb8      	it	lt
 800de30:	4618      	movlt	r0, r3
 800de32:	e730      	b.n	800dc96 <_printf_float+0xc2>
 800de34:	2301      	movs	r3, #1
 800de36:	464a      	mov	r2, r9
 800de38:	4631      	mov	r1, r6
 800de3a:	4628      	mov	r0, r5
 800de3c:	47b8      	blx	r7
 800de3e:	3001      	adds	r0, #1
 800de40:	f43f af27 	beq.w	800dc92 <_printf_float+0xbe>
 800de44:	f108 0801 	add.w	r8, r8, #1
 800de48:	e7e6      	b.n	800de18 <_printf_float+0x244>
 800de4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	dc39      	bgt.n	800dec4 <_printf_float+0x2f0>
 800de50:	4a1b      	ldr	r2, [pc, #108]	; (800dec0 <_printf_float+0x2ec>)
 800de52:	2301      	movs	r3, #1
 800de54:	4631      	mov	r1, r6
 800de56:	4628      	mov	r0, r5
 800de58:	47b8      	blx	r7
 800de5a:	3001      	adds	r0, #1
 800de5c:	f43f af19 	beq.w	800dc92 <_printf_float+0xbe>
 800de60:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800de64:	4313      	orrs	r3, r2
 800de66:	d102      	bne.n	800de6e <_printf_float+0x29a>
 800de68:	6823      	ldr	r3, [r4, #0]
 800de6a:	07d9      	lsls	r1, r3, #31
 800de6c:	d5d8      	bpl.n	800de20 <_printf_float+0x24c>
 800de6e:	ee18 3a10 	vmov	r3, s16
 800de72:	4652      	mov	r2, sl
 800de74:	4631      	mov	r1, r6
 800de76:	4628      	mov	r0, r5
 800de78:	47b8      	blx	r7
 800de7a:	3001      	adds	r0, #1
 800de7c:	f43f af09 	beq.w	800dc92 <_printf_float+0xbe>
 800de80:	f04f 0900 	mov.w	r9, #0
 800de84:	f104 0a1a 	add.w	sl, r4, #26
 800de88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de8a:	425b      	negs	r3, r3
 800de8c:	454b      	cmp	r3, r9
 800de8e:	dc01      	bgt.n	800de94 <_printf_float+0x2c0>
 800de90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de92:	e792      	b.n	800ddba <_printf_float+0x1e6>
 800de94:	2301      	movs	r3, #1
 800de96:	4652      	mov	r2, sl
 800de98:	4631      	mov	r1, r6
 800de9a:	4628      	mov	r0, r5
 800de9c:	47b8      	blx	r7
 800de9e:	3001      	adds	r0, #1
 800dea0:	f43f aef7 	beq.w	800dc92 <_printf_float+0xbe>
 800dea4:	f109 0901 	add.w	r9, r9, #1
 800dea8:	e7ee      	b.n	800de88 <_printf_float+0x2b4>
 800deaa:	bf00      	nop
 800deac:	7fefffff 	.word	0x7fefffff
 800deb0:	08013c40 	.word	0x08013c40
 800deb4:	08013c44 	.word	0x08013c44
 800deb8:	08013c48 	.word	0x08013c48
 800debc:	08013c4c 	.word	0x08013c4c
 800dec0:	08013c50 	.word	0x08013c50
 800dec4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dec6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dec8:	429a      	cmp	r2, r3
 800deca:	bfa8      	it	ge
 800decc:	461a      	movge	r2, r3
 800dece:	2a00      	cmp	r2, #0
 800ded0:	4691      	mov	r9, r2
 800ded2:	dc37      	bgt.n	800df44 <_printf_float+0x370>
 800ded4:	f04f 0b00 	mov.w	fp, #0
 800ded8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dedc:	f104 021a 	add.w	r2, r4, #26
 800dee0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dee2:	9305      	str	r3, [sp, #20]
 800dee4:	eba3 0309 	sub.w	r3, r3, r9
 800dee8:	455b      	cmp	r3, fp
 800deea:	dc33      	bgt.n	800df54 <_printf_float+0x380>
 800deec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800def0:	429a      	cmp	r2, r3
 800def2:	db3b      	blt.n	800df6c <_printf_float+0x398>
 800def4:	6823      	ldr	r3, [r4, #0]
 800def6:	07da      	lsls	r2, r3, #31
 800def8:	d438      	bmi.n	800df6c <_printf_float+0x398>
 800defa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800defe:	eba2 0903 	sub.w	r9, r2, r3
 800df02:	9b05      	ldr	r3, [sp, #20]
 800df04:	1ad2      	subs	r2, r2, r3
 800df06:	4591      	cmp	r9, r2
 800df08:	bfa8      	it	ge
 800df0a:	4691      	movge	r9, r2
 800df0c:	f1b9 0f00 	cmp.w	r9, #0
 800df10:	dc35      	bgt.n	800df7e <_printf_float+0x3aa>
 800df12:	f04f 0800 	mov.w	r8, #0
 800df16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df1a:	f104 0a1a 	add.w	sl, r4, #26
 800df1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df22:	1a9b      	subs	r3, r3, r2
 800df24:	eba3 0309 	sub.w	r3, r3, r9
 800df28:	4543      	cmp	r3, r8
 800df2a:	f77f af79 	ble.w	800de20 <_printf_float+0x24c>
 800df2e:	2301      	movs	r3, #1
 800df30:	4652      	mov	r2, sl
 800df32:	4631      	mov	r1, r6
 800df34:	4628      	mov	r0, r5
 800df36:	47b8      	blx	r7
 800df38:	3001      	adds	r0, #1
 800df3a:	f43f aeaa 	beq.w	800dc92 <_printf_float+0xbe>
 800df3e:	f108 0801 	add.w	r8, r8, #1
 800df42:	e7ec      	b.n	800df1e <_printf_float+0x34a>
 800df44:	4613      	mov	r3, r2
 800df46:	4631      	mov	r1, r6
 800df48:	4642      	mov	r2, r8
 800df4a:	4628      	mov	r0, r5
 800df4c:	47b8      	blx	r7
 800df4e:	3001      	adds	r0, #1
 800df50:	d1c0      	bne.n	800ded4 <_printf_float+0x300>
 800df52:	e69e      	b.n	800dc92 <_printf_float+0xbe>
 800df54:	2301      	movs	r3, #1
 800df56:	4631      	mov	r1, r6
 800df58:	4628      	mov	r0, r5
 800df5a:	9205      	str	r2, [sp, #20]
 800df5c:	47b8      	blx	r7
 800df5e:	3001      	adds	r0, #1
 800df60:	f43f ae97 	beq.w	800dc92 <_printf_float+0xbe>
 800df64:	9a05      	ldr	r2, [sp, #20]
 800df66:	f10b 0b01 	add.w	fp, fp, #1
 800df6a:	e7b9      	b.n	800dee0 <_printf_float+0x30c>
 800df6c:	ee18 3a10 	vmov	r3, s16
 800df70:	4652      	mov	r2, sl
 800df72:	4631      	mov	r1, r6
 800df74:	4628      	mov	r0, r5
 800df76:	47b8      	blx	r7
 800df78:	3001      	adds	r0, #1
 800df7a:	d1be      	bne.n	800defa <_printf_float+0x326>
 800df7c:	e689      	b.n	800dc92 <_printf_float+0xbe>
 800df7e:	9a05      	ldr	r2, [sp, #20]
 800df80:	464b      	mov	r3, r9
 800df82:	4442      	add	r2, r8
 800df84:	4631      	mov	r1, r6
 800df86:	4628      	mov	r0, r5
 800df88:	47b8      	blx	r7
 800df8a:	3001      	adds	r0, #1
 800df8c:	d1c1      	bne.n	800df12 <_printf_float+0x33e>
 800df8e:	e680      	b.n	800dc92 <_printf_float+0xbe>
 800df90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df92:	2a01      	cmp	r2, #1
 800df94:	dc01      	bgt.n	800df9a <_printf_float+0x3c6>
 800df96:	07db      	lsls	r3, r3, #31
 800df98:	d53a      	bpl.n	800e010 <_printf_float+0x43c>
 800df9a:	2301      	movs	r3, #1
 800df9c:	4642      	mov	r2, r8
 800df9e:	4631      	mov	r1, r6
 800dfa0:	4628      	mov	r0, r5
 800dfa2:	47b8      	blx	r7
 800dfa4:	3001      	adds	r0, #1
 800dfa6:	f43f ae74 	beq.w	800dc92 <_printf_float+0xbe>
 800dfaa:	ee18 3a10 	vmov	r3, s16
 800dfae:	4652      	mov	r2, sl
 800dfb0:	4631      	mov	r1, r6
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	47b8      	blx	r7
 800dfb6:	3001      	adds	r0, #1
 800dfb8:	f43f ae6b 	beq.w	800dc92 <_printf_float+0xbe>
 800dfbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800dfc8:	f7f2 fd7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfcc:	b9d8      	cbnz	r0, 800e006 <_printf_float+0x432>
 800dfce:	f10a 33ff 	add.w	r3, sl, #4294967295
 800dfd2:	f108 0201 	add.w	r2, r8, #1
 800dfd6:	4631      	mov	r1, r6
 800dfd8:	4628      	mov	r0, r5
 800dfda:	47b8      	blx	r7
 800dfdc:	3001      	adds	r0, #1
 800dfde:	d10e      	bne.n	800dffe <_printf_float+0x42a>
 800dfe0:	e657      	b.n	800dc92 <_printf_float+0xbe>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	4652      	mov	r2, sl
 800dfe6:	4631      	mov	r1, r6
 800dfe8:	4628      	mov	r0, r5
 800dfea:	47b8      	blx	r7
 800dfec:	3001      	adds	r0, #1
 800dfee:	f43f ae50 	beq.w	800dc92 <_printf_float+0xbe>
 800dff2:	f108 0801 	add.w	r8, r8, #1
 800dff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dff8:	3b01      	subs	r3, #1
 800dffa:	4543      	cmp	r3, r8
 800dffc:	dcf1      	bgt.n	800dfe2 <_printf_float+0x40e>
 800dffe:	464b      	mov	r3, r9
 800e000:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e004:	e6da      	b.n	800ddbc <_printf_float+0x1e8>
 800e006:	f04f 0800 	mov.w	r8, #0
 800e00a:	f104 0a1a 	add.w	sl, r4, #26
 800e00e:	e7f2      	b.n	800dff6 <_printf_float+0x422>
 800e010:	2301      	movs	r3, #1
 800e012:	4642      	mov	r2, r8
 800e014:	e7df      	b.n	800dfd6 <_printf_float+0x402>
 800e016:	2301      	movs	r3, #1
 800e018:	464a      	mov	r2, r9
 800e01a:	4631      	mov	r1, r6
 800e01c:	4628      	mov	r0, r5
 800e01e:	47b8      	blx	r7
 800e020:	3001      	adds	r0, #1
 800e022:	f43f ae36 	beq.w	800dc92 <_printf_float+0xbe>
 800e026:	f108 0801 	add.w	r8, r8, #1
 800e02a:	68e3      	ldr	r3, [r4, #12]
 800e02c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e02e:	1a5b      	subs	r3, r3, r1
 800e030:	4543      	cmp	r3, r8
 800e032:	dcf0      	bgt.n	800e016 <_printf_float+0x442>
 800e034:	e6f8      	b.n	800de28 <_printf_float+0x254>
 800e036:	f04f 0800 	mov.w	r8, #0
 800e03a:	f104 0919 	add.w	r9, r4, #25
 800e03e:	e7f4      	b.n	800e02a <_printf_float+0x456>

0800e040 <_printf_common>:
 800e040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e044:	4616      	mov	r6, r2
 800e046:	4699      	mov	r9, r3
 800e048:	688a      	ldr	r2, [r1, #8]
 800e04a:	690b      	ldr	r3, [r1, #16]
 800e04c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e050:	4293      	cmp	r3, r2
 800e052:	bfb8      	it	lt
 800e054:	4613      	movlt	r3, r2
 800e056:	6033      	str	r3, [r6, #0]
 800e058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e05c:	4607      	mov	r7, r0
 800e05e:	460c      	mov	r4, r1
 800e060:	b10a      	cbz	r2, 800e066 <_printf_common+0x26>
 800e062:	3301      	adds	r3, #1
 800e064:	6033      	str	r3, [r6, #0]
 800e066:	6823      	ldr	r3, [r4, #0]
 800e068:	0699      	lsls	r1, r3, #26
 800e06a:	bf42      	ittt	mi
 800e06c:	6833      	ldrmi	r3, [r6, #0]
 800e06e:	3302      	addmi	r3, #2
 800e070:	6033      	strmi	r3, [r6, #0]
 800e072:	6825      	ldr	r5, [r4, #0]
 800e074:	f015 0506 	ands.w	r5, r5, #6
 800e078:	d106      	bne.n	800e088 <_printf_common+0x48>
 800e07a:	f104 0a19 	add.w	sl, r4, #25
 800e07e:	68e3      	ldr	r3, [r4, #12]
 800e080:	6832      	ldr	r2, [r6, #0]
 800e082:	1a9b      	subs	r3, r3, r2
 800e084:	42ab      	cmp	r3, r5
 800e086:	dc26      	bgt.n	800e0d6 <_printf_common+0x96>
 800e088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e08c:	1e13      	subs	r3, r2, #0
 800e08e:	6822      	ldr	r2, [r4, #0]
 800e090:	bf18      	it	ne
 800e092:	2301      	movne	r3, #1
 800e094:	0692      	lsls	r2, r2, #26
 800e096:	d42b      	bmi.n	800e0f0 <_printf_common+0xb0>
 800e098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e09c:	4649      	mov	r1, r9
 800e09e:	4638      	mov	r0, r7
 800e0a0:	47c0      	blx	r8
 800e0a2:	3001      	adds	r0, #1
 800e0a4:	d01e      	beq.n	800e0e4 <_printf_common+0xa4>
 800e0a6:	6823      	ldr	r3, [r4, #0]
 800e0a8:	6922      	ldr	r2, [r4, #16]
 800e0aa:	f003 0306 	and.w	r3, r3, #6
 800e0ae:	2b04      	cmp	r3, #4
 800e0b0:	bf02      	ittt	eq
 800e0b2:	68e5      	ldreq	r5, [r4, #12]
 800e0b4:	6833      	ldreq	r3, [r6, #0]
 800e0b6:	1aed      	subeq	r5, r5, r3
 800e0b8:	68a3      	ldr	r3, [r4, #8]
 800e0ba:	bf0c      	ite	eq
 800e0bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e0c0:	2500      	movne	r5, #0
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	bfc4      	itt	gt
 800e0c6:	1a9b      	subgt	r3, r3, r2
 800e0c8:	18ed      	addgt	r5, r5, r3
 800e0ca:	2600      	movs	r6, #0
 800e0cc:	341a      	adds	r4, #26
 800e0ce:	42b5      	cmp	r5, r6
 800e0d0:	d11a      	bne.n	800e108 <_printf_common+0xc8>
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	e008      	b.n	800e0e8 <_printf_common+0xa8>
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	4652      	mov	r2, sl
 800e0da:	4649      	mov	r1, r9
 800e0dc:	4638      	mov	r0, r7
 800e0de:	47c0      	blx	r8
 800e0e0:	3001      	adds	r0, #1
 800e0e2:	d103      	bne.n	800e0ec <_printf_common+0xac>
 800e0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0ec:	3501      	adds	r5, #1
 800e0ee:	e7c6      	b.n	800e07e <_printf_common+0x3e>
 800e0f0:	18e1      	adds	r1, r4, r3
 800e0f2:	1c5a      	adds	r2, r3, #1
 800e0f4:	2030      	movs	r0, #48	; 0x30
 800e0f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e0fa:	4422      	add	r2, r4
 800e0fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e104:	3302      	adds	r3, #2
 800e106:	e7c7      	b.n	800e098 <_printf_common+0x58>
 800e108:	2301      	movs	r3, #1
 800e10a:	4622      	mov	r2, r4
 800e10c:	4649      	mov	r1, r9
 800e10e:	4638      	mov	r0, r7
 800e110:	47c0      	blx	r8
 800e112:	3001      	adds	r0, #1
 800e114:	d0e6      	beq.n	800e0e4 <_printf_common+0xa4>
 800e116:	3601      	adds	r6, #1
 800e118:	e7d9      	b.n	800e0ce <_printf_common+0x8e>
	...

0800e11c <_printf_i>:
 800e11c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e120:	7e0f      	ldrb	r7, [r1, #24]
 800e122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e124:	2f78      	cmp	r7, #120	; 0x78
 800e126:	4691      	mov	r9, r2
 800e128:	4680      	mov	r8, r0
 800e12a:	460c      	mov	r4, r1
 800e12c:	469a      	mov	sl, r3
 800e12e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e132:	d807      	bhi.n	800e144 <_printf_i+0x28>
 800e134:	2f62      	cmp	r7, #98	; 0x62
 800e136:	d80a      	bhi.n	800e14e <_printf_i+0x32>
 800e138:	2f00      	cmp	r7, #0
 800e13a:	f000 80d4 	beq.w	800e2e6 <_printf_i+0x1ca>
 800e13e:	2f58      	cmp	r7, #88	; 0x58
 800e140:	f000 80c0 	beq.w	800e2c4 <_printf_i+0x1a8>
 800e144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e14c:	e03a      	b.n	800e1c4 <_printf_i+0xa8>
 800e14e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e152:	2b15      	cmp	r3, #21
 800e154:	d8f6      	bhi.n	800e144 <_printf_i+0x28>
 800e156:	a101      	add	r1, pc, #4	; (adr r1, 800e15c <_printf_i+0x40>)
 800e158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e15c:	0800e1b5 	.word	0x0800e1b5
 800e160:	0800e1c9 	.word	0x0800e1c9
 800e164:	0800e145 	.word	0x0800e145
 800e168:	0800e145 	.word	0x0800e145
 800e16c:	0800e145 	.word	0x0800e145
 800e170:	0800e145 	.word	0x0800e145
 800e174:	0800e1c9 	.word	0x0800e1c9
 800e178:	0800e145 	.word	0x0800e145
 800e17c:	0800e145 	.word	0x0800e145
 800e180:	0800e145 	.word	0x0800e145
 800e184:	0800e145 	.word	0x0800e145
 800e188:	0800e2cd 	.word	0x0800e2cd
 800e18c:	0800e1f5 	.word	0x0800e1f5
 800e190:	0800e287 	.word	0x0800e287
 800e194:	0800e145 	.word	0x0800e145
 800e198:	0800e145 	.word	0x0800e145
 800e19c:	0800e2ef 	.word	0x0800e2ef
 800e1a0:	0800e145 	.word	0x0800e145
 800e1a4:	0800e1f5 	.word	0x0800e1f5
 800e1a8:	0800e145 	.word	0x0800e145
 800e1ac:	0800e145 	.word	0x0800e145
 800e1b0:	0800e28f 	.word	0x0800e28f
 800e1b4:	682b      	ldr	r3, [r5, #0]
 800e1b6:	1d1a      	adds	r2, r3, #4
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	602a      	str	r2, [r5, #0]
 800e1bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e1c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	e09f      	b.n	800e308 <_printf_i+0x1ec>
 800e1c8:	6820      	ldr	r0, [r4, #0]
 800e1ca:	682b      	ldr	r3, [r5, #0]
 800e1cc:	0607      	lsls	r7, r0, #24
 800e1ce:	f103 0104 	add.w	r1, r3, #4
 800e1d2:	6029      	str	r1, [r5, #0]
 800e1d4:	d501      	bpl.n	800e1da <_printf_i+0xbe>
 800e1d6:	681e      	ldr	r6, [r3, #0]
 800e1d8:	e003      	b.n	800e1e2 <_printf_i+0xc6>
 800e1da:	0646      	lsls	r6, r0, #25
 800e1dc:	d5fb      	bpl.n	800e1d6 <_printf_i+0xba>
 800e1de:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e1e2:	2e00      	cmp	r6, #0
 800e1e4:	da03      	bge.n	800e1ee <_printf_i+0xd2>
 800e1e6:	232d      	movs	r3, #45	; 0x2d
 800e1e8:	4276      	negs	r6, r6
 800e1ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e1ee:	485a      	ldr	r0, [pc, #360]	; (800e358 <_printf_i+0x23c>)
 800e1f0:	230a      	movs	r3, #10
 800e1f2:	e012      	b.n	800e21a <_printf_i+0xfe>
 800e1f4:	682b      	ldr	r3, [r5, #0]
 800e1f6:	6820      	ldr	r0, [r4, #0]
 800e1f8:	1d19      	adds	r1, r3, #4
 800e1fa:	6029      	str	r1, [r5, #0]
 800e1fc:	0605      	lsls	r5, r0, #24
 800e1fe:	d501      	bpl.n	800e204 <_printf_i+0xe8>
 800e200:	681e      	ldr	r6, [r3, #0]
 800e202:	e002      	b.n	800e20a <_printf_i+0xee>
 800e204:	0641      	lsls	r1, r0, #25
 800e206:	d5fb      	bpl.n	800e200 <_printf_i+0xe4>
 800e208:	881e      	ldrh	r6, [r3, #0]
 800e20a:	4853      	ldr	r0, [pc, #332]	; (800e358 <_printf_i+0x23c>)
 800e20c:	2f6f      	cmp	r7, #111	; 0x6f
 800e20e:	bf0c      	ite	eq
 800e210:	2308      	moveq	r3, #8
 800e212:	230a      	movne	r3, #10
 800e214:	2100      	movs	r1, #0
 800e216:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e21a:	6865      	ldr	r5, [r4, #4]
 800e21c:	60a5      	str	r5, [r4, #8]
 800e21e:	2d00      	cmp	r5, #0
 800e220:	bfa2      	ittt	ge
 800e222:	6821      	ldrge	r1, [r4, #0]
 800e224:	f021 0104 	bicge.w	r1, r1, #4
 800e228:	6021      	strge	r1, [r4, #0]
 800e22a:	b90e      	cbnz	r6, 800e230 <_printf_i+0x114>
 800e22c:	2d00      	cmp	r5, #0
 800e22e:	d04b      	beq.n	800e2c8 <_printf_i+0x1ac>
 800e230:	4615      	mov	r5, r2
 800e232:	fbb6 f1f3 	udiv	r1, r6, r3
 800e236:	fb03 6711 	mls	r7, r3, r1, r6
 800e23a:	5dc7      	ldrb	r7, [r0, r7]
 800e23c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e240:	4637      	mov	r7, r6
 800e242:	42bb      	cmp	r3, r7
 800e244:	460e      	mov	r6, r1
 800e246:	d9f4      	bls.n	800e232 <_printf_i+0x116>
 800e248:	2b08      	cmp	r3, #8
 800e24a:	d10b      	bne.n	800e264 <_printf_i+0x148>
 800e24c:	6823      	ldr	r3, [r4, #0]
 800e24e:	07de      	lsls	r6, r3, #31
 800e250:	d508      	bpl.n	800e264 <_printf_i+0x148>
 800e252:	6923      	ldr	r3, [r4, #16]
 800e254:	6861      	ldr	r1, [r4, #4]
 800e256:	4299      	cmp	r1, r3
 800e258:	bfde      	ittt	le
 800e25a:	2330      	movle	r3, #48	; 0x30
 800e25c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e260:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e264:	1b52      	subs	r2, r2, r5
 800e266:	6122      	str	r2, [r4, #16]
 800e268:	f8cd a000 	str.w	sl, [sp]
 800e26c:	464b      	mov	r3, r9
 800e26e:	aa03      	add	r2, sp, #12
 800e270:	4621      	mov	r1, r4
 800e272:	4640      	mov	r0, r8
 800e274:	f7ff fee4 	bl	800e040 <_printf_common>
 800e278:	3001      	adds	r0, #1
 800e27a:	d14a      	bne.n	800e312 <_printf_i+0x1f6>
 800e27c:	f04f 30ff 	mov.w	r0, #4294967295
 800e280:	b004      	add	sp, #16
 800e282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e286:	6823      	ldr	r3, [r4, #0]
 800e288:	f043 0320 	orr.w	r3, r3, #32
 800e28c:	6023      	str	r3, [r4, #0]
 800e28e:	4833      	ldr	r0, [pc, #204]	; (800e35c <_printf_i+0x240>)
 800e290:	2778      	movs	r7, #120	; 0x78
 800e292:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e296:	6823      	ldr	r3, [r4, #0]
 800e298:	6829      	ldr	r1, [r5, #0]
 800e29a:	061f      	lsls	r7, r3, #24
 800e29c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e2a0:	d402      	bmi.n	800e2a8 <_printf_i+0x18c>
 800e2a2:	065f      	lsls	r7, r3, #25
 800e2a4:	bf48      	it	mi
 800e2a6:	b2b6      	uxthmi	r6, r6
 800e2a8:	07df      	lsls	r7, r3, #31
 800e2aa:	bf48      	it	mi
 800e2ac:	f043 0320 	orrmi.w	r3, r3, #32
 800e2b0:	6029      	str	r1, [r5, #0]
 800e2b2:	bf48      	it	mi
 800e2b4:	6023      	strmi	r3, [r4, #0]
 800e2b6:	b91e      	cbnz	r6, 800e2c0 <_printf_i+0x1a4>
 800e2b8:	6823      	ldr	r3, [r4, #0]
 800e2ba:	f023 0320 	bic.w	r3, r3, #32
 800e2be:	6023      	str	r3, [r4, #0]
 800e2c0:	2310      	movs	r3, #16
 800e2c2:	e7a7      	b.n	800e214 <_printf_i+0xf8>
 800e2c4:	4824      	ldr	r0, [pc, #144]	; (800e358 <_printf_i+0x23c>)
 800e2c6:	e7e4      	b.n	800e292 <_printf_i+0x176>
 800e2c8:	4615      	mov	r5, r2
 800e2ca:	e7bd      	b.n	800e248 <_printf_i+0x12c>
 800e2cc:	682b      	ldr	r3, [r5, #0]
 800e2ce:	6826      	ldr	r6, [r4, #0]
 800e2d0:	6961      	ldr	r1, [r4, #20]
 800e2d2:	1d18      	adds	r0, r3, #4
 800e2d4:	6028      	str	r0, [r5, #0]
 800e2d6:	0635      	lsls	r5, r6, #24
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	d501      	bpl.n	800e2e0 <_printf_i+0x1c4>
 800e2dc:	6019      	str	r1, [r3, #0]
 800e2de:	e002      	b.n	800e2e6 <_printf_i+0x1ca>
 800e2e0:	0670      	lsls	r0, r6, #25
 800e2e2:	d5fb      	bpl.n	800e2dc <_printf_i+0x1c0>
 800e2e4:	8019      	strh	r1, [r3, #0]
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	6123      	str	r3, [r4, #16]
 800e2ea:	4615      	mov	r5, r2
 800e2ec:	e7bc      	b.n	800e268 <_printf_i+0x14c>
 800e2ee:	682b      	ldr	r3, [r5, #0]
 800e2f0:	1d1a      	adds	r2, r3, #4
 800e2f2:	602a      	str	r2, [r5, #0]
 800e2f4:	681d      	ldr	r5, [r3, #0]
 800e2f6:	6862      	ldr	r2, [r4, #4]
 800e2f8:	2100      	movs	r1, #0
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	f7f1 ff68 	bl	80001d0 <memchr>
 800e300:	b108      	cbz	r0, 800e306 <_printf_i+0x1ea>
 800e302:	1b40      	subs	r0, r0, r5
 800e304:	6060      	str	r0, [r4, #4]
 800e306:	6863      	ldr	r3, [r4, #4]
 800e308:	6123      	str	r3, [r4, #16]
 800e30a:	2300      	movs	r3, #0
 800e30c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e310:	e7aa      	b.n	800e268 <_printf_i+0x14c>
 800e312:	6923      	ldr	r3, [r4, #16]
 800e314:	462a      	mov	r2, r5
 800e316:	4649      	mov	r1, r9
 800e318:	4640      	mov	r0, r8
 800e31a:	47d0      	blx	sl
 800e31c:	3001      	adds	r0, #1
 800e31e:	d0ad      	beq.n	800e27c <_printf_i+0x160>
 800e320:	6823      	ldr	r3, [r4, #0]
 800e322:	079b      	lsls	r3, r3, #30
 800e324:	d413      	bmi.n	800e34e <_printf_i+0x232>
 800e326:	68e0      	ldr	r0, [r4, #12]
 800e328:	9b03      	ldr	r3, [sp, #12]
 800e32a:	4298      	cmp	r0, r3
 800e32c:	bfb8      	it	lt
 800e32e:	4618      	movlt	r0, r3
 800e330:	e7a6      	b.n	800e280 <_printf_i+0x164>
 800e332:	2301      	movs	r3, #1
 800e334:	4632      	mov	r2, r6
 800e336:	4649      	mov	r1, r9
 800e338:	4640      	mov	r0, r8
 800e33a:	47d0      	blx	sl
 800e33c:	3001      	adds	r0, #1
 800e33e:	d09d      	beq.n	800e27c <_printf_i+0x160>
 800e340:	3501      	adds	r5, #1
 800e342:	68e3      	ldr	r3, [r4, #12]
 800e344:	9903      	ldr	r1, [sp, #12]
 800e346:	1a5b      	subs	r3, r3, r1
 800e348:	42ab      	cmp	r3, r5
 800e34a:	dcf2      	bgt.n	800e332 <_printf_i+0x216>
 800e34c:	e7eb      	b.n	800e326 <_printf_i+0x20a>
 800e34e:	2500      	movs	r5, #0
 800e350:	f104 0619 	add.w	r6, r4, #25
 800e354:	e7f5      	b.n	800e342 <_printf_i+0x226>
 800e356:	bf00      	nop
 800e358:	08013c52 	.word	0x08013c52
 800e35c:	08013c63 	.word	0x08013c63

0800e360 <_scanf_float>:
 800e360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e364:	b087      	sub	sp, #28
 800e366:	4617      	mov	r7, r2
 800e368:	9303      	str	r3, [sp, #12]
 800e36a:	688b      	ldr	r3, [r1, #8]
 800e36c:	1e5a      	subs	r2, r3, #1
 800e36e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e372:	bf83      	ittte	hi
 800e374:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e378:	195b      	addhi	r3, r3, r5
 800e37a:	9302      	strhi	r3, [sp, #8]
 800e37c:	2300      	movls	r3, #0
 800e37e:	bf86      	itte	hi
 800e380:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e384:	608b      	strhi	r3, [r1, #8]
 800e386:	9302      	strls	r3, [sp, #8]
 800e388:	680b      	ldr	r3, [r1, #0]
 800e38a:	468b      	mov	fp, r1
 800e38c:	2500      	movs	r5, #0
 800e38e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e392:	f84b 3b1c 	str.w	r3, [fp], #28
 800e396:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e39a:	4680      	mov	r8, r0
 800e39c:	460c      	mov	r4, r1
 800e39e:	465e      	mov	r6, fp
 800e3a0:	46aa      	mov	sl, r5
 800e3a2:	46a9      	mov	r9, r5
 800e3a4:	9501      	str	r5, [sp, #4]
 800e3a6:	68a2      	ldr	r2, [r4, #8]
 800e3a8:	b152      	cbz	r2, 800e3c0 <_scanf_float+0x60>
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	2b4e      	cmp	r3, #78	; 0x4e
 800e3b0:	d864      	bhi.n	800e47c <_scanf_float+0x11c>
 800e3b2:	2b40      	cmp	r3, #64	; 0x40
 800e3b4:	d83c      	bhi.n	800e430 <_scanf_float+0xd0>
 800e3b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e3ba:	b2c8      	uxtb	r0, r1
 800e3bc:	280e      	cmp	r0, #14
 800e3be:	d93a      	bls.n	800e436 <_scanf_float+0xd6>
 800e3c0:	f1b9 0f00 	cmp.w	r9, #0
 800e3c4:	d003      	beq.n	800e3ce <_scanf_float+0x6e>
 800e3c6:	6823      	ldr	r3, [r4, #0]
 800e3c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e3cc:	6023      	str	r3, [r4, #0]
 800e3ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e3d2:	f1ba 0f01 	cmp.w	sl, #1
 800e3d6:	f200 8113 	bhi.w	800e600 <_scanf_float+0x2a0>
 800e3da:	455e      	cmp	r6, fp
 800e3dc:	f200 8105 	bhi.w	800e5ea <_scanf_float+0x28a>
 800e3e0:	2501      	movs	r5, #1
 800e3e2:	4628      	mov	r0, r5
 800e3e4:	b007      	add	sp, #28
 800e3e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e3ee:	2a0d      	cmp	r2, #13
 800e3f0:	d8e6      	bhi.n	800e3c0 <_scanf_float+0x60>
 800e3f2:	a101      	add	r1, pc, #4	; (adr r1, 800e3f8 <_scanf_float+0x98>)
 800e3f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e3f8:	0800e537 	.word	0x0800e537
 800e3fc:	0800e3c1 	.word	0x0800e3c1
 800e400:	0800e3c1 	.word	0x0800e3c1
 800e404:	0800e3c1 	.word	0x0800e3c1
 800e408:	0800e597 	.word	0x0800e597
 800e40c:	0800e56f 	.word	0x0800e56f
 800e410:	0800e3c1 	.word	0x0800e3c1
 800e414:	0800e3c1 	.word	0x0800e3c1
 800e418:	0800e545 	.word	0x0800e545
 800e41c:	0800e3c1 	.word	0x0800e3c1
 800e420:	0800e3c1 	.word	0x0800e3c1
 800e424:	0800e3c1 	.word	0x0800e3c1
 800e428:	0800e3c1 	.word	0x0800e3c1
 800e42c:	0800e4fd 	.word	0x0800e4fd
 800e430:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e434:	e7db      	b.n	800e3ee <_scanf_float+0x8e>
 800e436:	290e      	cmp	r1, #14
 800e438:	d8c2      	bhi.n	800e3c0 <_scanf_float+0x60>
 800e43a:	a001      	add	r0, pc, #4	; (adr r0, 800e440 <_scanf_float+0xe0>)
 800e43c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e440:	0800e4ef 	.word	0x0800e4ef
 800e444:	0800e3c1 	.word	0x0800e3c1
 800e448:	0800e4ef 	.word	0x0800e4ef
 800e44c:	0800e583 	.word	0x0800e583
 800e450:	0800e3c1 	.word	0x0800e3c1
 800e454:	0800e49d 	.word	0x0800e49d
 800e458:	0800e4d9 	.word	0x0800e4d9
 800e45c:	0800e4d9 	.word	0x0800e4d9
 800e460:	0800e4d9 	.word	0x0800e4d9
 800e464:	0800e4d9 	.word	0x0800e4d9
 800e468:	0800e4d9 	.word	0x0800e4d9
 800e46c:	0800e4d9 	.word	0x0800e4d9
 800e470:	0800e4d9 	.word	0x0800e4d9
 800e474:	0800e4d9 	.word	0x0800e4d9
 800e478:	0800e4d9 	.word	0x0800e4d9
 800e47c:	2b6e      	cmp	r3, #110	; 0x6e
 800e47e:	d809      	bhi.n	800e494 <_scanf_float+0x134>
 800e480:	2b60      	cmp	r3, #96	; 0x60
 800e482:	d8b2      	bhi.n	800e3ea <_scanf_float+0x8a>
 800e484:	2b54      	cmp	r3, #84	; 0x54
 800e486:	d077      	beq.n	800e578 <_scanf_float+0x218>
 800e488:	2b59      	cmp	r3, #89	; 0x59
 800e48a:	d199      	bne.n	800e3c0 <_scanf_float+0x60>
 800e48c:	2d07      	cmp	r5, #7
 800e48e:	d197      	bne.n	800e3c0 <_scanf_float+0x60>
 800e490:	2508      	movs	r5, #8
 800e492:	e029      	b.n	800e4e8 <_scanf_float+0x188>
 800e494:	2b74      	cmp	r3, #116	; 0x74
 800e496:	d06f      	beq.n	800e578 <_scanf_float+0x218>
 800e498:	2b79      	cmp	r3, #121	; 0x79
 800e49a:	e7f6      	b.n	800e48a <_scanf_float+0x12a>
 800e49c:	6821      	ldr	r1, [r4, #0]
 800e49e:	05c8      	lsls	r0, r1, #23
 800e4a0:	d51a      	bpl.n	800e4d8 <_scanf_float+0x178>
 800e4a2:	9b02      	ldr	r3, [sp, #8]
 800e4a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e4a8:	6021      	str	r1, [r4, #0]
 800e4aa:	f109 0901 	add.w	r9, r9, #1
 800e4ae:	b11b      	cbz	r3, 800e4b8 <_scanf_float+0x158>
 800e4b0:	3b01      	subs	r3, #1
 800e4b2:	3201      	adds	r2, #1
 800e4b4:	9302      	str	r3, [sp, #8]
 800e4b6:	60a2      	str	r2, [r4, #8]
 800e4b8:	68a3      	ldr	r3, [r4, #8]
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	60a3      	str	r3, [r4, #8]
 800e4be:	6923      	ldr	r3, [r4, #16]
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	6123      	str	r3, [r4, #16]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	3b01      	subs	r3, #1
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	607b      	str	r3, [r7, #4]
 800e4cc:	f340 8084 	ble.w	800e5d8 <_scanf_float+0x278>
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	603b      	str	r3, [r7, #0]
 800e4d6:	e766      	b.n	800e3a6 <_scanf_float+0x46>
 800e4d8:	eb1a 0f05 	cmn.w	sl, r5
 800e4dc:	f47f af70 	bne.w	800e3c0 <_scanf_float+0x60>
 800e4e0:	6822      	ldr	r2, [r4, #0]
 800e4e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e4e6:	6022      	str	r2, [r4, #0]
 800e4e8:	f806 3b01 	strb.w	r3, [r6], #1
 800e4ec:	e7e4      	b.n	800e4b8 <_scanf_float+0x158>
 800e4ee:	6822      	ldr	r2, [r4, #0]
 800e4f0:	0610      	lsls	r0, r2, #24
 800e4f2:	f57f af65 	bpl.w	800e3c0 <_scanf_float+0x60>
 800e4f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e4fa:	e7f4      	b.n	800e4e6 <_scanf_float+0x186>
 800e4fc:	f1ba 0f00 	cmp.w	sl, #0
 800e500:	d10e      	bne.n	800e520 <_scanf_float+0x1c0>
 800e502:	f1b9 0f00 	cmp.w	r9, #0
 800e506:	d10e      	bne.n	800e526 <_scanf_float+0x1c6>
 800e508:	6822      	ldr	r2, [r4, #0]
 800e50a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e50e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e512:	d108      	bne.n	800e526 <_scanf_float+0x1c6>
 800e514:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e518:	6022      	str	r2, [r4, #0]
 800e51a:	f04f 0a01 	mov.w	sl, #1
 800e51e:	e7e3      	b.n	800e4e8 <_scanf_float+0x188>
 800e520:	f1ba 0f02 	cmp.w	sl, #2
 800e524:	d055      	beq.n	800e5d2 <_scanf_float+0x272>
 800e526:	2d01      	cmp	r5, #1
 800e528:	d002      	beq.n	800e530 <_scanf_float+0x1d0>
 800e52a:	2d04      	cmp	r5, #4
 800e52c:	f47f af48 	bne.w	800e3c0 <_scanf_float+0x60>
 800e530:	3501      	adds	r5, #1
 800e532:	b2ed      	uxtb	r5, r5
 800e534:	e7d8      	b.n	800e4e8 <_scanf_float+0x188>
 800e536:	f1ba 0f01 	cmp.w	sl, #1
 800e53a:	f47f af41 	bne.w	800e3c0 <_scanf_float+0x60>
 800e53e:	f04f 0a02 	mov.w	sl, #2
 800e542:	e7d1      	b.n	800e4e8 <_scanf_float+0x188>
 800e544:	b97d      	cbnz	r5, 800e566 <_scanf_float+0x206>
 800e546:	f1b9 0f00 	cmp.w	r9, #0
 800e54a:	f47f af3c 	bne.w	800e3c6 <_scanf_float+0x66>
 800e54e:	6822      	ldr	r2, [r4, #0]
 800e550:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e554:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e558:	f47f af39 	bne.w	800e3ce <_scanf_float+0x6e>
 800e55c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e560:	6022      	str	r2, [r4, #0]
 800e562:	2501      	movs	r5, #1
 800e564:	e7c0      	b.n	800e4e8 <_scanf_float+0x188>
 800e566:	2d03      	cmp	r5, #3
 800e568:	d0e2      	beq.n	800e530 <_scanf_float+0x1d0>
 800e56a:	2d05      	cmp	r5, #5
 800e56c:	e7de      	b.n	800e52c <_scanf_float+0x1cc>
 800e56e:	2d02      	cmp	r5, #2
 800e570:	f47f af26 	bne.w	800e3c0 <_scanf_float+0x60>
 800e574:	2503      	movs	r5, #3
 800e576:	e7b7      	b.n	800e4e8 <_scanf_float+0x188>
 800e578:	2d06      	cmp	r5, #6
 800e57a:	f47f af21 	bne.w	800e3c0 <_scanf_float+0x60>
 800e57e:	2507      	movs	r5, #7
 800e580:	e7b2      	b.n	800e4e8 <_scanf_float+0x188>
 800e582:	6822      	ldr	r2, [r4, #0]
 800e584:	0591      	lsls	r1, r2, #22
 800e586:	f57f af1b 	bpl.w	800e3c0 <_scanf_float+0x60>
 800e58a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e58e:	6022      	str	r2, [r4, #0]
 800e590:	f8cd 9004 	str.w	r9, [sp, #4]
 800e594:	e7a8      	b.n	800e4e8 <_scanf_float+0x188>
 800e596:	6822      	ldr	r2, [r4, #0]
 800e598:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e59c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e5a0:	d006      	beq.n	800e5b0 <_scanf_float+0x250>
 800e5a2:	0550      	lsls	r0, r2, #21
 800e5a4:	f57f af0c 	bpl.w	800e3c0 <_scanf_float+0x60>
 800e5a8:	f1b9 0f00 	cmp.w	r9, #0
 800e5ac:	f43f af0f 	beq.w	800e3ce <_scanf_float+0x6e>
 800e5b0:	0591      	lsls	r1, r2, #22
 800e5b2:	bf58      	it	pl
 800e5b4:	9901      	ldrpl	r1, [sp, #4]
 800e5b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e5ba:	bf58      	it	pl
 800e5bc:	eba9 0101 	subpl.w	r1, r9, r1
 800e5c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e5c4:	bf58      	it	pl
 800e5c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e5ca:	6022      	str	r2, [r4, #0]
 800e5cc:	f04f 0900 	mov.w	r9, #0
 800e5d0:	e78a      	b.n	800e4e8 <_scanf_float+0x188>
 800e5d2:	f04f 0a03 	mov.w	sl, #3
 800e5d6:	e787      	b.n	800e4e8 <_scanf_float+0x188>
 800e5d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e5dc:	4639      	mov	r1, r7
 800e5de:	4640      	mov	r0, r8
 800e5e0:	4798      	blx	r3
 800e5e2:	2800      	cmp	r0, #0
 800e5e4:	f43f aedf 	beq.w	800e3a6 <_scanf_float+0x46>
 800e5e8:	e6ea      	b.n	800e3c0 <_scanf_float+0x60>
 800e5ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e5ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e5f2:	463a      	mov	r2, r7
 800e5f4:	4640      	mov	r0, r8
 800e5f6:	4798      	blx	r3
 800e5f8:	6923      	ldr	r3, [r4, #16]
 800e5fa:	3b01      	subs	r3, #1
 800e5fc:	6123      	str	r3, [r4, #16]
 800e5fe:	e6ec      	b.n	800e3da <_scanf_float+0x7a>
 800e600:	1e6b      	subs	r3, r5, #1
 800e602:	2b06      	cmp	r3, #6
 800e604:	d825      	bhi.n	800e652 <_scanf_float+0x2f2>
 800e606:	2d02      	cmp	r5, #2
 800e608:	d836      	bhi.n	800e678 <_scanf_float+0x318>
 800e60a:	455e      	cmp	r6, fp
 800e60c:	f67f aee8 	bls.w	800e3e0 <_scanf_float+0x80>
 800e610:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e614:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e618:	463a      	mov	r2, r7
 800e61a:	4640      	mov	r0, r8
 800e61c:	4798      	blx	r3
 800e61e:	6923      	ldr	r3, [r4, #16]
 800e620:	3b01      	subs	r3, #1
 800e622:	6123      	str	r3, [r4, #16]
 800e624:	e7f1      	b.n	800e60a <_scanf_float+0x2aa>
 800e626:	9802      	ldr	r0, [sp, #8]
 800e628:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e62c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e630:	9002      	str	r0, [sp, #8]
 800e632:	463a      	mov	r2, r7
 800e634:	4640      	mov	r0, r8
 800e636:	4798      	blx	r3
 800e638:	6923      	ldr	r3, [r4, #16]
 800e63a:	3b01      	subs	r3, #1
 800e63c:	6123      	str	r3, [r4, #16]
 800e63e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e642:	fa5f fa8a 	uxtb.w	sl, sl
 800e646:	f1ba 0f02 	cmp.w	sl, #2
 800e64a:	d1ec      	bne.n	800e626 <_scanf_float+0x2c6>
 800e64c:	3d03      	subs	r5, #3
 800e64e:	b2ed      	uxtb	r5, r5
 800e650:	1b76      	subs	r6, r6, r5
 800e652:	6823      	ldr	r3, [r4, #0]
 800e654:	05da      	lsls	r2, r3, #23
 800e656:	d52f      	bpl.n	800e6b8 <_scanf_float+0x358>
 800e658:	055b      	lsls	r3, r3, #21
 800e65a:	d510      	bpl.n	800e67e <_scanf_float+0x31e>
 800e65c:	455e      	cmp	r6, fp
 800e65e:	f67f aebf 	bls.w	800e3e0 <_scanf_float+0x80>
 800e662:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e666:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e66a:	463a      	mov	r2, r7
 800e66c:	4640      	mov	r0, r8
 800e66e:	4798      	blx	r3
 800e670:	6923      	ldr	r3, [r4, #16]
 800e672:	3b01      	subs	r3, #1
 800e674:	6123      	str	r3, [r4, #16]
 800e676:	e7f1      	b.n	800e65c <_scanf_float+0x2fc>
 800e678:	46aa      	mov	sl, r5
 800e67a:	9602      	str	r6, [sp, #8]
 800e67c:	e7df      	b.n	800e63e <_scanf_float+0x2de>
 800e67e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e682:	6923      	ldr	r3, [r4, #16]
 800e684:	2965      	cmp	r1, #101	; 0x65
 800e686:	f103 33ff 	add.w	r3, r3, #4294967295
 800e68a:	f106 35ff 	add.w	r5, r6, #4294967295
 800e68e:	6123      	str	r3, [r4, #16]
 800e690:	d00c      	beq.n	800e6ac <_scanf_float+0x34c>
 800e692:	2945      	cmp	r1, #69	; 0x45
 800e694:	d00a      	beq.n	800e6ac <_scanf_float+0x34c>
 800e696:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e69a:	463a      	mov	r2, r7
 800e69c:	4640      	mov	r0, r8
 800e69e:	4798      	blx	r3
 800e6a0:	6923      	ldr	r3, [r4, #16]
 800e6a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e6a6:	3b01      	subs	r3, #1
 800e6a8:	1eb5      	subs	r5, r6, #2
 800e6aa:	6123      	str	r3, [r4, #16]
 800e6ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e6b0:	463a      	mov	r2, r7
 800e6b2:	4640      	mov	r0, r8
 800e6b4:	4798      	blx	r3
 800e6b6:	462e      	mov	r6, r5
 800e6b8:	6825      	ldr	r5, [r4, #0]
 800e6ba:	f015 0510 	ands.w	r5, r5, #16
 800e6be:	d158      	bne.n	800e772 <_scanf_float+0x412>
 800e6c0:	7035      	strb	r5, [r6, #0]
 800e6c2:	6823      	ldr	r3, [r4, #0]
 800e6c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e6c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e6cc:	d11c      	bne.n	800e708 <_scanf_float+0x3a8>
 800e6ce:	9b01      	ldr	r3, [sp, #4]
 800e6d0:	454b      	cmp	r3, r9
 800e6d2:	eba3 0209 	sub.w	r2, r3, r9
 800e6d6:	d124      	bne.n	800e722 <_scanf_float+0x3c2>
 800e6d8:	2200      	movs	r2, #0
 800e6da:	4659      	mov	r1, fp
 800e6dc:	4640      	mov	r0, r8
 800e6de:	f7ff f9c7 	bl	800da70 <_strtod_r>
 800e6e2:	9b03      	ldr	r3, [sp, #12]
 800e6e4:	6821      	ldr	r1, [r4, #0]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f011 0f02 	tst.w	r1, #2
 800e6ec:	ec57 6b10 	vmov	r6, r7, d0
 800e6f0:	f103 0204 	add.w	r2, r3, #4
 800e6f4:	d020      	beq.n	800e738 <_scanf_float+0x3d8>
 800e6f6:	9903      	ldr	r1, [sp, #12]
 800e6f8:	600a      	str	r2, [r1, #0]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	e9c3 6700 	strd	r6, r7, [r3]
 800e700:	68e3      	ldr	r3, [r4, #12]
 800e702:	3301      	adds	r3, #1
 800e704:	60e3      	str	r3, [r4, #12]
 800e706:	e66c      	b.n	800e3e2 <_scanf_float+0x82>
 800e708:	9b04      	ldr	r3, [sp, #16]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d0e4      	beq.n	800e6d8 <_scanf_float+0x378>
 800e70e:	9905      	ldr	r1, [sp, #20]
 800e710:	230a      	movs	r3, #10
 800e712:	462a      	mov	r2, r5
 800e714:	3101      	adds	r1, #1
 800e716:	4640      	mov	r0, r8
 800e718:	f002 f97a 	bl	8010a10 <_strtol_r>
 800e71c:	9b04      	ldr	r3, [sp, #16]
 800e71e:	9e05      	ldr	r6, [sp, #20]
 800e720:	1ac2      	subs	r2, r0, r3
 800e722:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e726:	429e      	cmp	r6, r3
 800e728:	bf28      	it	cs
 800e72a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e72e:	4912      	ldr	r1, [pc, #72]	; (800e778 <_scanf_float+0x418>)
 800e730:	4630      	mov	r0, r6
 800e732:	f000 f8e7 	bl	800e904 <siprintf>
 800e736:	e7cf      	b.n	800e6d8 <_scanf_float+0x378>
 800e738:	f011 0f04 	tst.w	r1, #4
 800e73c:	9903      	ldr	r1, [sp, #12]
 800e73e:	600a      	str	r2, [r1, #0]
 800e740:	d1db      	bne.n	800e6fa <_scanf_float+0x39a>
 800e742:	f8d3 8000 	ldr.w	r8, [r3]
 800e746:	ee10 2a10 	vmov	r2, s0
 800e74a:	ee10 0a10 	vmov	r0, s0
 800e74e:	463b      	mov	r3, r7
 800e750:	4639      	mov	r1, r7
 800e752:	f7f2 f9eb 	bl	8000b2c <__aeabi_dcmpun>
 800e756:	b128      	cbz	r0, 800e764 <_scanf_float+0x404>
 800e758:	4808      	ldr	r0, [pc, #32]	; (800e77c <_scanf_float+0x41c>)
 800e75a:	f000 f9f1 	bl	800eb40 <nanf>
 800e75e:	ed88 0a00 	vstr	s0, [r8]
 800e762:	e7cd      	b.n	800e700 <_scanf_float+0x3a0>
 800e764:	4630      	mov	r0, r6
 800e766:	4639      	mov	r1, r7
 800e768:	f7f2 fa3e 	bl	8000be8 <__aeabi_d2f>
 800e76c:	f8c8 0000 	str.w	r0, [r8]
 800e770:	e7c6      	b.n	800e700 <_scanf_float+0x3a0>
 800e772:	2500      	movs	r5, #0
 800e774:	e635      	b.n	800e3e2 <_scanf_float+0x82>
 800e776:	bf00      	nop
 800e778:	08013c74 	.word	0x08013c74
 800e77c:	08014011 	.word	0x08014011

0800e780 <std>:
 800e780:	2300      	movs	r3, #0
 800e782:	b510      	push	{r4, lr}
 800e784:	4604      	mov	r4, r0
 800e786:	e9c0 3300 	strd	r3, r3, [r0]
 800e78a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e78e:	6083      	str	r3, [r0, #8]
 800e790:	8181      	strh	r1, [r0, #12]
 800e792:	6643      	str	r3, [r0, #100]	; 0x64
 800e794:	81c2      	strh	r2, [r0, #14]
 800e796:	6183      	str	r3, [r0, #24]
 800e798:	4619      	mov	r1, r3
 800e79a:	2208      	movs	r2, #8
 800e79c:	305c      	adds	r0, #92	; 0x5c
 800e79e:	f000 f914 	bl	800e9ca <memset>
 800e7a2:	4b0d      	ldr	r3, [pc, #52]	; (800e7d8 <std+0x58>)
 800e7a4:	6263      	str	r3, [r4, #36]	; 0x24
 800e7a6:	4b0d      	ldr	r3, [pc, #52]	; (800e7dc <std+0x5c>)
 800e7a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e7aa:	4b0d      	ldr	r3, [pc, #52]	; (800e7e0 <std+0x60>)
 800e7ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e7ae:	4b0d      	ldr	r3, [pc, #52]	; (800e7e4 <std+0x64>)
 800e7b0:	6323      	str	r3, [r4, #48]	; 0x30
 800e7b2:	4b0d      	ldr	r3, [pc, #52]	; (800e7e8 <std+0x68>)
 800e7b4:	6224      	str	r4, [r4, #32]
 800e7b6:	429c      	cmp	r4, r3
 800e7b8:	d006      	beq.n	800e7c8 <std+0x48>
 800e7ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e7be:	4294      	cmp	r4, r2
 800e7c0:	d002      	beq.n	800e7c8 <std+0x48>
 800e7c2:	33d0      	adds	r3, #208	; 0xd0
 800e7c4:	429c      	cmp	r4, r3
 800e7c6:	d105      	bne.n	800e7d4 <std+0x54>
 800e7c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7d0:	f000 b99a 	b.w	800eb08 <__retarget_lock_init_recursive>
 800e7d4:	bd10      	pop	{r4, pc}
 800e7d6:	bf00      	nop
 800e7d8:	0800e945 	.word	0x0800e945
 800e7dc:	0800e967 	.word	0x0800e967
 800e7e0:	0800e99f 	.word	0x0800e99f
 800e7e4:	0800e9c3 	.word	0x0800e9c3
 800e7e8:	20000d9c 	.word	0x20000d9c

0800e7ec <stdio_exit_handler>:
 800e7ec:	4a02      	ldr	r2, [pc, #8]	; (800e7f8 <stdio_exit_handler+0xc>)
 800e7ee:	4903      	ldr	r1, [pc, #12]	; (800e7fc <stdio_exit_handler+0x10>)
 800e7f0:	4803      	ldr	r0, [pc, #12]	; (800e800 <stdio_exit_handler+0x14>)
 800e7f2:	f000 b869 	b.w	800e8c8 <_fwalk_sglue>
 800e7f6:	bf00      	nop
 800e7f8:	20000040 	.word	0x20000040
 800e7fc:	08010ded 	.word	0x08010ded
 800e800:	200001b8 	.word	0x200001b8

0800e804 <cleanup_stdio>:
 800e804:	6841      	ldr	r1, [r0, #4]
 800e806:	4b0c      	ldr	r3, [pc, #48]	; (800e838 <cleanup_stdio+0x34>)
 800e808:	4299      	cmp	r1, r3
 800e80a:	b510      	push	{r4, lr}
 800e80c:	4604      	mov	r4, r0
 800e80e:	d001      	beq.n	800e814 <cleanup_stdio+0x10>
 800e810:	f002 faec 	bl	8010dec <_fflush_r>
 800e814:	68a1      	ldr	r1, [r4, #8]
 800e816:	4b09      	ldr	r3, [pc, #36]	; (800e83c <cleanup_stdio+0x38>)
 800e818:	4299      	cmp	r1, r3
 800e81a:	d002      	beq.n	800e822 <cleanup_stdio+0x1e>
 800e81c:	4620      	mov	r0, r4
 800e81e:	f002 fae5 	bl	8010dec <_fflush_r>
 800e822:	68e1      	ldr	r1, [r4, #12]
 800e824:	4b06      	ldr	r3, [pc, #24]	; (800e840 <cleanup_stdio+0x3c>)
 800e826:	4299      	cmp	r1, r3
 800e828:	d004      	beq.n	800e834 <cleanup_stdio+0x30>
 800e82a:	4620      	mov	r0, r4
 800e82c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e830:	f002 badc 	b.w	8010dec <_fflush_r>
 800e834:	bd10      	pop	{r4, pc}
 800e836:	bf00      	nop
 800e838:	20000d9c 	.word	0x20000d9c
 800e83c:	20000e04 	.word	0x20000e04
 800e840:	20000e6c 	.word	0x20000e6c

0800e844 <global_stdio_init.part.0>:
 800e844:	b510      	push	{r4, lr}
 800e846:	4b0b      	ldr	r3, [pc, #44]	; (800e874 <global_stdio_init.part.0+0x30>)
 800e848:	4c0b      	ldr	r4, [pc, #44]	; (800e878 <global_stdio_init.part.0+0x34>)
 800e84a:	4a0c      	ldr	r2, [pc, #48]	; (800e87c <global_stdio_init.part.0+0x38>)
 800e84c:	601a      	str	r2, [r3, #0]
 800e84e:	4620      	mov	r0, r4
 800e850:	2200      	movs	r2, #0
 800e852:	2104      	movs	r1, #4
 800e854:	f7ff ff94 	bl	800e780 <std>
 800e858:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e85c:	2201      	movs	r2, #1
 800e85e:	2109      	movs	r1, #9
 800e860:	f7ff ff8e 	bl	800e780 <std>
 800e864:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e868:	2202      	movs	r2, #2
 800e86a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e86e:	2112      	movs	r1, #18
 800e870:	f7ff bf86 	b.w	800e780 <std>
 800e874:	20000ed4 	.word	0x20000ed4
 800e878:	20000d9c 	.word	0x20000d9c
 800e87c:	0800e7ed 	.word	0x0800e7ed

0800e880 <__sfp_lock_acquire>:
 800e880:	4801      	ldr	r0, [pc, #4]	; (800e888 <__sfp_lock_acquire+0x8>)
 800e882:	f000 b942 	b.w	800eb0a <__retarget_lock_acquire_recursive>
 800e886:	bf00      	nop
 800e888:	20000edd 	.word	0x20000edd

0800e88c <__sfp_lock_release>:
 800e88c:	4801      	ldr	r0, [pc, #4]	; (800e894 <__sfp_lock_release+0x8>)
 800e88e:	f000 b93d 	b.w	800eb0c <__retarget_lock_release_recursive>
 800e892:	bf00      	nop
 800e894:	20000edd 	.word	0x20000edd

0800e898 <__sinit>:
 800e898:	b510      	push	{r4, lr}
 800e89a:	4604      	mov	r4, r0
 800e89c:	f7ff fff0 	bl	800e880 <__sfp_lock_acquire>
 800e8a0:	6a23      	ldr	r3, [r4, #32]
 800e8a2:	b11b      	cbz	r3, 800e8ac <__sinit+0x14>
 800e8a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e8a8:	f7ff bff0 	b.w	800e88c <__sfp_lock_release>
 800e8ac:	4b04      	ldr	r3, [pc, #16]	; (800e8c0 <__sinit+0x28>)
 800e8ae:	6223      	str	r3, [r4, #32]
 800e8b0:	4b04      	ldr	r3, [pc, #16]	; (800e8c4 <__sinit+0x2c>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d1f5      	bne.n	800e8a4 <__sinit+0xc>
 800e8b8:	f7ff ffc4 	bl	800e844 <global_stdio_init.part.0>
 800e8bc:	e7f2      	b.n	800e8a4 <__sinit+0xc>
 800e8be:	bf00      	nop
 800e8c0:	0800e805 	.word	0x0800e805
 800e8c4:	20000ed4 	.word	0x20000ed4

0800e8c8 <_fwalk_sglue>:
 800e8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8cc:	4607      	mov	r7, r0
 800e8ce:	4688      	mov	r8, r1
 800e8d0:	4614      	mov	r4, r2
 800e8d2:	2600      	movs	r6, #0
 800e8d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e8d8:	f1b9 0901 	subs.w	r9, r9, #1
 800e8dc:	d505      	bpl.n	800e8ea <_fwalk_sglue+0x22>
 800e8de:	6824      	ldr	r4, [r4, #0]
 800e8e0:	2c00      	cmp	r4, #0
 800e8e2:	d1f7      	bne.n	800e8d4 <_fwalk_sglue+0xc>
 800e8e4:	4630      	mov	r0, r6
 800e8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8ea:	89ab      	ldrh	r3, [r5, #12]
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d907      	bls.n	800e900 <_fwalk_sglue+0x38>
 800e8f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	d003      	beq.n	800e900 <_fwalk_sglue+0x38>
 800e8f8:	4629      	mov	r1, r5
 800e8fa:	4638      	mov	r0, r7
 800e8fc:	47c0      	blx	r8
 800e8fe:	4306      	orrs	r6, r0
 800e900:	3568      	adds	r5, #104	; 0x68
 800e902:	e7e9      	b.n	800e8d8 <_fwalk_sglue+0x10>

0800e904 <siprintf>:
 800e904:	b40e      	push	{r1, r2, r3}
 800e906:	b500      	push	{lr}
 800e908:	b09c      	sub	sp, #112	; 0x70
 800e90a:	ab1d      	add	r3, sp, #116	; 0x74
 800e90c:	9002      	str	r0, [sp, #8]
 800e90e:	9006      	str	r0, [sp, #24]
 800e910:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e914:	4809      	ldr	r0, [pc, #36]	; (800e93c <siprintf+0x38>)
 800e916:	9107      	str	r1, [sp, #28]
 800e918:	9104      	str	r1, [sp, #16]
 800e91a:	4909      	ldr	r1, [pc, #36]	; (800e940 <siprintf+0x3c>)
 800e91c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e920:	9105      	str	r1, [sp, #20]
 800e922:	6800      	ldr	r0, [r0, #0]
 800e924:	9301      	str	r3, [sp, #4]
 800e926:	a902      	add	r1, sp, #8
 800e928:	f002 f8dc 	bl	8010ae4 <_svfiprintf_r>
 800e92c:	9b02      	ldr	r3, [sp, #8]
 800e92e:	2200      	movs	r2, #0
 800e930:	701a      	strb	r2, [r3, #0]
 800e932:	b01c      	add	sp, #112	; 0x70
 800e934:	f85d eb04 	ldr.w	lr, [sp], #4
 800e938:	b003      	add	sp, #12
 800e93a:	4770      	bx	lr
 800e93c:	20000204 	.word	0x20000204
 800e940:	ffff0208 	.word	0xffff0208

0800e944 <__sread>:
 800e944:	b510      	push	{r4, lr}
 800e946:	460c      	mov	r4, r1
 800e948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e94c:	f000 f87e 	bl	800ea4c <_read_r>
 800e950:	2800      	cmp	r0, #0
 800e952:	bfab      	itete	ge
 800e954:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e956:	89a3      	ldrhlt	r3, [r4, #12]
 800e958:	181b      	addge	r3, r3, r0
 800e95a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e95e:	bfac      	ite	ge
 800e960:	6563      	strge	r3, [r4, #84]	; 0x54
 800e962:	81a3      	strhlt	r3, [r4, #12]
 800e964:	bd10      	pop	{r4, pc}

0800e966 <__swrite>:
 800e966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e96a:	461f      	mov	r7, r3
 800e96c:	898b      	ldrh	r3, [r1, #12]
 800e96e:	05db      	lsls	r3, r3, #23
 800e970:	4605      	mov	r5, r0
 800e972:	460c      	mov	r4, r1
 800e974:	4616      	mov	r6, r2
 800e976:	d505      	bpl.n	800e984 <__swrite+0x1e>
 800e978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e97c:	2302      	movs	r3, #2
 800e97e:	2200      	movs	r2, #0
 800e980:	f000 f852 	bl	800ea28 <_lseek_r>
 800e984:	89a3      	ldrh	r3, [r4, #12]
 800e986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e98a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e98e:	81a3      	strh	r3, [r4, #12]
 800e990:	4632      	mov	r2, r6
 800e992:	463b      	mov	r3, r7
 800e994:	4628      	mov	r0, r5
 800e996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e99a:	f000 b879 	b.w	800ea90 <_write_r>

0800e99e <__sseek>:
 800e99e:	b510      	push	{r4, lr}
 800e9a0:	460c      	mov	r4, r1
 800e9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9a6:	f000 f83f 	bl	800ea28 <_lseek_r>
 800e9aa:	1c43      	adds	r3, r0, #1
 800e9ac:	89a3      	ldrh	r3, [r4, #12]
 800e9ae:	bf15      	itete	ne
 800e9b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e9b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e9b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e9ba:	81a3      	strheq	r3, [r4, #12]
 800e9bc:	bf18      	it	ne
 800e9be:	81a3      	strhne	r3, [r4, #12]
 800e9c0:	bd10      	pop	{r4, pc}

0800e9c2 <__sclose>:
 800e9c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9c6:	f000 b81f 	b.w	800ea08 <_close_r>

0800e9ca <memset>:
 800e9ca:	4402      	add	r2, r0
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d100      	bne.n	800e9d4 <memset+0xa>
 800e9d2:	4770      	bx	lr
 800e9d4:	f803 1b01 	strb.w	r1, [r3], #1
 800e9d8:	e7f9      	b.n	800e9ce <memset+0x4>

0800e9da <strncmp>:
 800e9da:	b510      	push	{r4, lr}
 800e9dc:	b16a      	cbz	r2, 800e9fa <strncmp+0x20>
 800e9de:	3901      	subs	r1, #1
 800e9e0:	1884      	adds	r4, r0, r2
 800e9e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d103      	bne.n	800e9f6 <strncmp+0x1c>
 800e9ee:	42a0      	cmp	r0, r4
 800e9f0:	d001      	beq.n	800e9f6 <strncmp+0x1c>
 800e9f2:	2a00      	cmp	r2, #0
 800e9f4:	d1f5      	bne.n	800e9e2 <strncmp+0x8>
 800e9f6:	1ad0      	subs	r0, r2, r3
 800e9f8:	bd10      	pop	{r4, pc}
 800e9fa:	4610      	mov	r0, r2
 800e9fc:	e7fc      	b.n	800e9f8 <strncmp+0x1e>
	...

0800ea00 <_localeconv_r>:
 800ea00:	4800      	ldr	r0, [pc, #0]	; (800ea04 <_localeconv_r+0x4>)
 800ea02:	4770      	bx	lr
 800ea04:	2000013c 	.word	0x2000013c

0800ea08 <_close_r>:
 800ea08:	b538      	push	{r3, r4, r5, lr}
 800ea0a:	4d06      	ldr	r5, [pc, #24]	; (800ea24 <_close_r+0x1c>)
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	4604      	mov	r4, r0
 800ea10:	4608      	mov	r0, r1
 800ea12:	602b      	str	r3, [r5, #0]
 800ea14:	f7f3 ff3d 	bl	8002892 <_close>
 800ea18:	1c43      	adds	r3, r0, #1
 800ea1a:	d102      	bne.n	800ea22 <_close_r+0x1a>
 800ea1c:	682b      	ldr	r3, [r5, #0]
 800ea1e:	b103      	cbz	r3, 800ea22 <_close_r+0x1a>
 800ea20:	6023      	str	r3, [r4, #0]
 800ea22:	bd38      	pop	{r3, r4, r5, pc}
 800ea24:	20000ed8 	.word	0x20000ed8

0800ea28 <_lseek_r>:
 800ea28:	b538      	push	{r3, r4, r5, lr}
 800ea2a:	4d07      	ldr	r5, [pc, #28]	; (800ea48 <_lseek_r+0x20>)
 800ea2c:	4604      	mov	r4, r0
 800ea2e:	4608      	mov	r0, r1
 800ea30:	4611      	mov	r1, r2
 800ea32:	2200      	movs	r2, #0
 800ea34:	602a      	str	r2, [r5, #0]
 800ea36:	461a      	mov	r2, r3
 800ea38:	f7f3 ff52 	bl	80028e0 <_lseek>
 800ea3c:	1c43      	adds	r3, r0, #1
 800ea3e:	d102      	bne.n	800ea46 <_lseek_r+0x1e>
 800ea40:	682b      	ldr	r3, [r5, #0]
 800ea42:	b103      	cbz	r3, 800ea46 <_lseek_r+0x1e>
 800ea44:	6023      	str	r3, [r4, #0]
 800ea46:	bd38      	pop	{r3, r4, r5, pc}
 800ea48:	20000ed8 	.word	0x20000ed8

0800ea4c <_read_r>:
 800ea4c:	b538      	push	{r3, r4, r5, lr}
 800ea4e:	4d07      	ldr	r5, [pc, #28]	; (800ea6c <_read_r+0x20>)
 800ea50:	4604      	mov	r4, r0
 800ea52:	4608      	mov	r0, r1
 800ea54:	4611      	mov	r1, r2
 800ea56:	2200      	movs	r2, #0
 800ea58:	602a      	str	r2, [r5, #0]
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	f7f3 fee0 	bl	8002820 <_read>
 800ea60:	1c43      	adds	r3, r0, #1
 800ea62:	d102      	bne.n	800ea6a <_read_r+0x1e>
 800ea64:	682b      	ldr	r3, [r5, #0]
 800ea66:	b103      	cbz	r3, 800ea6a <_read_r+0x1e>
 800ea68:	6023      	str	r3, [r4, #0]
 800ea6a:	bd38      	pop	{r3, r4, r5, pc}
 800ea6c:	20000ed8 	.word	0x20000ed8

0800ea70 <_sbrk_r>:
 800ea70:	b538      	push	{r3, r4, r5, lr}
 800ea72:	4d06      	ldr	r5, [pc, #24]	; (800ea8c <_sbrk_r+0x1c>)
 800ea74:	2300      	movs	r3, #0
 800ea76:	4604      	mov	r4, r0
 800ea78:	4608      	mov	r0, r1
 800ea7a:	602b      	str	r3, [r5, #0]
 800ea7c:	f7f3 ff3e 	bl	80028fc <_sbrk>
 800ea80:	1c43      	adds	r3, r0, #1
 800ea82:	d102      	bne.n	800ea8a <_sbrk_r+0x1a>
 800ea84:	682b      	ldr	r3, [r5, #0]
 800ea86:	b103      	cbz	r3, 800ea8a <_sbrk_r+0x1a>
 800ea88:	6023      	str	r3, [r4, #0]
 800ea8a:	bd38      	pop	{r3, r4, r5, pc}
 800ea8c:	20000ed8 	.word	0x20000ed8

0800ea90 <_write_r>:
 800ea90:	b538      	push	{r3, r4, r5, lr}
 800ea92:	4d07      	ldr	r5, [pc, #28]	; (800eab0 <_write_r+0x20>)
 800ea94:	4604      	mov	r4, r0
 800ea96:	4608      	mov	r0, r1
 800ea98:	4611      	mov	r1, r2
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	602a      	str	r2, [r5, #0]
 800ea9e:	461a      	mov	r2, r3
 800eaa0:	f7f3 fedb 	bl	800285a <_write>
 800eaa4:	1c43      	adds	r3, r0, #1
 800eaa6:	d102      	bne.n	800eaae <_write_r+0x1e>
 800eaa8:	682b      	ldr	r3, [r5, #0]
 800eaaa:	b103      	cbz	r3, 800eaae <_write_r+0x1e>
 800eaac:	6023      	str	r3, [r4, #0]
 800eaae:	bd38      	pop	{r3, r4, r5, pc}
 800eab0:	20000ed8 	.word	0x20000ed8

0800eab4 <__errno>:
 800eab4:	4b01      	ldr	r3, [pc, #4]	; (800eabc <__errno+0x8>)
 800eab6:	6818      	ldr	r0, [r3, #0]
 800eab8:	4770      	bx	lr
 800eaba:	bf00      	nop
 800eabc:	20000204 	.word	0x20000204

0800eac0 <__libc_init_array>:
 800eac0:	b570      	push	{r4, r5, r6, lr}
 800eac2:	4d0d      	ldr	r5, [pc, #52]	; (800eaf8 <__libc_init_array+0x38>)
 800eac4:	4c0d      	ldr	r4, [pc, #52]	; (800eafc <__libc_init_array+0x3c>)
 800eac6:	1b64      	subs	r4, r4, r5
 800eac8:	10a4      	asrs	r4, r4, #2
 800eaca:	2600      	movs	r6, #0
 800eacc:	42a6      	cmp	r6, r4
 800eace:	d109      	bne.n	800eae4 <__libc_init_array+0x24>
 800ead0:	4d0b      	ldr	r5, [pc, #44]	; (800eb00 <__libc_init_array+0x40>)
 800ead2:	4c0c      	ldr	r4, [pc, #48]	; (800eb04 <__libc_init_array+0x44>)
 800ead4:	f005 f810 	bl	8013af8 <_init>
 800ead8:	1b64      	subs	r4, r4, r5
 800eada:	10a4      	asrs	r4, r4, #2
 800eadc:	2600      	movs	r6, #0
 800eade:	42a6      	cmp	r6, r4
 800eae0:	d105      	bne.n	800eaee <__libc_init_array+0x2e>
 800eae2:	bd70      	pop	{r4, r5, r6, pc}
 800eae4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eae8:	4798      	blx	r3
 800eaea:	3601      	adds	r6, #1
 800eaec:	e7ee      	b.n	800eacc <__libc_init_array+0xc>
 800eaee:	f855 3b04 	ldr.w	r3, [r5], #4
 800eaf2:	4798      	blx	r3
 800eaf4:	3601      	adds	r6, #1
 800eaf6:	e7f2      	b.n	800eade <__libc_init_array+0x1e>
 800eaf8:	080142a8 	.word	0x080142a8
 800eafc:	080142a8 	.word	0x080142a8
 800eb00:	080142a8 	.word	0x080142a8
 800eb04:	080142ac 	.word	0x080142ac

0800eb08 <__retarget_lock_init_recursive>:
 800eb08:	4770      	bx	lr

0800eb0a <__retarget_lock_acquire_recursive>:
 800eb0a:	4770      	bx	lr

0800eb0c <__retarget_lock_release_recursive>:
 800eb0c:	4770      	bx	lr

0800eb0e <memcpy>:
 800eb0e:	440a      	add	r2, r1
 800eb10:	4291      	cmp	r1, r2
 800eb12:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb16:	d100      	bne.n	800eb1a <memcpy+0xc>
 800eb18:	4770      	bx	lr
 800eb1a:	b510      	push	{r4, lr}
 800eb1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb20:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb24:	4291      	cmp	r1, r2
 800eb26:	d1f9      	bne.n	800eb1c <memcpy+0xe>
 800eb28:	bd10      	pop	{r4, pc}
 800eb2a:	0000      	movs	r0, r0
 800eb2c:	0000      	movs	r0, r0
	...

0800eb30 <nan>:
 800eb30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eb38 <nan+0x8>
 800eb34:	4770      	bx	lr
 800eb36:	bf00      	nop
 800eb38:	00000000 	.word	0x00000000
 800eb3c:	7ff80000 	.word	0x7ff80000

0800eb40 <nanf>:
 800eb40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800eb48 <nanf+0x8>
 800eb44:	4770      	bx	lr
 800eb46:	bf00      	nop
 800eb48:	7fc00000 	.word	0x7fc00000

0800eb4c <quorem>:
 800eb4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb50:	6903      	ldr	r3, [r0, #16]
 800eb52:	690c      	ldr	r4, [r1, #16]
 800eb54:	42a3      	cmp	r3, r4
 800eb56:	4607      	mov	r7, r0
 800eb58:	db7e      	blt.n	800ec58 <quorem+0x10c>
 800eb5a:	3c01      	subs	r4, #1
 800eb5c:	f101 0814 	add.w	r8, r1, #20
 800eb60:	f100 0514 	add.w	r5, r0, #20
 800eb64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb68:	9301      	str	r3, [sp, #4]
 800eb6a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eb6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb72:	3301      	adds	r3, #1
 800eb74:	429a      	cmp	r2, r3
 800eb76:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eb7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eb7e:	fbb2 f6f3 	udiv	r6, r2, r3
 800eb82:	d331      	bcc.n	800ebe8 <quorem+0x9c>
 800eb84:	f04f 0e00 	mov.w	lr, #0
 800eb88:	4640      	mov	r0, r8
 800eb8a:	46ac      	mov	ip, r5
 800eb8c:	46f2      	mov	sl, lr
 800eb8e:	f850 2b04 	ldr.w	r2, [r0], #4
 800eb92:	b293      	uxth	r3, r2
 800eb94:	fb06 e303 	mla	r3, r6, r3, lr
 800eb98:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eb9c:	0c1a      	lsrs	r2, r3, #16
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	ebaa 0303 	sub.w	r3, sl, r3
 800eba4:	f8dc a000 	ldr.w	sl, [ip]
 800eba8:	fa13 f38a 	uxtah	r3, r3, sl
 800ebac:	fb06 220e 	mla	r2, r6, lr, r2
 800ebb0:	9300      	str	r3, [sp, #0]
 800ebb2:	9b00      	ldr	r3, [sp, #0]
 800ebb4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ebb8:	b292      	uxth	r2, r2
 800ebba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ebbe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ebc2:	f8bd 3000 	ldrh.w	r3, [sp]
 800ebc6:	4581      	cmp	r9, r0
 800ebc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ebcc:	f84c 3b04 	str.w	r3, [ip], #4
 800ebd0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ebd4:	d2db      	bcs.n	800eb8e <quorem+0x42>
 800ebd6:	f855 300b 	ldr.w	r3, [r5, fp]
 800ebda:	b92b      	cbnz	r3, 800ebe8 <quorem+0x9c>
 800ebdc:	9b01      	ldr	r3, [sp, #4]
 800ebde:	3b04      	subs	r3, #4
 800ebe0:	429d      	cmp	r5, r3
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	d32c      	bcc.n	800ec40 <quorem+0xf4>
 800ebe6:	613c      	str	r4, [r7, #16]
 800ebe8:	4638      	mov	r0, r7
 800ebea:	f001 fca7 	bl	801053c <__mcmp>
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	db22      	blt.n	800ec38 <quorem+0xec>
 800ebf2:	3601      	adds	r6, #1
 800ebf4:	4629      	mov	r1, r5
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	f858 2b04 	ldr.w	r2, [r8], #4
 800ebfc:	f8d1 c000 	ldr.w	ip, [r1]
 800ec00:	b293      	uxth	r3, r2
 800ec02:	1ac3      	subs	r3, r0, r3
 800ec04:	0c12      	lsrs	r2, r2, #16
 800ec06:	fa13 f38c 	uxtah	r3, r3, ip
 800ec0a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ec0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec18:	45c1      	cmp	r9, r8
 800ec1a:	f841 3b04 	str.w	r3, [r1], #4
 800ec1e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ec22:	d2e9      	bcs.n	800ebf8 <quorem+0xac>
 800ec24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec2c:	b922      	cbnz	r2, 800ec38 <quorem+0xec>
 800ec2e:	3b04      	subs	r3, #4
 800ec30:	429d      	cmp	r5, r3
 800ec32:	461a      	mov	r2, r3
 800ec34:	d30a      	bcc.n	800ec4c <quorem+0x100>
 800ec36:	613c      	str	r4, [r7, #16]
 800ec38:	4630      	mov	r0, r6
 800ec3a:	b003      	add	sp, #12
 800ec3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec40:	6812      	ldr	r2, [r2, #0]
 800ec42:	3b04      	subs	r3, #4
 800ec44:	2a00      	cmp	r2, #0
 800ec46:	d1ce      	bne.n	800ebe6 <quorem+0x9a>
 800ec48:	3c01      	subs	r4, #1
 800ec4a:	e7c9      	b.n	800ebe0 <quorem+0x94>
 800ec4c:	6812      	ldr	r2, [r2, #0]
 800ec4e:	3b04      	subs	r3, #4
 800ec50:	2a00      	cmp	r2, #0
 800ec52:	d1f0      	bne.n	800ec36 <quorem+0xea>
 800ec54:	3c01      	subs	r4, #1
 800ec56:	e7eb      	b.n	800ec30 <quorem+0xe4>
 800ec58:	2000      	movs	r0, #0
 800ec5a:	e7ee      	b.n	800ec3a <quorem+0xee>
 800ec5c:	0000      	movs	r0, r0
	...

0800ec60 <_dtoa_r>:
 800ec60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec64:	ed2d 8b04 	vpush	{d8-d9}
 800ec68:	69c5      	ldr	r5, [r0, #28]
 800ec6a:	b093      	sub	sp, #76	; 0x4c
 800ec6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ec70:	ec57 6b10 	vmov	r6, r7, d0
 800ec74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ec78:	9107      	str	r1, [sp, #28]
 800ec7a:	4604      	mov	r4, r0
 800ec7c:	920a      	str	r2, [sp, #40]	; 0x28
 800ec7e:	930d      	str	r3, [sp, #52]	; 0x34
 800ec80:	b975      	cbnz	r5, 800eca0 <_dtoa_r+0x40>
 800ec82:	2010      	movs	r0, #16
 800ec84:	f7fe f82c 	bl	800cce0 <malloc>
 800ec88:	4602      	mov	r2, r0
 800ec8a:	61e0      	str	r0, [r4, #28]
 800ec8c:	b920      	cbnz	r0, 800ec98 <_dtoa_r+0x38>
 800ec8e:	4bae      	ldr	r3, [pc, #696]	; (800ef48 <_dtoa_r+0x2e8>)
 800ec90:	21ef      	movs	r1, #239	; 0xef
 800ec92:	48ae      	ldr	r0, [pc, #696]	; (800ef4c <_dtoa_r+0x2ec>)
 800ec94:	f002 f8ec 	bl	8010e70 <__assert_func>
 800ec98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ec9c:	6005      	str	r5, [r0, #0]
 800ec9e:	60c5      	str	r5, [r0, #12]
 800eca0:	69e3      	ldr	r3, [r4, #28]
 800eca2:	6819      	ldr	r1, [r3, #0]
 800eca4:	b151      	cbz	r1, 800ecbc <_dtoa_r+0x5c>
 800eca6:	685a      	ldr	r2, [r3, #4]
 800eca8:	604a      	str	r2, [r1, #4]
 800ecaa:	2301      	movs	r3, #1
 800ecac:	4093      	lsls	r3, r2
 800ecae:	608b      	str	r3, [r1, #8]
 800ecb0:	4620      	mov	r0, r4
 800ecb2:	f001 f9bd 	bl	8010030 <_Bfree>
 800ecb6:	69e3      	ldr	r3, [r4, #28]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	601a      	str	r2, [r3, #0]
 800ecbc:	1e3b      	subs	r3, r7, #0
 800ecbe:	bfbb      	ittet	lt
 800ecc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ecc4:	9303      	strlt	r3, [sp, #12]
 800ecc6:	2300      	movge	r3, #0
 800ecc8:	2201      	movlt	r2, #1
 800ecca:	bfac      	ite	ge
 800eccc:	f8c8 3000 	strge.w	r3, [r8]
 800ecd0:	f8c8 2000 	strlt.w	r2, [r8]
 800ecd4:	4b9e      	ldr	r3, [pc, #632]	; (800ef50 <_dtoa_r+0x2f0>)
 800ecd6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ecda:	ea33 0308 	bics.w	r3, r3, r8
 800ecde:	d11b      	bne.n	800ed18 <_dtoa_r+0xb8>
 800ece0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ece2:	f242 730f 	movw	r3, #9999	; 0x270f
 800ece6:	6013      	str	r3, [r2, #0]
 800ece8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ecec:	4333      	orrs	r3, r6
 800ecee:	f000 8593 	beq.w	800f818 <_dtoa_r+0xbb8>
 800ecf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ecf4:	b963      	cbnz	r3, 800ed10 <_dtoa_r+0xb0>
 800ecf6:	4b97      	ldr	r3, [pc, #604]	; (800ef54 <_dtoa_r+0x2f4>)
 800ecf8:	e027      	b.n	800ed4a <_dtoa_r+0xea>
 800ecfa:	4b97      	ldr	r3, [pc, #604]	; (800ef58 <_dtoa_r+0x2f8>)
 800ecfc:	9300      	str	r3, [sp, #0]
 800ecfe:	3308      	adds	r3, #8
 800ed00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ed02:	6013      	str	r3, [r2, #0]
 800ed04:	9800      	ldr	r0, [sp, #0]
 800ed06:	b013      	add	sp, #76	; 0x4c
 800ed08:	ecbd 8b04 	vpop	{d8-d9}
 800ed0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed10:	4b90      	ldr	r3, [pc, #576]	; (800ef54 <_dtoa_r+0x2f4>)
 800ed12:	9300      	str	r3, [sp, #0]
 800ed14:	3303      	adds	r3, #3
 800ed16:	e7f3      	b.n	800ed00 <_dtoa_r+0xa0>
 800ed18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	ec51 0b17 	vmov	r0, r1, d7
 800ed22:	eeb0 8a47 	vmov.f32	s16, s14
 800ed26:	eef0 8a67 	vmov.f32	s17, s15
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	f7f1 fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed30:	4681      	mov	r9, r0
 800ed32:	b160      	cbz	r0, 800ed4e <_dtoa_r+0xee>
 800ed34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed36:	2301      	movs	r3, #1
 800ed38:	6013      	str	r3, [r2, #0]
 800ed3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f000 8568 	beq.w	800f812 <_dtoa_r+0xbb2>
 800ed42:	4b86      	ldr	r3, [pc, #536]	; (800ef5c <_dtoa_r+0x2fc>)
 800ed44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ed46:	6013      	str	r3, [r2, #0]
 800ed48:	3b01      	subs	r3, #1
 800ed4a:	9300      	str	r3, [sp, #0]
 800ed4c:	e7da      	b.n	800ed04 <_dtoa_r+0xa4>
 800ed4e:	aa10      	add	r2, sp, #64	; 0x40
 800ed50:	a911      	add	r1, sp, #68	; 0x44
 800ed52:	4620      	mov	r0, r4
 800ed54:	eeb0 0a48 	vmov.f32	s0, s16
 800ed58:	eef0 0a68 	vmov.f32	s1, s17
 800ed5c:	f001 fd04 	bl	8010768 <__d2b>
 800ed60:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ed64:	4682      	mov	sl, r0
 800ed66:	2d00      	cmp	r5, #0
 800ed68:	d07f      	beq.n	800ee6a <_dtoa_r+0x20a>
 800ed6a:	ee18 3a90 	vmov	r3, s17
 800ed6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ed72:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ed76:	ec51 0b18 	vmov	r0, r1, d8
 800ed7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ed7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ed82:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ed86:	4619      	mov	r1, r3
 800ed88:	2200      	movs	r2, #0
 800ed8a:	4b75      	ldr	r3, [pc, #468]	; (800ef60 <_dtoa_r+0x300>)
 800ed8c:	f7f1 fa7c 	bl	8000288 <__aeabi_dsub>
 800ed90:	a367      	add	r3, pc, #412	; (adr r3, 800ef30 <_dtoa_r+0x2d0>)
 800ed92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed96:	f7f1 fc2f 	bl	80005f8 <__aeabi_dmul>
 800ed9a:	a367      	add	r3, pc, #412	; (adr r3, 800ef38 <_dtoa_r+0x2d8>)
 800ed9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda0:	f7f1 fa74 	bl	800028c <__adddf3>
 800eda4:	4606      	mov	r6, r0
 800eda6:	4628      	mov	r0, r5
 800eda8:	460f      	mov	r7, r1
 800edaa:	f7f1 fbbb 	bl	8000524 <__aeabi_i2d>
 800edae:	a364      	add	r3, pc, #400	; (adr r3, 800ef40 <_dtoa_r+0x2e0>)
 800edb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb4:	f7f1 fc20 	bl	80005f8 <__aeabi_dmul>
 800edb8:	4602      	mov	r2, r0
 800edba:	460b      	mov	r3, r1
 800edbc:	4630      	mov	r0, r6
 800edbe:	4639      	mov	r1, r7
 800edc0:	f7f1 fa64 	bl	800028c <__adddf3>
 800edc4:	4606      	mov	r6, r0
 800edc6:	460f      	mov	r7, r1
 800edc8:	f7f1 fec6 	bl	8000b58 <__aeabi_d2iz>
 800edcc:	2200      	movs	r2, #0
 800edce:	4683      	mov	fp, r0
 800edd0:	2300      	movs	r3, #0
 800edd2:	4630      	mov	r0, r6
 800edd4:	4639      	mov	r1, r7
 800edd6:	f7f1 fe81 	bl	8000adc <__aeabi_dcmplt>
 800edda:	b148      	cbz	r0, 800edf0 <_dtoa_r+0x190>
 800eddc:	4658      	mov	r0, fp
 800edde:	f7f1 fba1 	bl	8000524 <__aeabi_i2d>
 800ede2:	4632      	mov	r2, r6
 800ede4:	463b      	mov	r3, r7
 800ede6:	f7f1 fe6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800edea:	b908      	cbnz	r0, 800edf0 <_dtoa_r+0x190>
 800edec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800edf0:	f1bb 0f16 	cmp.w	fp, #22
 800edf4:	d857      	bhi.n	800eea6 <_dtoa_r+0x246>
 800edf6:	4b5b      	ldr	r3, [pc, #364]	; (800ef64 <_dtoa_r+0x304>)
 800edf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800edfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee00:	ec51 0b18 	vmov	r0, r1, d8
 800ee04:	f7f1 fe6a 	bl	8000adc <__aeabi_dcmplt>
 800ee08:	2800      	cmp	r0, #0
 800ee0a:	d04e      	beq.n	800eeaa <_dtoa_r+0x24a>
 800ee0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ee10:	2300      	movs	r3, #0
 800ee12:	930c      	str	r3, [sp, #48]	; 0x30
 800ee14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee16:	1b5b      	subs	r3, r3, r5
 800ee18:	1e5a      	subs	r2, r3, #1
 800ee1a:	bf45      	ittet	mi
 800ee1c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ee20:	9305      	strmi	r3, [sp, #20]
 800ee22:	2300      	movpl	r3, #0
 800ee24:	2300      	movmi	r3, #0
 800ee26:	9206      	str	r2, [sp, #24]
 800ee28:	bf54      	ite	pl
 800ee2a:	9305      	strpl	r3, [sp, #20]
 800ee2c:	9306      	strmi	r3, [sp, #24]
 800ee2e:	f1bb 0f00 	cmp.w	fp, #0
 800ee32:	db3c      	blt.n	800eeae <_dtoa_r+0x24e>
 800ee34:	9b06      	ldr	r3, [sp, #24]
 800ee36:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ee3a:	445b      	add	r3, fp
 800ee3c:	9306      	str	r3, [sp, #24]
 800ee3e:	2300      	movs	r3, #0
 800ee40:	9308      	str	r3, [sp, #32]
 800ee42:	9b07      	ldr	r3, [sp, #28]
 800ee44:	2b09      	cmp	r3, #9
 800ee46:	d868      	bhi.n	800ef1a <_dtoa_r+0x2ba>
 800ee48:	2b05      	cmp	r3, #5
 800ee4a:	bfc4      	itt	gt
 800ee4c:	3b04      	subgt	r3, #4
 800ee4e:	9307      	strgt	r3, [sp, #28]
 800ee50:	9b07      	ldr	r3, [sp, #28]
 800ee52:	f1a3 0302 	sub.w	r3, r3, #2
 800ee56:	bfcc      	ite	gt
 800ee58:	2500      	movgt	r5, #0
 800ee5a:	2501      	movle	r5, #1
 800ee5c:	2b03      	cmp	r3, #3
 800ee5e:	f200 8085 	bhi.w	800ef6c <_dtoa_r+0x30c>
 800ee62:	e8df f003 	tbb	[pc, r3]
 800ee66:	3b2e      	.short	0x3b2e
 800ee68:	5839      	.short	0x5839
 800ee6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ee6e:	441d      	add	r5, r3
 800ee70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ee74:	2b20      	cmp	r3, #32
 800ee76:	bfc1      	itttt	gt
 800ee78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ee7c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ee80:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ee84:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ee88:	bfd6      	itet	le
 800ee8a:	f1c3 0320 	rsble	r3, r3, #32
 800ee8e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ee92:	fa06 f003 	lslle.w	r0, r6, r3
 800ee96:	f7f1 fb35 	bl	8000504 <__aeabi_ui2d>
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800eea0:	3d01      	subs	r5, #1
 800eea2:	920e      	str	r2, [sp, #56]	; 0x38
 800eea4:	e76f      	b.n	800ed86 <_dtoa_r+0x126>
 800eea6:	2301      	movs	r3, #1
 800eea8:	e7b3      	b.n	800ee12 <_dtoa_r+0x1b2>
 800eeaa:	900c      	str	r0, [sp, #48]	; 0x30
 800eeac:	e7b2      	b.n	800ee14 <_dtoa_r+0x1b4>
 800eeae:	9b05      	ldr	r3, [sp, #20]
 800eeb0:	eba3 030b 	sub.w	r3, r3, fp
 800eeb4:	9305      	str	r3, [sp, #20]
 800eeb6:	f1cb 0300 	rsb	r3, fp, #0
 800eeba:	9308      	str	r3, [sp, #32]
 800eebc:	2300      	movs	r3, #0
 800eebe:	930b      	str	r3, [sp, #44]	; 0x2c
 800eec0:	e7bf      	b.n	800ee42 <_dtoa_r+0x1e2>
 800eec2:	2300      	movs	r3, #0
 800eec4:	9309      	str	r3, [sp, #36]	; 0x24
 800eec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	dc52      	bgt.n	800ef72 <_dtoa_r+0x312>
 800eecc:	2301      	movs	r3, #1
 800eece:	9301      	str	r3, [sp, #4]
 800eed0:	9304      	str	r3, [sp, #16]
 800eed2:	461a      	mov	r2, r3
 800eed4:	920a      	str	r2, [sp, #40]	; 0x28
 800eed6:	e00b      	b.n	800eef0 <_dtoa_r+0x290>
 800eed8:	2301      	movs	r3, #1
 800eeda:	e7f3      	b.n	800eec4 <_dtoa_r+0x264>
 800eedc:	2300      	movs	r3, #0
 800eede:	9309      	str	r3, [sp, #36]	; 0x24
 800eee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eee2:	445b      	add	r3, fp
 800eee4:	9301      	str	r3, [sp, #4]
 800eee6:	3301      	adds	r3, #1
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	9304      	str	r3, [sp, #16]
 800eeec:	bfb8      	it	lt
 800eeee:	2301      	movlt	r3, #1
 800eef0:	69e0      	ldr	r0, [r4, #28]
 800eef2:	2100      	movs	r1, #0
 800eef4:	2204      	movs	r2, #4
 800eef6:	f102 0614 	add.w	r6, r2, #20
 800eefa:	429e      	cmp	r6, r3
 800eefc:	d93d      	bls.n	800ef7a <_dtoa_r+0x31a>
 800eefe:	6041      	str	r1, [r0, #4]
 800ef00:	4620      	mov	r0, r4
 800ef02:	f001 f855 	bl	800ffb0 <_Balloc>
 800ef06:	9000      	str	r0, [sp, #0]
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	d139      	bne.n	800ef80 <_dtoa_r+0x320>
 800ef0c:	4b16      	ldr	r3, [pc, #88]	; (800ef68 <_dtoa_r+0x308>)
 800ef0e:	4602      	mov	r2, r0
 800ef10:	f240 11af 	movw	r1, #431	; 0x1af
 800ef14:	e6bd      	b.n	800ec92 <_dtoa_r+0x32>
 800ef16:	2301      	movs	r3, #1
 800ef18:	e7e1      	b.n	800eede <_dtoa_r+0x27e>
 800ef1a:	2501      	movs	r5, #1
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	9307      	str	r3, [sp, #28]
 800ef20:	9509      	str	r5, [sp, #36]	; 0x24
 800ef22:	f04f 33ff 	mov.w	r3, #4294967295
 800ef26:	9301      	str	r3, [sp, #4]
 800ef28:	9304      	str	r3, [sp, #16]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	2312      	movs	r3, #18
 800ef2e:	e7d1      	b.n	800eed4 <_dtoa_r+0x274>
 800ef30:	636f4361 	.word	0x636f4361
 800ef34:	3fd287a7 	.word	0x3fd287a7
 800ef38:	8b60c8b3 	.word	0x8b60c8b3
 800ef3c:	3fc68a28 	.word	0x3fc68a28
 800ef40:	509f79fb 	.word	0x509f79fb
 800ef44:	3fd34413 	.word	0x3fd34413
 800ef48:	08013c8e 	.word	0x08013c8e
 800ef4c:	08013ca5 	.word	0x08013ca5
 800ef50:	7ff00000 	.word	0x7ff00000
 800ef54:	08013c8a 	.word	0x08013c8a
 800ef58:	08013c81 	.word	0x08013c81
 800ef5c:	08013c51 	.word	0x08013c51
 800ef60:	3ff80000 	.word	0x3ff80000
 800ef64:	08013df0 	.word	0x08013df0
 800ef68:	08013cfd 	.word	0x08013cfd
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ef70:	e7d7      	b.n	800ef22 <_dtoa_r+0x2c2>
 800ef72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef74:	9301      	str	r3, [sp, #4]
 800ef76:	9304      	str	r3, [sp, #16]
 800ef78:	e7ba      	b.n	800eef0 <_dtoa_r+0x290>
 800ef7a:	3101      	adds	r1, #1
 800ef7c:	0052      	lsls	r2, r2, #1
 800ef7e:	e7ba      	b.n	800eef6 <_dtoa_r+0x296>
 800ef80:	69e3      	ldr	r3, [r4, #28]
 800ef82:	9a00      	ldr	r2, [sp, #0]
 800ef84:	601a      	str	r2, [r3, #0]
 800ef86:	9b04      	ldr	r3, [sp, #16]
 800ef88:	2b0e      	cmp	r3, #14
 800ef8a:	f200 80a8 	bhi.w	800f0de <_dtoa_r+0x47e>
 800ef8e:	2d00      	cmp	r5, #0
 800ef90:	f000 80a5 	beq.w	800f0de <_dtoa_r+0x47e>
 800ef94:	f1bb 0f00 	cmp.w	fp, #0
 800ef98:	dd38      	ble.n	800f00c <_dtoa_r+0x3ac>
 800ef9a:	4bc0      	ldr	r3, [pc, #768]	; (800f29c <_dtoa_r+0x63c>)
 800ef9c:	f00b 020f 	and.w	r2, fp, #15
 800efa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800efa4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800efa8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800efac:	ea4f 182b 	mov.w	r8, fp, asr #4
 800efb0:	d019      	beq.n	800efe6 <_dtoa_r+0x386>
 800efb2:	4bbb      	ldr	r3, [pc, #748]	; (800f2a0 <_dtoa_r+0x640>)
 800efb4:	ec51 0b18 	vmov	r0, r1, d8
 800efb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800efbc:	f7f1 fc46 	bl	800084c <__aeabi_ddiv>
 800efc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efc4:	f008 080f 	and.w	r8, r8, #15
 800efc8:	2503      	movs	r5, #3
 800efca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f2a0 <_dtoa_r+0x640>
 800efce:	f1b8 0f00 	cmp.w	r8, #0
 800efd2:	d10a      	bne.n	800efea <_dtoa_r+0x38a>
 800efd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efd8:	4632      	mov	r2, r6
 800efda:	463b      	mov	r3, r7
 800efdc:	f7f1 fc36 	bl	800084c <__aeabi_ddiv>
 800efe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efe4:	e02b      	b.n	800f03e <_dtoa_r+0x3de>
 800efe6:	2502      	movs	r5, #2
 800efe8:	e7ef      	b.n	800efca <_dtoa_r+0x36a>
 800efea:	f018 0f01 	tst.w	r8, #1
 800efee:	d008      	beq.n	800f002 <_dtoa_r+0x3a2>
 800eff0:	4630      	mov	r0, r6
 800eff2:	4639      	mov	r1, r7
 800eff4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800eff8:	f7f1 fafe 	bl	80005f8 <__aeabi_dmul>
 800effc:	3501      	adds	r5, #1
 800effe:	4606      	mov	r6, r0
 800f000:	460f      	mov	r7, r1
 800f002:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f006:	f109 0908 	add.w	r9, r9, #8
 800f00a:	e7e0      	b.n	800efce <_dtoa_r+0x36e>
 800f00c:	f000 809f 	beq.w	800f14e <_dtoa_r+0x4ee>
 800f010:	f1cb 0600 	rsb	r6, fp, #0
 800f014:	4ba1      	ldr	r3, [pc, #644]	; (800f29c <_dtoa_r+0x63c>)
 800f016:	4fa2      	ldr	r7, [pc, #648]	; (800f2a0 <_dtoa_r+0x640>)
 800f018:	f006 020f 	and.w	r2, r6, #15
 800f01c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f024:	ec51 0b18 	vmov	r0, r1, d8
 800f028:	f7f1 fae6 	bl	80005f8 <__aeabi_dmul>
 800f02c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f030:	1136      	asrs	r6, r6, #4
 800f032:	2300      	movs	r3, #0
 800f034:	2502      	movs	r5, #2
 800f036:	2e00      	cmp	r6, #0
 800f038:	d17e      	bne.n	800f138 <_dtoa_r+0x4d8>
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d1d0      	bne.n	800efe0 <_dtoa_r+0x380>
 800f03e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f040:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f044:	2b00      	cmp	r3, #0
 800f046:	f000 8084 	beq.w	800f152 <_dtoa_r+0x4f2>
 800f04a:	4b96      	ldr	r3, [pc, #600]	; (800f2a4 <_dtoa_r+0x644>)
 800f04c:	2200      	movs	r2, #0
 800f04e:	4640      	mov	r0, r8
 800f050:	4649      	mov	r1, r9
 800f052:	f7f1 fd43 	bl	8000adc <__aeabi_dcmplt>
 800f056:	2800      	cmp	r0, #0
 800f058:	d07b      	beq.n	800f152 <_dtoa_r+0x4f2>
 800f05a:	9b04      	ldr	r3, [sp, #16]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d078      	beq.n	800f152 <_dtoa_r+0x4f2>
 800f060:	9b01      	ldr	r3, [sp, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	dd39      	ble.n	800f0da <_dtoa_r+0x47a>
 800f066:	4b90      	ldr	r3, [pc, #576]	; (800f2a8 <_dtoa_r+0x648>)
 800f068:	2200      	movs	r2, #0
 800f06a:	4640      	mov	r0, r8
 800f06c:	4649      	mov	r1, r9
 800f06e:	f7f1 fac3 	bl	80005f8 <__aeabi_dmul>
 800f072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f076:	9e01      	ldr	r6, [sp, #4]
 800f078:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f07c:	3501      	adds	r5, #1
 800f07e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f082:	4628      	mov	r0, r5
 800f084:	f7f1 fa4e 	bl	8000524 <__aeabi_i2d>
 800f088:	4642      	mov	r2, r8
 800f08a:	464b      	mov	r3, r9
 800f08c:	f7f1 fab4 	bl	80005f8 <__aeabi_dmul>
 800f090:	4b86      	ldr	r3, [pc, #536]	; (800f2ac <_dtoa_r+0x64c>)
 800f092:	2200      	movs	r2, #0
 800f094:	f7f1 f8fa 	bl	800028c <__adddf3>
 800f098:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f09c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0a0:	9303      	str	r3, [sp, #12]
 800f0a2:	2e00      	cmp	r6, #0
 800f0a4:	d158      	bne.n	800f158 <_dtoa_r+0x4f8>
 800f0a6:	4b82      	ldr	r3, [pc, #520]	; (800f2b0 <_dtoa_r+0x650>)
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	4640      	mov	r0, r8
 800f0ac:	4649      	mov	r1, r9
 800f0ae:	f7f1 f8eb 	bl	8000288 <__aeabi_dsub>
 800f0b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f0b6:	4680      	mov	r8, r0
 800f0b8:	4689      	mov	r9, r1
 800f0ba:	f7f1 fd2d 	bl	8000b18 <__aeabi_dcmpgt>
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	f040 8296 	bne.w	800f5f0 <_dtoa_r+0x990>
 800f0c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f0c8:	4640      	mov	r0, r8
 800f0ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0ce:	4649      	mov	r1, r9
 800f0d0:	f7f1 fd04 	bl	8000adc <__aeabi_dcmplt>
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	f040 8289 	bne.w	800f5ec <_dtoa_r+0x98c>
 800f0da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f0de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	f2c0 814e 	blt.w	800f382 <_dtoa_r+0x722>
 800f0e6:	f1bb 0f0e 	cmp.w	fp, #14
 800f0ea:	f300 814a 	bgt.w	800f382 <_dtoa_r+0x722>
 800f0ee:	4b6b      	ldr	r3, [pc, #428]	; (800f29c <_dtoa_r+0x63c>)
 800f0f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f0f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f0f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	f280 80dc 	bge.w	800f2b8 <_dtoa_r+0x658>
 800f100:	9b04      	ldr	r3, [sp, #16]
 800f102:	2b00      	cmp	r3, #0
 800f104:	f300 80d8 	bgt.w	800f2b8 <_dtoa_r+0x658>
 800f108:	f040 826f 	bne.w	800f5ea <_dtoa_r+0x98a>
 800f10c:	4b68      	ldr	r3, [pc, #416]	; (800f2b0 <_dtoa_r+0x650>)
 800f10e:	2200      	movs	r2, #0
 800f110:	4640      	mov	r0, r8
 800f112:	4649      	mov	r1, r9
 800f114:	f7f1 fa70 	bl	80005f8 <__aeabi_dmul>
 800f118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f11c:	f7f1 fcf2 	bl	8000b04 <__aeabi_dcmpge>
 800f120:	9e04      	ldr	r6, [sp, #16]
 800f122:	4637      	mov	r7, r6
 800f124:	2800      	cmp	r0, #0
 800f126:	f040 8245 	bne.w	800f5b4 <_dtoa_r+0x954>
 800f12a:	9d00      	ldr	r5, [sp, #0]
 800f12c:	2331      	movs	r3, #49	; 0x31
 800f12e:	f805 3b01 	strb.w	r3, [r5], #1
 800f132:	f10b 0b01 	add.w	fp, fp, #1
 800f136:	e241      	b.n	800f5bc <_dtoa_r+0x95c>
 800f138:	07f2      	lsls	r2, r6, #31
 800f13a:	d505      	bpl.n	800f148 <_dtoa_r+0x4e8>
 800f13c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f140:	f7f1 fa5a 	bl	80005f8 <__aeabi_dmul>
 800f144:	3501      	adds	r5, #1
 800f146:	2301      	movs	r3, #1
 800f148:	1076      	asrs	r6, r6, #1
 800f14a:	3708      	adds	r7, #8
 800f14c:	e773      	b.n	800f036 <_dtoa_r+0x3d6>
 800f14e:	2502      	movs	r5, #2
 800f150:	e775      	b.n	800f03e <_dtoa_r+0x3de>
 800f152:	9e04      	ldr	r6, [sp, #16]
 800f154:	465f      	mov	r7, fp
 800f156:	e792      	b.n	800f07e <_dtoa_r+0x41e>
 800f158:	9900      	ldr	r1, [sp, #0]
 800f15a:	4b50      	ldr	r3, [pc, #320]	; (800f29c <_dtoa_r+0x63c>)
 800f15c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f160:	4431      	add	r1, r6
 800f162:	9102      	str	r1, [sp, #8]
 800f164:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f166:	eeb0 9a47 	vmov.f32	s18, s14
 800f16a:	eef0 9a67 	vmov.f32	s19, s15
 800f16e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f172:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f176:	2900      	cmp	r1, #0
 800f178:	d044      	beq.n	800f204 <_dtoa_r+0x5a4>
 800f17a:	494e      	ldr	r1, [pc, #312]	; (800f2b4 <_dtoa_r+0x654>)
 800f17c:	2000      	movs	r0, #0
 800f17e:	f7f1 fb65 	bl	800084c <__aeabi_ddiv>
 800f182:	ec53 2b19 	vmov	r2, r3, d9
 800f186:	f7f1 f87f 	bl	8000288 <__aeabi_dsub>
 800f18a:	9d00      	ldr	r5, [sp, #0]
 800f18c:	ec41 0b19 	vmov	d9, r0, r1
 800f190:	4649      	mov	r1, r9
 800f192:	4640      	mov	r0, r8
 800f194:	f7f1 fce0 	bl	8000b58 <__aeabi_d2iz>
 800f198:	4606      	mov	r6, r0
 800f19a:	f7f1 f9c3 	bl	8000524 <__aeabi_i2d>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	460b      	mov	r3, r1
 800f1a2:	4640      	mov	r0, r8
 800f1a4:	4649      	mov	r1, r9
 800f1a6:	f7f1 f86f 	bl	8000288 <__aeabi_dsub>
 800f1aa:	3630      	adds	r6, #48	; 0x30
 800f1ac:	f805 6b01 	strb.w	r6, [r5], #1
 800f1b0:	ec53 2b19 	vmov	r2, r3, d9
 800f1b4:	4680      	mov	r8, r0
 800f1b6:	4689      	mov	r9, r1
 800f1b8:	f7f1 fc90 	bl	8000adc <__aeabi_dcmplt>
 800f1bc:	2800      	cmp	r0, #0
 800f1be:	d164      	bne.n	800f28a <_dtoa_r+0x62a>
 800f1c0:	4642      	mov	r2, r8
 800f1c2:	464b      	mov	r3, r9
 800f1c4:	4937      	ldr	r1, [pc, #220]	; (800f2a4 <_dtoa_r+0x644>)
 800f1c6:	2000      	movs	r0, #0
 800f1c8:	f7f1 f85e 	bl	8000288 <__aeabi_dsub>
 800f1cc:	ec53 2b19 	vmov	r2, r3, d9
 800f1d0:	f7f1 fc84 	bl	8000adc <__aeabi_dcmplt>
 800f1d4:	2800      	cmp	r0, #0
 800f1d6:	f040 80b6 	bne.w	800f346 <_dtoa_r+0x6e6>
 800f1da:	9b02      	ldr	r3, [sp, #8]
 800f1dc:	429d      	cmp	r5, r3
 800f1de:	f43f af7c 	beq.w	800f0da <_dtoa_r+0x47a>
 800f1e2:	4b31      	ldr	r3, [pc, #196]	; (800f2a8 <_dtoa_r+0x648>)
 800f1e4:	ec51 0b19 	vmov	r0, r1, d9
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	f7f1 fa05 	bl	80005f8 <__aeabi_dmul>
 800f1ee:	4b2e      	ldr	r3, [pc, #184]	; (800f2a8 <_dtoa_r+0x648>)
 800f1f0:	ec41 0b19 	vmov	d9, r0, r1
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	4640      	mov	r0, r8
 800f1f8:	4649      	mov	r1, r9
 800f1fa:	f7f1 f9fd 	bl	80005f8 <__aeabi_dmul>
 800f1fe:	4680      	mov	r8, r0
 800f200:	4689      	mov	r9, r1
 800f202:	e7c5      	b.n	800f190 <_dtoa_r+0x530>
 800f204:	ec51 0b17 	vmov	r0, r1, d7
 800f208:	f7f1 f9f6 	bl	80005f8 <__aeabi_dmul>
 800f20c:	9b02      	ldr	r3, [sp, #8]
 800f20e:	9d00      	ldr	r5, [sp, #0]
 800f210:	930f      	str	r3, [sp, #60]	; 0x3c
 800f212:	ec41 0b19 	vmov	d9, r0, r1
 800f216:	4649      	mov	r1, r9
 800f218:	4640      	mov	r0, r8
 800f21a:	f7f1 fc9d 	bl	8000b58 <__aeabi_d2iz>
 800f21e:	4606      	mov	r6, r0
 800f220:	f7f1 f980 	bl	8000524 <__aeabi_i2d>
 800f224:	3630      	adds	r6, #48	; 0x30
 800f226:	4602      	mov	r2, r0
 800f228:	460b      	mov	r3, r1
 800f22a:	4640      	mov	r0, r8
 800f22c:	4649      	mov	r1, r9
 800f22e:	f7f1 f82b 	bl	8000288 <__aeabi_dsub>
 800f232:	f805 6b01 	strb.w	r6, [r5], #1
 800f236:	9b02      	ldr	r3, [sp, #8]
 800f238:	429d      	cmp	r5, r3
 800f23a:	4680      	mov	r8, r0
 800f23c:	4689      	mov	r9, r1
 800f23e:	f04f 0200 	mov.w	r2, #0
 800f242:	d124      	bne.n	800f28e <_dtoa_r+0x62e>
 800f244:	4b1b      	ldr	r3, [pc, #108]	; (800f2b4 <_dtoa_r+0x654>)
 800f246:	ec51 0b19 	vmov	r0, r1, d9
 800f24a:	f7f1 f81f 	bl	800028c <__adddf3>
 800f24e:	4602      	mov	r2, r0
 800f250:	460b      	mov	r3, r1
 800f252:	4640      	mov	r0, r8
 800f254:	4649      	mov	r1, r9
 800f256:	f7f1 fc5f 	bl	8000b18 <__aeabi_dcmpgt>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	d173      	bne.n	800f346 <_dtoa_r+0x6e6>
 800f25e:	ec53 2b19 	vmov	r2, r3, d9
 800f262:	4914      	ldr	r1, [pc, #80]	; (800f2b4 <_dtoa_r+0x654>)
 800f264:	2000      	movs	r0, #0
 800f266:	f7f1 f80f 	bl	8000288 <__aeabi_dsub>
 800f26a:	4602      	mov	r2, r0
 800f26c:	460b      	mov	r3, r1
 800f26e:	4640      	mov	r0, r8
 800f270:	4649      	mov	r1, r9
 800f272:	f7f1 fc33 	bl	8000adc <__aeabi_dcmplt>
 800f276:	2800      	cmp	r0, #0
 800f278:	f43f af2f 	beq.w	800f0da <_dtoa_r+0x47a>
 800f27c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f27e:	1e6b      	subs	r3, r5, #1
 800f280:	930f      	str	r3, [sp, #60]	; 0x3c
 800f282:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f286:	2b30      	cmp	r3, #48	; 0x30
 800f288:	d0f8      	beq.n	800f27c <_dtoa_r+0x61c>
 800f28a:	46bb      	mov	fp, r7
 800f28c:	e04a      	b.n	800f324 <_dtoa_r+0x6c4>
 800f28e:	4b06      	ldr	r3, [pc, #24]	; (800f2a8 <_dtoa_r+0x648>)
 800f290:	f7f1 f9b2 	bl	80005f8 <__aeabi_dmul>
 800f294:	4680      	mov	r8, r0
 800f296:	4689      	mov	r9, r1
 800f298:	e7bd      	b.n	800f216 <_dtoa_r+0x5b6>
 800f29a:	bf00      	nop
 800f29c:	08013df0 	.word	0x08013df0
 800f2a0:	08013dc8 	.word	0x08013dc8
 800f2a4:	3ff00000 	.word	0x3ff00000
 800f2a8:	40240000 	.word	0x40240000
 800f2ac:	401c0000 	.word	0x401c0000
 800f2b0:	40140000 	.word	0x40140000
 800f2b4:	3fe00000 	.word	0x3fe00000
 800f2b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f2bc:	9d00      	ldr	r5, [sp, #0]
 800f2be:	4642      	mov	r2, r8
 800f2c0:	464b      	mov	r3, r9
 800f2c2:	4630      	mov	r0, r6
 800f2c4:	4639      	mov	r1, r7
 800f2c6:	f7f1 fac1 	bl	800084c <__aeabi_ddiv>
 800f2ca:	f7f1 fc45 	bl	8000b58 <__aeabi_d2iz>
 800f2ce:	9001      	str	r0, [sp, #4]
 800f2d0:	f7f1 f928 	bl	8000524 <__aeabi_i2d>
 800f2d4:	4642      	mov	r2, r8
 800f2d6:	464b      	mov	r3, r9
 800f2d8:	f7f1 f98e 	bl	80005f8 <__aeabi_dmul>
 800f2dc:	4602      	mov	r2, r0
 800f2de:	460b      	mov	r3, r1
 800f2e0:	4630      	mov	r0, r6
 800f2e2:	4639      	mov	r1, r7
 800f2e4:	f7f0 ffd0 	bl	8000288 <__aeabi_dsub>
 800f2e8:	9e01      	ldr	r6, [sp, #4]
 800f2ea:	9f04      	ldr	r7, [sp, #16]
 800f2ec:	3630      	adds	r6, #48	; 0x30
 800f2ee:	f805 6b01 	strb.w	r6, [r5], #1
 800f2f2:	9e00      	ldr	r6, [sp, #0]
 800f2f4:	1bae      	subs	r6, r5, r6
 800f2f6:	42b7      	cmp	r7, r6
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	d134      	bne.n	800f368 <_dtoa_r+0x708>
 800f2fe:	f7f0 ffc5 	bl	800028c <__adddf3>
 800f302:	4642      	mov	r2, r8
 800f304:	464b      	mov	r3, r9
 800f306:	4606      	mov	r6, r0
 800f308:	460f      	mov	r7, r1
 800f30a:	f7f1 fc05 	bl	8000b18 <__aeabi_dcmpgt>
 800f30e:	b9c8      	cbnz	r0, 800f344 <_dtoa_r+0x6e4>
 800f310:	4642      	mov	r2, r8
 800f312:	464b      	mov	r3, r9
 800f314:	4630      	mov	r0, r6
 800f316:	4639      	mov	r1, r7
 800f318:	f7f1 fbd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800f31c:	b110      	cbz	r0, 800f324 <_dtoa_r+0x6c4>
 800f31e:	9b01      	ldr	r3, [sp, #4]
 800f320:	07db      	lsls	r3, r3, #31
 800f322:	d40f      	bmi.n	800f344 <_dtoa_r+0x6e4>
 800f324:	4651      	mov	r1, sl
 800f326:	4620      	mov	r0, r4
 800f328:	f000 fe82 	bl	8010030 <_Bfree>
 800f32c:	2300      	movs	r3, #0
 800f32e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f330:	702b      	strb	r3, [r5, #0]
 800f332:	f10b 0301 	add.w	r3, fp, #1
 800f336:	6013      	str	r3, [r2, #0]
 800f338:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	f43f ace2 	beq.w	800ed04 <_dtoa_r+0xa4>
 800f340:	601d      	str	r5, [r3, #0]
 800f342:	e4df      	b.n	800ed04 <_dtoa_r+0xa4>
 800f344:	465f      	mov	r7, fp
 800f346:	462b      	mov	r3, r5
 800f348:	461d      	mov	r5, r3
 800f34a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f34e:	2a39      	cmp	r2, #57	; 0x39
 800f350:	d106      	bne.n	800f360 <_dtoa_r+0x700>
 800f352:	9a00      	ldr	r2, [sp, #0]
 800f354:	429a      	cmp	r2, r3
 800f356:	d1f7      	bne.n	800f348 <_dtoa_r+0x6e8>
 800f358:	9900      	ldr	r1, [sp, #0]
 800f35a:	2230      	movs	r2, #48	; 0x30
 800f35c:	3701      	adds	r7, #1
 800f35e:	700a      	strb	r2, [r1, #0]
 800f360:	781a      	ldrb	r2, [r3, #0]
 800f362:	3201      	adds	r2, #1
 800f364:	701a      	strb	r2, [r3, #0]
 800f366:	e790      	b.n	800f28a <_dtoa_r+0x62a>
 800f368:	4ba3      	ldr	r3, [pc, #652]	; (800f5f8 <_dtoa_r+0x998>)
 800f36a:	2200      	movs	r2, #0
 800f36c:	f7f1 f944 	bl	80005f8 <__aeabi_dmul>
 800f370:	2200      	movs	r2, #0
 800f372:	2300      	movs	r3, #0
 800f374:	4606      	mov	r6, r0
 800f376:	460f      	mov	r7, r1
 800f378:	f7f1 fba6 	bl	8000ac8 <__aeabi_dcmpeq>
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d09e      	beq.n	800f2be <_dtoa_r+0x65e>
 800f380:	e7d0      	b.n	800f324 <_dtoa_r+0x6c4>
 800f382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f384:	2a00      	cmp	r2, #0
 800f386:	f000 80ca 	beq.w	800f51e <_dtoa_r+0x8be>
 800f38a:	9a07      	ldr	r2, [sp, #28]
 800f38c:	2a01      	cmp	r2, #1
 800f38e:	f300 80ad 	bgt.w	800f4ec <_dtoa_r+0x88c>
 800f392:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f394:	2a00      	cmp	r2, #0
 800f396:	f000 80a5 	beq.w	800f4e4 <_dtoa_r+0x884>
 800f39a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f39e:	9e08      	ldr	r6, [sp, #32]
 800f3a0:	9d05      	ldr	r5, [sp, #20]
 800f3a2:	9a05      	ldr	r2, [sp, #20]
 800f3a4:	441a      	add	r2, r3
 800f3a6:	9205      	str	r2, [sp, #20]
 800f3a8:	9a06      	ldr	r2, [sp, #24]
 800f3aa:	2101      	movs	r1, #1
 800f3ac:	441a      	add	r2, r3
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	9206      	str	r2, [sp, #24]
 800f3b2:	f000 ff3d 	bl	8010230 <__i2b>
 800f3b6:	4607      	mov	r7, r0
 800f3b8:	b165      	cbz	r5, 800f3d4 <_dtoa_r+0x774>
 800f3ba:	9b06      	ldr	r3, [sp, #24]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	dd09      	ble.n	800f3d4 <_dtoa_r+0x774>
 800f3c0:	42ab      	cmp	r3, r5
 800f3c2:	9a05      	ldr	r2, [sp, #20]
 800f3c4:	bfa8      	it	ge
 800f3c6:	462b      	movge	r3, r5
 800f3c8:	1ad2      	subs	r2, r2, r3
 800f3ca:	9205      	str	r2, [sp, #20]
 800f3cc:	9a06      	ldr	r2, [sp, #24]
 800f3ce:	1aed      	subs	r5, r5, r3
 800f3d0:	1ad3      	subs	r3, r2, r3
 800f3d2:	9306      	str	r3, [sp, #24]
 800f3d4:	9b08      	ldr	r3, [sp, #32]
 800f3d6:	b1f3      	cbz	r3, 800f416 <_dtoa_r+0x7b6>
 800f3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	f000 80a3 	beq.w	800f526 <_dtoa_r+0x8c6>
 800f3e0:	2e00      	cmp	r6, #0
 800f3e2:	dd10      	ble.n	800f406 <_dtoa_r+0x7a6>
 800f3e4:	4639      	mov	r1, r7
 800f3e6:	4632      	mov	r2, r6
 800f3e8:	4620      	mov	r0, r4
 800f3ea:	f000 ffe1 	bl	80103b0 <__pow5mult>
 800f3ee:	4652      	mov	r2, sl
 800f3f0:	4601      	mov	r1, r0
 800f3f2:	4607      	mov	r7, r0
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	f000 ff31 	bl	801025c <__multiply>
 800f3fa:	4651      	mov	r1, sl
 800f3fc:	4680      	mov	r8, r0
 800f3fe:	4620      	mov	r0, r4
 800f400:	f000 fe16 	bl	8010030 <_Bfree>
 800f404:	46c2      	mov	sl, r8
 800f406:	9b08      	ldr	r3, [sp, #32]
 800f408:	1b9a      	subs	r2, r3, r6
 800f40a:	d004      	beq.n	800f416 <_dtoa_r+0x7b6>
 800f40c:	4651      	mov	r1, sl
 800f40e:	4620      	mov	r0, r4
 800f410:	f000 ffce 	bl	80103b0 <__pow5mult>
 800f414:	4682      	mov	sl, r0
 800f416:	2101      	movs	r1, #1
 800f418:	4620      	mov	r0, r4
 800f41a:	f000 ff09 	bl	8010230 <__i2b>
 800f41e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f420:	2b00      	cmp	r3, #0
 800f422:	4606      	mov	r6, r0
 800f424:	f340 8081 	ble.w	800f52a <_dtoa_r+0x8ca>
 800f428:	461a      	mov	r2, r3
 800f42a:	4601      	mov	r1, r0
 800f42c:	4620      	mov	r0, r4
 800f42e:	f000 ffbf 	bl	80103b0 <__pow5mult>
 800f432:	9b07      	ldr	r3, [sp, #28]
 800f434:	2b01      	cmp	r3, #1
 800f436:	4606      	mov	r6, r0
 800f438:	dd7a      	ble.n	800f530 <_dtoa_r+0x8d0>
 800f43a:	f04f 0800 	mov.w	r8, #0
 800f43e:	6933      	ldr	r3, [r6, #16]
 800f440:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f444:	6918      	ldr	r0, [r3, #16]
 800f446:	f000 fea5 	bl	8010194 <__hi0bits>
 800f44a:	f1c0 0020 	rsb	r0, r0, #32
 800f44e:	9b06      	ldr	r3, [sp, #24]
 800f450:	4418      	add	r0, r3
 800f452:	f010 001f 	ands.w	r0, r0, #31
 800f456:	f000 8094 	beq.w	800f582 <_dtoa_r+0x922>
 800f45a:	f1c0 0320 	rsb	r3, r0, #32
 800f45e:	2b04      	cmp	r3, #4
 800f460:	f340 8085 	ble.w	800f56e <_dtoa_r+0x90e>
 800f464:	9b05      	ldr	r3, [sp, #20]
 800f466:	f1c0 001c 	rsb	r0, r0, #28
 800f46a:	4403      	add	r3, r0
 800f46c:	9305      	str	r3, [sp, #20]
 800f46e:	9b06      	ldr	r3, [sp, #24]
 800f470:	4403      	add	r3, r0
 800f472:	4405      	add	r5, r0
 800f474:	9306      	str	r3, [sp, #24]
 800f476:	9b05      	ldr	r3, [sp, #20]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	dd05      	ble.n	800f488 <_dtoa_r+0x828>
 800f47c:	4651      	mov	r1, sl
 800f47e:	461a      	mov	r2, r3
 800f480:	4620      	mov	r0, r4
 800f482:	f000 ffef 	bl	8010464 <__lshift>
 800f486:	4682      	mov	sl, r0
 800f488:	9b06      	ldr	r3, [sp, #24]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	dd05      	ble.n	800f49a <_dtoa_r+0x83a>
 800f48e:	4631      	mov	r1, r6
 800f490:	461a      	mov	r2, r3
 800f492:	4620      	mov	r0, r4
 800f494:	f000 ffe6 	bl	8010464 <__lshift>
 800f498:	4606      	mov	r6, r0
 800f49a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d072      	beq.n	800f586 <_dtoa_r+0x926>
 800f4a0:	4631      	mov	r1, r6
 800f4a2:	4650      	mov	r0, sl
 800f4a4:	f001 f84a 	bl	801053c <__mcmp>
 800f4a8:	2800      	cmp	r0, #0
 800f4aa:	da6c      	bge.n	800f586 <_dtoa_r+0x926>
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	4651      	mov	r1, sl
 800f4b0:	220a      	movs	r2, #10
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	f000 fdde 	bl	8010074 <__multadd>
 800f4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f4be:	4682      	mov	sl, r0
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	f000 81b0 	beq.w	800f826 <_dtoa_r+0xbc6>
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	4639      	mov	r1, r7
 800f4ca:	220a      	movs	r2, #10
 800f4cc:	4620      	mov	r0, r4
 800f4ce:	f000 fdd1 	bl	8010074 <__multadd>
 800f4d2:	9b01      	ldr	r3, [sp, #4]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	4607      	mov	r7, r0
 800f4d8:	f300 8096 	bgt.w	800f608 <_dtoa_r+0x9a8>
 800f4dc:	9b07      	ldr	r3, [sp, #28]
 800f4de:	2b02      	cmp	r3, #2
 800f4e0:	dc59      	bgt.n	800f596 <_dtoa_r+0x936>
 800f4e2:	e091      	b.n	800f608 <_dtoa_r+0x9a8>
 800f4e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f4e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f4ea:	e758      	b.n	800f39e <_dtoa_r+0x73e>
 800f4ec:	9b04      	ldr	r3, [sp, #16]
 800f4ee:	1e5e      	subs	r6, r3, #1
 800f4f0:	9b08      	ldr	r3, [sp, #32]
 800f4f2:	42b3      	cmp	r3, r6
 800f4f4:	bfbf      	itttt	lt
 800f4f6:	9b08      	ldrlt	r3, [sp, #32]
 800f4f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f4fa:	9608      	strlt	r6, [sp, #32]
 800f4fc:	1af3      	sublt	r3, r6, r3
 800f4fe:	bfb4      	ite	lt
 800f500:	18d2      	addlt	r2, r2, r3
 800f502:	1b9e      	subge	r6, r3, r6
 800f504:	9b04      	ldr	r3, [sp, #16]
 800f506:	bfbc      	itt	lt
 800f508:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f50a:	2600      	movlt	r6, #0
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	bfb7      	itett	lt
 800f510:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f514:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f518:	1a9d      	sublt	r5, r3, r2
 800f51a:	2300      	movlt	r3, #0
 800f51c:	e741      	b.n	800f3a2 <_dtoa_r+0x742>
 800f51e:	9e08      	ldr	r6, [sp, #32]
 800f520:	9d05      	ldr	r5, [sp, #20]
 800f522:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f524:	e748      	b.n	800f3b8 <_dtoa_r+0x758>
 800f526:	9a08      	ldr	r2, [sp, #32]
 800f528:	e770      	b.n	800f40c <_dtoa_r+0x7ac>
 800f52a:	9b07      	ldr	r3, [sp, #28]
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	dc19      	bgt.n	800f564 <_dtoa_r+0x904>
 800f530:	9b02      	ldr	r3, [sp, #8]
 800f532:	b9bb      	cbnz	r3, 800f564 <_dtoa_r+0x904>
 800f534:	9b03      	ldr	r3, [sp, #12]
 800f536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f53a:	b99b      	cbnz	r3, 800f564 <_dtoa_r+0x904>
 800f53c:	9b03      	ldr	r3, [sp, #12]
 800f53e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f542:	0d1b      	lsrs	r3, r3, #20
 800f544:	051b      	lsls	r3, r3, #20
 800f546:	b183      	cbz	r3, 800f56a <_dtoa_r+0x90a>
 800f548:	9b05      	ldr	r3, [sp, #20]
 800f54a:	3301      	adds	r3, #1
 800f54c:	9305      	str	r3, [sp, #20]
 800f54e:	9b06      	ldr	r3, [sp, #24]
 800f550:	3301      	adds	r3, #1
 800f552:	9306      	str	r3, [sp, #24]
 800f554:	f04f 0801 	mov.w	r8, #1
 800f558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	f47f af6f 	bne.w	800f43e <_dtoa_r+0x7de>
 800f560:	2001      	movs	r0, #1
 800f562:	e774      	b.n	800f44e <_dtoa_r+0x7ee>
 800f564:	f04f 0800 	mov.w	r8, #0
 800f568:	e7f6      	b.n	800f558 <_dtoa_r+0x8f8>
 800f56a:	4698      	mov	r8, r3
 800f56c:	e7f4      	b.n	800f558 <_dtoa_r+0x8f8>
 800f56e:	d082      	beq.n	800f476 <_dtoa_r+0x816>
 800f570:	9a05      	ldr	r2, [sp, #20]
 800f572:	331c      	adds	r3, #28
 800f574:	441a      	add	r2, r3
 800f576:	9205      	str	r2, [sp, #20]
 800f578:	9a06      	ldr	r2, [sp, #24]
 800f57a:	441a      	add	r2, r3
 800f57c:	441d      	add	r5, r3
 800f57e:	9206      	str	r2, [sp, #24]
 800f580:	e779      	b.n	800f476 <_dtoa_r+0x816>
 800f582:	4603      	mov	r3, r0
 800f584:	e7f4      	b.n	800f570 <_dtoa_r+0x910>
 800f586:	9b04      	ldr	r3, [sp, #16]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	dc37      	bgt.n	800f5fc <_dtoa_r+0x99c>
 800f58c:	9b07      	ldr	r3, [sp, #28]
 800f58e:	2b02      	cmp	r3, #2
 800f590:	dd34      	ble.n	800f5fc <_dtoa_r+0x99c>
 800f592:	9b04      	ldr	r3, [sp, #16]
 800f594:	9301      	str	r3, [sp, #4]
 800f596:	9b01      	ldr	r3, [sp, #4]
 800f598:	b963      	cbnz	r3, 800f5b4 <_dtoa_r+0x954>
 800f59a:	4631      	mov	r1, r6
 800f59c:	2205      	movs	r2, #5
 800f59e:	4620      	mov	r0, r4
 800f5a0:	f000 fd68 	bl	8010074 <__multadd>
 800f5a4:	4601      	mov	r1, r0
 800f5a6:	4606      	mov	r6, r0
 800f5a8:	4650      	mov	r0, sl
 800f5aa:	f000 ffc7 	bl	801053c <__mcmp>
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	f73f adbb 	bgt.w	800f12a <_dtoa_r+0x4ca>
 800f5b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5b6:	9d00      	ldr	r5, [sp, #0]
 800f5b8:	ea6f 0b03 	mvn.w	fp, r3
 800f5bc:	f04f 0800 	mov.w	r8, #0
 800f5c0:	4631      	mov	r1, r6
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	f000 fd34 	bl	8010030 <_Bfree>
 800f5c8:	2f00      	cmp	r7, #0
 800f5ca:	f43f aeab 	beq.w	800f324 <_dtoa_r+0x6c4>
 800f5ce:	f1b8 0f00 	cmp.w	r8, #0
 800f5d2:	d005      	beq.n	800f5e0 <_dtoa_r+0x980>
 800f5d4:	45b8      	cmp	r8, r7
 800f5d6:	d003      	beq.n	800f5e0 <_dtoa_r+0x980>
 800f5d8:	4641      	mov	r1, r8
 800f5da:	4620      	mov	r0, r4
 800f5dc:	f000 fd28 	bl	8010030 <_Bfree>
 800f5e0:	4639      	mov	r1, r7
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	f000 fd24 	bl	8010030 <_Bfree>
 800f5e8:	e69c      	b.n	800f324 <_dtoa_r+0x6c4>
 800f5ea:	2600      	movs	r6, #0
 800f5ec:	4637      	mov	r7, r6
 800f5ee:	e7e1      	b.n	800f5b4 <_dtoa_r+0x954>
 800f5f0:	46bb      	mov	fp, r7
 800f5f2:	4637      	mov	r7, r6
 800f5f4:	e599      	b.n	800f12a <_dtoa_r+0x4ca>
 800f5f6:	bf00      	nop
 800f5f8:	40240000 	.word	0x40240000
 800f5fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	f000 80c8 	beq.w	800f794 <_dtoa_r+0xb34>
 800f604:	9b04      	ldr	r3, [sp, #16]
 800f606:	9301      	str	r3, [sp, #4]
 800f608:	2d00      	cmp	r5, #0
 800f60a:	dd05      	ble.n	800f618 <_dtoa_r+0x9b8>
 800f60c:	4639      	mov	r1, r7
 800f60e:	462a      	mov	r2, r5
 800f610:	4620      	mov	r0, r4
 800f612:	f000 ff27 	bl	8010464 <__lshift>
 800f616:	4607      	mov	r7, r0
 800f618:	f1b8 0f00 	cmp.w	r8, #0
 800f61c:	d05b      	beq.n	800f6d6 <_dtoa_r+0xa76>
 800f61e:	6879      	ldr	r1, [r7, #4]
 800f620:	4620      	mov	r0, r4
 800f622:	f000 fcc5 	bl	800ffb0 <_Balloc>
 800f626:	4605      	mov	r5, r0
 800f628:	b928      	cbnz	r0, 800f636 <_dtoa_r+0x9d6>
 800f62a:	4b83      	ldr	r3, [pc, #524]	; (800f838 <_dtoa_r+0xbd8>)
 800f62c:	4602      	mov	r2, r0
 800f62e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800f632:	f7ff bb2e 	b.w	800ec92 <_dtoa_r+0x32>
 800f636:	693a      	ldr	r2, [r7, #16]
 800f638:	3202      	adds	r2, #2
 800f63a:	0092      	lsls	r2, r2, #2
 800f63c:	f107 010c 	add.w	r1, r7, #12
 800f640:	300c      	adds	r0, #12
 800f642:	f7ff fa64 	bl	800eb0e <memcpy>
 800f646:	2201      	movs	r2, #1
 800f648:	4629      	mov	r1, r5
 800f64a:	4620      	mov	r0, r4
 800f64c:	f000 ff0a 	bl	8010464 <__lshift>
 800f650:	9b00      	ldr	r3, [sp, #0]
 800f652:	3301      	adds	r3, #1
 800f654:	9304      	str	r3, [sp, #16]
 800f656:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f65a:	4413      	add	r3, r2
 800f65c:	9308      	str	r3, [sp, #32]
 800f65e:	9b02      	ldr	r3, [sp, #8]
 800f660:	f003 0301 	and.w	r3, r3, #1
 800f664:	46b8      	mov	r8, r7
 800f666:	9306      	str	r3, [sp, #24]
 800f668:	4607      	mov	r7, r0
 800f66a:	9b04      	ldr	r3, [sp, #16]
 800f66c:	4631      	mov	r1, r6
 800f66e:	3b01      	subs	r3, #1
 800f670:	4650      	mov	r0, sl
 800f672:	9301      	str	r3, [sp, #4]
 800f674:	f7ff fa6a 	bl	800eb4c <quorem>
 800f678:	4641      	mov	r1, r8
 800f67a:	9002      	str	r0, [sp, #8]
 800f67c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f680:	4650      	mov	r0, sl
 800f682:	f000 ff5b 	bl	801053c <__mcmp>
 800f686:	463a      	mov	r2, r7
 800f688:	9005      	str	r0, [sp, #20]
 800f68a:	4631      	mov	r1, r6
 800f68c:	4620      	mov	r0, r4
 800f68e:	f000 ff71 	bl	8010574 <__mdiff>
 800f692:	68c2      	ldr	r2, [r0, #12]
 800f694:	4605      	mov	r5, r0
 800f696:	bb02      	cbnz	r2, 800f6da <_dtoa_r+0xa7a>
 800f698:	4601      	mov	r1, r0
 800f69a:	4650      	mov	r0, sl
 800f69c:	f000 ff4e 	bl	801053c <__mcmp>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	4629      	mov	r1, r5
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	9209      	str	r2, [sp, #36]	; 0x24
 800f6a8:	f000 fcc2 	bl	8010030 <_Bfree>
 800f6ac:	9b07      	ldr	r3, [sp, #28]
 800f6ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6b0:	9d04      	ldr	r5, [sp, #16]
 800f6b2:	ea43 0102 	orr.w	r1, r3, r2
 800f6b6:	9b06      	ldr	r3, [sp, #24]
 800f6b8:	4319      	orrs	r1, r3
 800f6ba:	d110      	bne.n	800f6de <_dtoa_r+0xa7e>
 800f6bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f6c0:	d029      	beq.n	800f716 <_dtoa_r+0xab6>
 800f6c2:	9b05      	ldr	r3, [sp, #20]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	dd02      	ble.n	800f6ce <_dtoa_r+0xa6e>
 800f6c8:	9b02      	ldr	r3, [sp, #8]
 800f6ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800f6ce:	9b01      	ldr	r3, [sp, #4]
 800f6d0:	f883 9000 	strb.w	r9, [r3]
 800f6d4:	e774      	b.n	800f5c0 <_dtoa_r+0x960>
 800f6d6:	4638      	mov	r0, r7
 800f6d8:	e7ba      	b.n	800f650 <_dtoa_r+0x9f0>
 800f6da:	2201      	movs	r2, #1
 800f6dc:	e7e1      	b.n	800f6a2 <_dtoa_r+0xa42>
 800f6de:	9b05      	ldr	r3, [sp, #20]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	db04      	blt.n	800f6ee <_dtoa_r+0xa8e>
 800f6e4:	9907      	ldr	r1, [sp, #28]
 800f6e6:	430b      	orrs	r3, r1
 800f6e8:	9906      	ldr	r1, [sp, #24]
 800f6ea:	430b      	orrs	r3, r1
 800f6ec:	d120      	bne.n	800f730 <_dtoa_r+0xad0>
 800f6ee:	2a00      	cmp	r2, #0
 800f6f0:	dded      	ble.n	800f6ce <_dtoa_r+0xa6e>
 800f6f2:	4651      	mov	r1, sl
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f000 feb4 	bl	8010464 <__lshift>
 800f6fc:	4631      	mov	r1, r6
 800f6fe:	4682      	mov	sl, r0
 800f700:	f000 ff1c 	bl	801053c <__mcmp>
 800f704:	2800      	cmp	r0, #0
 800f706:	dc03      	bgt.n	800f710 <_dtoa_r+0xab0>
 800f708:	d1e1      	bne.n	800f6ce <_dtoa_r+0xa6e>
 800f70a:	f019 0f01 	tst.w	r9, #1
 800f70e:	d0de      	beq.n	800f6ce <_dtoa_r+0xa6e>
 800f710:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f714:	d1d8      	bne.n	800f6c8 <_dtoa_r+0xa68>
 800f716:	9a01      	ldr	r2, [sp, #4]
 800f718:	2339      	movs	r3, #57	; 0x39
 800f71a:	7013      	strb	r3, [r2, #0]
 800f71c:	462b      	mov	r3, r5
 800f71e:	461d      	mov	r5, r3
 800f720:	3b01      	subs	r3, #1
 800f722:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f726:	2a39      	cmp	r2, #57	; 0x39
 800f728:	d06c      	beq.n	800f804 <_dtoa_r+0xba4>
 800f72a:	3201      	adds	r2, #1
 800f72c:	701a      	strb	r2, [r3, #0]
 800f72e:	e747      	b.n	800f5c0 <_dtoa_r+0x960>
 800f730:	2a00      	cmp	r2, #0
 800f732:	dd07      	ble.n	800f744 <_dtoa_r+0xae4>
 800f734:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800f738:	d0ed      	beq.n	800f716 <_dtoa_r+0xab6>
 800f73a:	9a01      	ldr	r2, [sp, #4]
 800f73c:	f109 0301 	add.w	r3, r9, #1
 800f740:	7013      	strb	r3, [r2, #0]
 800f742:	e73d      	b.n	800f5c0 <_dtoa_r+0x960>
 800f744:	9b04      	ldr	r3, [sp, #16]
 800f746:	9a08      	ldr	r2, [sp, #32]
 800f748:	f803 9c01 	strb.w	r9, [r3, #-1]
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d043      	beq.n	800f7d8 <_dtoa_r+0xb78>
 800f750:	4651      	mov	r1, sl
 800f752:	2300      	movs	r3, #0
 800f754:	220a      	movs	r2, #10
 800f756:	4620      	mov	r0, r4
 800f758:	f000 fc8c 	bl	8010074 <__multadd>
 800f75c:	45b8      	cmp	r8, r7
 800f75e:	4682      	mov	sl, r0
 800f760:	f04f 0300 	mov.w	r3, #0
 800f764:	f04f 020a 	mov.w	r2, #10
 800f768:	4641      	mov	r1, r8
 800f76a:	4620      	mov	r0, r4
 800f76c:	d107      	bne.n	800f77e <_dtoa_r+0xb1e>
 800f76e:	f000 fc81 	bl	8010074 <__multadd>
 800f772:	4680      	mov	r8, r0
 800f774:	4607      	mov	r7, r0
 800f776:	9b04      	ldr	r3, [sp, #16]
 800f778:	3301      	adds	r3, #1
 800f77a:	9304      	str	r3, [sp, #16]
 800f77c:	e775      	b.n	800f66a <_dtoa_r+0xa0a>
 800f77e:	f000 fc79 	bl	8010074 <__multadd>
 800f782:	4639      	mov	r1, r7
 800f784:	4680      	mov	r8, r0
 800f786:	2300      	movs	r3, #0
 800f788:	220a      	movs	r2, #10
 800f78a:	4620      	mov	r0, r4
 800f78c:	f000 fc72 	bl	8010074 <__multadd>
 800f790:	4607      	mov	r7, r0
 800f792:	e7f0      	b.n	800f776 <_dtoa_r+0xb16>
 800f794:	9b04      	ldr	r3, [sp, #16]
 800f796:	9301      	str	r3, [sp, #4]
 800f798:	9d00      	ldr	r5, [sp, #0]
 800f79a:	4631      	mov	r1, r6
 800f79c:	4650      	mov	r0, sl
 800f79e:	f7ff f9d5 	bl	800eb4c <quorem>
 800f7a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800f7a6:	9b00      	ldr	r3, [sp, #0]
 800f7a8:	f805 9b01 	strb.w	r9, [r5], #1
 800f7ac:	1aea      	subs	r2, r5, r3
 800f7ae:	9b01      	ldr	r3, [sp, #4]
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	dd07      	ble.n	800f7c4 <_dtoa_r+0xb64>
 800f7b4:	4651      	mov	r1, sl
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	220a      	movs	r2, #10
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	f000 fc5a 	bl	8010074 <__multadd>
 800f7c0:	4682      	mov	sl, r0
 800f7c2:	e7ea      	b.n	800f79a <_dtoa_r+0xb3a>
 800f7c4:	9b01      	ldr	r3, [sp, #4]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	bfc8      	it	gt
 800f7ca:	461d      	movgt	r5, r3
 800f7cc:	9b00      	ldr	r3, [sp, #0]
 800f7ce:	bfd8      	it	le
 800f7d0:	2501      	movle	r5, #1
 800f7d2:	441d      	add	r5, r3
 800f7d4:	f04f 0800 	mov.w	r8, #0
 800f7d8:	4651      	mov	r1, sl
 800f7da:	2201      	movs	r2, #1
 800f7dc:	4620      	mov	r0, r4
 800f7de:	f000 fe41 	bl	8010464 <__lshift>
 800f7e2:	4631      	mov	r1, r6
 800f7e4:	4682      	mov	sl, r0
 800f7e6:	f000 fea9 	bl	801053c <__mcmp>
 800f7ea:	2800      	cmp	r0, #0
 800f7ec:	dc96      	bgt.n	800f71c <_dtoa_r+0xabc>
 800f7ee:	d102      	bne.n	800f7f6 <_dtoa_r+0xb96>
 800f7f0:	f019 0f01 	tst.w	r9, #1
 800f7f4:	d192      	bne.n	800f71c <_dtoa_r+0xabc>
 800f7f6:	462b      	mov	r3, r5
 800f7f8:	461d      	mov	r5, r3
 800f7fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7fe:	2a30      	cmp	r2, #48	; 0x30
 800f800:	d0fa      	beq.n	800f7f8 <_dtoa_r+0xb98>
 800f802:	e6dd      	b.n	800f5c0 <_dtoa_r+0x960>
 800f804:	9a00      	ldr	r2, [sp, #0]
 800f806:	429a      	cmp	r2, r3
 800f808:	d189      	bne.n	800f71e <_dtoa_r+0xabe>
 800f80a:	f10b 0b01 	add.w	fp, fp, #1
 800f80e:	2331      	movs	r3, #49	; 0x31
 800f810:	e796      	b.n	800f740 <_dtoa_r+0xae0>
 800f812:	4b0a      	ldr	r3, [pc, #40]	; (800f83c <_dtoa_r+0xbdc>)
 800f814:	f7ff ba99 	b.w	800ed4a <_dtoa_r+0xea>
 800f818:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	f47f aa6d 	bne.w	800ecfa <_dtoa_r+0x9a>
 800f820:	4b07      	ldr	r3, [pc, #28]	; (800f840 <_dtoa_r+0xbe0>)
 800f822:	f7ff ba92 	b.w	800ed4a <_dtoa_r+0xea>
 800f826:	9b01      	ldr	r3, [sp, #4]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	dcb5      	bgt.n	800f798 <_dtoa_r+0xb38>
 800f82c:	9b07      	ldr	r3, [sp, #28]
 800f82e:	2b02      	cmp	r3, #2
 800f830:	f73f aeb1 	bgt.w	800f596 <_dtoa_r+0x936>
 800f834:	e7b0      	b.n	800f798 <_dtoa_r+0xb38>
 800f836:	bf00      	nop
 800f838:	08013cfd 	.word	0x08013cfd
 800f83c:	08013c50 	.word	0x08013c50
 800f840:	08013c81 	.word	0x08013c81

0800f844 <_free_r>:
 800f844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f846:	2900      	cmp	r1, #0
 800f848:	d044      	beq.n	800f8d4 <_free_r+0x90>
 800f84a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f84e:	9001      	str	r0, [sp, #4]
 800f850:	2b00      	cmp	r3, #0
 800f852:	f1a1 0404 	sub.w	r4, r1, #4
 800f856:	bfb8      	it	lt
 800f858:	18e4      	addlt	r4, r4, r3
 800f85a:	f7fd faf1 	bl	800ce40 <__malloc_lock>
 800f85e:	4a1e      	ldr	r2, [pc, #120]	; (800f8d8 <_free_r+0x94>)
 800f860:	9801      	ldr	r0, [sp, #4]
 800f862:	6813      	ldr	r3, [r2, #0]
 800f864:	b933      	cbnz	r3, 800f874 <_free_r+0x30>
 800f866:	6063      	str	r3, [r4, #4]
 800f868:	6014      	str	r4, [r2, #0]
 800f86a:	b003      	add	sp, #12
 800f86c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f870:	f7fd baec 	b.w	800ce4c <__malloc_unlock>
 800f874:	42a3      	cmp	r3, r4
 800f876:	d908      	bls.n	800f88a <_free_r+0x46>
 800f878:	6825      	ldr	r5, [r4, #0]
 800f87a:	1961      	adds	r1, r4, r5
 800f87c:	428b      	cmp	r3, r1
 800f87e:	bf01      	itttt	eq
 800f880:	6819      	ldreq	r1, [r3, #0]
 800f882:	685b      	ldreq	r3, [r3, #4]
 800f884:	1949      	addeq	r1, r1, r5
 800f886:	6021      	streq	r1, [r4, #0]
 800f888:	e7ed      	b.n	800f866 <_free_r+0x22>
 800f88a:	461a      	mov	r2, r3
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	b10b      	cbz	r3, 800f894 <_free_r+0x50>
 800f890:	42a3      	cmp	r3, r4
 800f892:	d9fa      	bls.n	800f88a <_free_r+0x46>
 800f894:	6811      	ldr	r1, [r2, #0]
 800f896:	1855      	adds	r5, r2, r1
 800f898:	42a5      	cmp	r5, r4
 800f89a:	d10b      	bne.n	800f8b4 <_free_r+0x70>
 800f89c:	6824      	ldr	r4, [r4, #0]
 800f89e:	4421      	add	r1, r4
 800f8a0:	1854      	adds	r4, r2, r1
 800f8a2:	42a3      	cmp	r3, r4
 800f8a4:	6011      	str	r1, [r2, #0]
 800f8a6:	d1e0      	bne.n	800f86a <_free_r+0x26>
 800f8a8:	681c      	ldr	r4, [r3, #0]
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	6053      	str	r3, [r2, #4]
 800f8ae:	440c      	add	r4, r1
 800f8b0:	6014      	str	r4, [r2, #0]
 800f8b2:	e7da      	b.n	800f86a <_free_r+0x26>
 800f8b4:	d902      	bls.n	800f8bc <_free_r+0x78>
 800f8b6:	230c      	movs	r3, #12
 800f8b8:	6003      	str	r3, [r0, #0]
 800f8ba:	e7d6      	b.n	800f86a <_free_r+0x26>
 800f8bc:	6825      	ldr	r5, [r4, #0]
 800f8be:	1961      	adds	r1, r4, r5
 800f8c0:	428b      	cmp	r3, r1
 800f8c2:	bf04      	itt	eq
 800f8c4:	6819      	ldreq	r1, [r3, #0]
 800f8c6:	685b      	ldreq	r3, [r3, #4]
 800f8c8:	6063      	str	r3, [r4, #4]
 800f8ca:	bf04      	itt	eq
 800f8cc:	1949      	addeq	r1, r1, r5
 800f8ce:	6021      	streq	r1, [r4, #0]
 800f8d0:	6054      	str	r4, [r2, #4]
 800f8d2:	e7ca      	b.n	800f86a <_free_r+0x26>
 800f8d4:	b003      	add	sp, #12
 800f8d6:	bd30      	pop	{r4, r5, pc}
 800f8d8:	20000d94 	.word	0x20000d94

0800f8dc <rshift>:
 800f8dc:	6903      	ldr	r3, [r0, #16]
 800f8de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f8e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f8ea:	f100 0414 	add.w	r4, r0, #20
 800f8ee:	dd45      	ble.n	800f97c <rshift+0xa0>
 800f8f0:	f011 011f 	ands.w	r1, r1, #31
 800f8f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f8f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f8fc:	d10c      	bne.n	800f918 <rshift+0x3c>
 800f8fe:	f100 0710 	add.w	r7, r0, #16
 800f902:	4629      	mov	r1, r5
 800f904:	42b1      	cmp	r1, r6
 800f906:	d334      	bcc.n	800f972 <rshift+0x96>
 800f908:	1a9b      	subs	r3, r3, r2
 800f90a:	009b      	lsls	r3, r3, #2
 800f90c:	1eea      	subs	r2, r5, #3
 800f90e:	4296      	cmp	r6, r2
 800f910:	bf38      	it	cc
 800f912:	2300      	movcc	r3, #0
 800f914:	4423      	add	r3, r4
 800f916:	e015      	b.n	800f944 <rshift+0x68>
 800f918:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f91c:	f1c1 0820 	rsb	r8, r1, #32
 800f920:	40cf      	lsrs	r7, r1
 800f922:	f105 0e04 	add.w	lr, r5, #4
 800f926:	46a1      	mov	r9, r4
 800f928:	4576      	cmp	r6, lr
 800f92a:	46f4      	mov	ip, lr
 800f92c:	d815      	bhi.n	800f95a <rshift+0x7e>
 800f92e:	1a9a      	subs	r2, r3, r2
 800f930:	0092      	lsls	r2, r2, #2
 800f932:	3a04      	subs	r2, #4
 800f934:	3501      	adds	r5, #1
 800f936:	42ae      	cmp	r6, r5
 800f938:	bf38      	it	cc
 800f93a:	2200      	movcc	r2, #0
 800f93c:	18a3      	adds	r3, r4, r2
 800f93e:	50a7      	str	r7, [r4, r2]
 800f940:	b107      	cbz	r7, 800f944 <rshift+0x68>
 800f942:	3304      	adds	r3, #4
 800f944:	1b1a      	subs	r2, r3, r4
 800f946:	42a3      	cmp	r3, r4
 800f948:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f94c:	bf08      	it	eq
 800f94e:	2300      	moveq	r3, #0
 800f950:	6102      	str	r2, [r0, #16]
 800f952:	bf08      	it	eq
 800f954:	6143      	streq	r3, [r0, #20]
 800f956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f95a:	f8dc c000 	ldr.w	ip, [ip]
 800f95e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f962:	ea4c 0707 	orr.w	r7, ip, r7
 800f966:	f849 7b04 	str.w	r7, [r9], #4
 800f96a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f96e:	40cf      	lsrs	r7, r1
 800f970:	e7da      	b.n	800f928 <rshift+0x4c>
 800f972:	f851 cb04 	ldr.w	ip, [r1], #4
 800f976:	f847 cf04 	str.w	ip, [r7, #4]!
 800f97a:	e7c3      	b.n	800f904 <rshift+0x28>
 800f97c:	4623      	mov	r3, r4
 800f97e:	e7e1      	b.n	800f944 <rshift+0x68>

0800f980 <__hexdig_fun>:
 800f980:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f984:	2b09      	cmp	r3, #9
 800f986:	d802      	bhi.n	800f98e <__hexdig_fun+0xe>
 800f988:	3820      	subs	r0, #32
 800f98a:	b2c0      	uxtb	r0, r0
 800f98c:	4770      	bx	lr
 800f98e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f992:	2b05      	cmp	r3, #5
 800f994:	d801      	bhi.n	800f99a <__hexdig_fun+0x1a>
 800f996:	3847      	subs	r0, #71	; 0x47
 800f998:	e7f7      	b.n	800f98a <__hexdig_fun+0xa>
 800f99a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f99e:	2b05      	cmp	r3, #5
 800f9a0:	d801      	bhi.n	800f9a6 <__hexdig_fun+0x26>
 800f9a2:	3827      	subs	r0, #39	; 0x27
 800f9a4:	e7f1      	b.n	800f98a <__hexdig_fun+0xa>
 800f9a6:	2000      	movs	r0, #0
 800f9a8:	4770      	bx	lr
	...

0800f9ac <__gethex>:
 800f9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b0:	4617      	mov	r7, r2
 800f9b2:	680a      	ldr	r2, [r1, #0]
 800f9b4:	b085      	sub	sp, #20
 800f9b6:	f102 0b02 	add.w	fp, r2, #2
 800f9ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f9be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f9c2:	4681      	mov	r9, r0
 800f9c4:	468a      	mov	sl, r1
 800f9c6:	9302      	str	r3, [sp, #8]
 800f9c8:	32fe      	adds	r2, #254	; 0xfe
 800f9ca:	eb02 030b 	add.w	r3, r2, fp
 800f9ce:	46d8      	mov	r8, fp
 800f9d0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800f9d4:	9301      	str	r3, [sp, #4]
 800f9d6:	2830      	cmp	r0, #48	; 0x30
 800f9d8:	d0f7      	beq.n	800f9ca <__gethex+0x1e>
 800f9da:	f7ff ffd1 	bl	800f980 <__hexdig_fun>
 800f9de:	4604      	mov	r4, r0
 800f9e0:	2800      	cmp	r0, #0
 800f9e2:	d138      	bne.n	800fa56 <__gethex+0xaa>
 800f9e4:	49a7      	ldr	r1, [pc, #668]	; (800fc84 <__gethex+0x2d8>)
 800f9e6:	2201      	movs	r2, #1
 800f9e8:	4640      	mov	r0, r8
 800f9ea:	f7fe fff6 	bl	800e9da <strncmp>
 800f9ee:	4606      	mov	r6, r0
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	d169      	bne.n	800fac8 <__gethex+0x11c>
 800f9f4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f9f8:	465d      	mov	r5, fp
 800f9fa:	f7ff ffc1 	bl	800f980 <__hexdig_fun>
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	d064      	beq.n	800facc <__gethex+0x120>
 800fa02:	465a      	mov	r2, fp
 800fa04:	7810      	ldrb	r0, [r2, #0]
 800fa06:	2830      	cmp	r0, #48	; 0x30
 800fa08:	4690      	mov	r8, r2
 800fa0a:	f102 0201 	add.w	r2, r2, #1
 800fa0e:	d0f9      	beq.n	800fa04 <__gethex+0x58>
 800fa10:	f7ff ffb6 	bl	800f980 <__hexdig_fun>
 800fa14:	2301      	movs	r3, #1
 800fa16:	fab0 f480 	clz	r4, r0
 800fa1a:	0964      	lsrs	r4, r4, #5
 800fa1c:	465e      	mov	r6, fp
 800fa1e:	9301      	str	r3, [sp, #4]
 800fa20:	4642      	mov	r2, r8
 800fa22:	4615      	mov	r5, r2
 800fa24:	3201      	adds	r2, #1
 800fa26:	7828      	ldrb	r0, [r5, #0]
 800fa28:	f7ff ffaa 	bl	800f980 <__hexdig_fun>
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	d1f8      	bne.n	800fa22 <__gethex+0x76>
 800fa30:	4994      	ldr	r1, [pc, #592]	; (800fc84 <__gethex+0x2d8>)
 800fa32:	2201      	movs	r2, #1
 800fa34:	4628      	mov	r0, r5
 800fa36:	f7fe ffd0 	bl	800e9da <strncmp>
 800fa3a:	b978      	cbnz	r0, 800fa5c <__gethex+0xb0>
 800fa3c:	b946      	cbnz	r6, 800fa50 <__gethex+0xa4>
 800fa3e:	1c6e      	adds	r6, r5, #1
 800fa40:	4632      	mov	r2, r6
 800fa42:	4615      	mov	r5, r2
 800fa44:	3201      	adds	r2, #1
 800fa46:	7828      	ldrb	r0, [r5, #0]
 800fa48:	f7ff ff9a 	bl	800f980 <__hexdig_fun>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	d1f8      	bne.n	800fa42 <__gethex+0x96>
 800fa50:	1b73      	subs	r3, r6, r5
 800fa52:	009e      	lsls	r6, r3, #2
 800fa54:	e004      	b.n	800fa60 <__gethex+0xb4>
 800fa56:	2400      	movs	r4, #0
 800fa58:	4626      	mov	r6, r4
 800fa5a:	e7e1      	b.n	800fa20 <__gethex+0x74>
 800fa5c:	2e00      	cmp	r6, #0
 800fa5e:	d1f7      	bne.n	800fa50 <__gethex+0xa4>
 800fa60:	782b      	ldrb	r3, [r5, #0]
 800fa62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fa66:	2b50      	cmp	r3, #80	; 0x50
 800fa68:	d13d      	bne.n	800fae6 <__gethex+0x13a>
 800fa6a:	786b      	ldrb	r3, [r5, #1]
 800fa6c:	2b2b      	cmp	r3, #43	; 0x2b
 800fa6e:	d02f      	beq.n	800fad0 <__gethex+0x124>
 800fa70:	2b2d      	cmp	r3, #45	; 0x2d
 800fa72:	d031      	beq.n	800fad8 <__gethex+0x12c>
 800fa74:	1c69      	adds	r1, r5, #1
 800fa76:	f04f 0b00 	mov.w	fp, #0
 800fa7a:	7808      	ldrb	r0, [r1, #0]
 800fa7c:	f7ff ff80 	bl	800f980 <__hexdig_fun>
 800fa80:	1e42      	subs	r2, r0, #1
 800fa82:	b2d2      	uxtb	r2, r2
 800fa84:	2a18      	cmp	r2, #24
 800fa86:	d82e      	bhi.n	800fae6 <__gethex+0x13a>
 800fa88:	f1a0 0210 	sub.w	r2, r0, #16
 800fa8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fa90:	f7ff ff76 	bl	800f980 <__hexdig_fun>
 800fa94:	f100 3cff 	add.w	ip, r0, #4294967295
 800fa98:	fa5f fc8c 	uxtb.w	ip, ip
 800fa9c:	f1bc 0f18 	cmp.w	ip, #24
 800faa0:	d91d      	bls.n	800fade <__gethex+0x132>
 800faa2:	f1bb 0f00 	cmp.w	fp, #0
 800faa6:	d000      	beq.n	800faaa <__gethex+0xfe>
 800faa8:	4252      	negs	r2, r2
 800faaa:	4416      	add	r6, r2
 800faac:	f8ca 1000 	str.w	r1, [sl]
 800fab0:	b1dc      	cbz	r4, 800faea <__gethex+0x13e>
 800fab2:	9b01      	ldr	r3, [sp, #4]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	bf14      	ite	ne
 800fab8:	f04f 0800 	movne.w	r8, #0
 800fabc:	f04f 0806 	moveq.w	r8, #6
 800fac0:	4640      	mov	r0, r8
 800fac2:	b005      	add	sp, #20
 800fac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac8:	4645      	mov	r5, r8
 800faca:	4626      	mov	r6, r4
 800facc:	2401      	movs	r4, #1
 800face:	e7c7      	b.n	800fa60 <__gethex+0xb4>
 800fad0:	f04f 0b00 	mov.w	fp, #0
 800fad4:	1ca9      	adds	r1, r5, #2
 800fad6:	e7d0      	b.n	800fa7a <__gethex+0xce>
 800fad8:	f04f 0b01 	mov.w	fp, #1
 800fadc:	e7fa      	b.n	800fad4 <__gethex+0x128>
 800fade:	230a      	movs	r3, #10
 800fae0:	fb03 0002 	mla	r0, r3, r2, r0
 800fae4:	e7d0      	b.n	800fa88 <__gethex+0xdc>
 800fae6:	4629      	mov	r1, r5
 800fae8:	e7e0      	b.n	800faac <__gethex+0x100>
 800faea:	eba5 0308 	sub.w	r3, r5, r8
 800faee:	3b01      	subs	r3, #1
 800faf0:	4621      	mov	r1, r4
 800faf2:	2b07      	cmp	r3, #7
 800faf4:	dc0a      	bgt.n	800fb0c <__gethex+0x160>
 800faf6:	4648      	mov	r0, r9
 800faf8:	f000 fa5a 	bl	800ffb0 <_Balloc>
 800fafc:	4604      	mov	r4, r0
 800fafe:	b940      	cbnz	r0, 800fb12 <__gethex+0x166>
 800fb00:	4b61      	ldr	r3, [pc, #388]	; (800fc88 <__gethex+0x2dc>)
 800fb02:	4602      	mov	r2, r0
 800fb04:	21e4      	movs	r1, #228	; 0xe4
 800fb06:	4861      	ldr	r0, [pc, #388]	; (800fc8c <__gethex+0x2e0>)
 800fb08:	f001 f9b2 	bl	8010e70 <__assert_func>
 800fb0c:	3101      	adds	r1, #1
 800fb0e:	105b      	asrs	r3, r3, #1
 800fb10:	e7ef      	b.n	800faf2 <__gethex+0x146>
 800fb12:	f100 0a14 	add.w	sl, r0, #20
 800fb16:	2300      	movs	r3, #0
 800fb18:	495a      	ldr	r1, [pc, #360]	; (800fc84 <__gethex+0x2d8>)
 800fb1a:	f8cd a004 	str.w	sl, [sp, #4]
 800fb1e:	469b      	mov	fp, r3
 800fb20:	45a8      	cmp	r8, r5
 800fb22:	d342      	bcc.n	800fbaa <__gethex+0x1fe>
 800fb24:	9801      	ldr	r0, [sp, #4]
 800fb26:	f840 bb04 	str.w	fp, [r0], #4
 800fb2a:	eba0 000a 	sub.w	r0, r0, sl
 800fb2e:	1080      	asrs	r0, r0, #2
 800fb30:	6120      	str	r0, [r4, #16]
 800fb32:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800fb36:	4658      	mov	r0, fp
 800fb38:	f000 fb2c 	bl	8010194 <__hi0bits>
 800fb3c:	683d      	ldr	r5, [r7, #0]
 800fb3e:	eba8 0000 	sub.w	r0, r8, r0
 800fb42:	42a8      	cmp	r0, r5
 800fb44:	dd59      	ble.n	800fbfa <__gethex+0x24e>
 800fb46:	eba0 0805 	sub.w	r8, r0, r5
 800fb4a:	4641      	mov	r1, r8
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	f000 febb 	bl	80108c8 <__any_on>
 800fb52:	4683      	mov	fp, r0
 800fb54:	b1b8      	cbz	r0, 800fb86 <__gethex+0x1da>
 800fb56:	f108 33ff 	add.w	r3, r8, #4294967295
 800fb5a:	1159      	asrs	r1, r3, #5
 800fb5c:	f003 021f 	and.w	r2, r3, #31
 800fb60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fb64:	f04f 0b01 	mov.w	fp, #1
 800fb68:	fa0b f202 	lsl.w	r2, fp, r2
 800fb6c:	420a      	tst	r2, r1
 800fb6e:	d00a      	beq.n	800fb86 <__gethex+0x1da>
 800fb70:	455b      	cmp	r3, fp
 800fb72:	dd06      	ble.n	800fb82 <__gethex+0x1d6>
 800fb74:	f1a8 0102 	sub.w	r1, r8, #2
 800fb78:	4620      	mov	r0, r4
 800fb7a:	f000 fea5 	bl	80108c8 <__any_on>
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	d138      	bne.n	800fbf4 <__gethex+0x248>
 800fb82:	f04f 0b02 	mov.w	fp, #2
 800fb86:	4641      	mov	r1, r8
 800fb88:	4620      	mov	r0, r4
 800fb8a:	f7ff fea7 	bl	800f8dc <rshift>
 800fb8e:	4446      	add	r6, r8
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	42b3      	cmp	r3, r6
 800fb94:	da41      	bge.n	800fc1a <__gethex+0x26e>
 800fb96:	4621      	mov	r1, r4
 800fb98:	4648      	mov	r0, r9
 800fb9a:	f000 fa49 	bl	8010030 <_Bfree>
 800fb9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fba0:	2300      	movs	r3, #0
 800fba2:	6013      	str	r3, [r2, #0]
 800fba4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800fba8:	e78a      	b.n	800fac0 <__gethex+0x114>
 800fbaa:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800fbae:	2a2e      	cmp	r2, #46	; 0x2e
 800fbb0:	d014      	beq.n	800fbdc <__gethex+0x230>
 800fbb2:	2b20      	cmp	r3, #32
 800fbb4:	d106      	bne.n	800fbc4 <__gethex+0x218>
 800fbb6:	9b01      	ldr	r3, [sp, #4]
 800fbb8:	f843 bb04 	str.w	fp, [r3], #4
 800fbbc:	f04f 0b00 	mov.w	fp, #0
 800fbc0:	9301      	str	r3, [sp, #4]
 800fbc2:	465b      	mov	r3, fp
 800fbc4:	7828      	ldrb	r0, [r5, #0]
 800fbc6:	9303      	str	r3, [sp, #12]
 800fbc8:	f7ff feda 	bl	800f980 <__hexdig_fun>
 800fbcc:	9b03      	ldr	r3, [sp, #12]
 800fbce:	f000 000f 	and.w	r0, r0, #15
 800fbd2:	4098      	lsls	r0, r3
 800fbd4:	ea4b 0b00 	orr.w	fp, fp, r0
 800fbd8:	3304      	adds	r3, #4
 800fbda:	e7a1      	b.n	800fb20 <__gethex+0x174>
 800fbdc:	45a8      	cmp	r8, r5
 800fbde:	d8e8      	bhi.n	800fbb2 <__gethex+0x206>
 800fbe0:	2201      	movs	r2, #1
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	9303      	str	r3, [sp, #12]
 800fbe6:	f7fe fef8 	bl	800e9da <strncmp>
 800fbea:	4926      	ldr	r1, [pc, #152]	; (800fc84 <__gethex+0x2d8>)
 800fbec:	9b03      	ldr	r3, [sp, #12]
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	d1df      	bne.n	800fbb2 <__gethex+0x206>
 800fbf2:	e795      	b.n	800fb20 <__gethex+0x174>
 800fbf4:	f04f 0b03 	mov.w	fp, #3
 800fbf8:	e7c5      	b.n	800fb86 <__gethex+0x1da>
 800fbfa:	da0b      	bge.n	800fc14 <__gethex+0x268>
 800fbfc:	eba5 0800 	sub.w	r8, r5, r0
 800fc00:	4621      	mov	r1, r4
 800fc02:	4642      	mov	r2, r8
 800fc04:	4648      	mov	r0, r9
 800fc06:	f000 fc2d 	bl	8010464 <__lshift>
 800fc0a:	eba6 0608 	sub.w	r6, r6, r8
 800fc0e:	4604      	mov	r4, r0
 800fc10:	f100 0a14 	add.w	sl, r0, #20
 800fc14:	f04f 0b00 	mov.w	fp, #0
 800fc18:	e7ba      	b.n	800fb90 <__gethex+0x1e4>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	42b3      	cmp	r3, r6
 800fc1e:	dd73      	ble.n	800fd08 <__gethex+0x35c>
 800fc20:	1b9e      	subs	r6, r3, r6
 800fc22:	42b5      	cmp	r5, r6
 800fc24:	dc34      	bgt.n	800fc90 <__gethex+0x2e4>
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2b02      	cmp	r3, #2
 800fc2a:	d023      	beq.n	800fc74 <__gethex+0x2c8>
 800fc2c:	2b03      	cmp	r3, #3
 800fc2e:	d025      	beq.n	800fc7c <__gethex+0x2d0>
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	d115      	bne.n	800fc60 <__gethex+0x2b4>
 800fc34:	42b5      	cmp	r5, r6
 800fc36:	d113      	bne.n	800fc60 <__gethex+0x2b4>
 800fc38:	2d01      	cmp	r5, #1
 800fc3a:	d10b      	bne.n	800fc54 <__gethex+0x2a8>
 800fc3c:	9a02      	ldr	r2, [sp, #8]
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6013      	str	r3, [r2, #0]
 800fc42:	2301      	movs	r3, #1
 800fc44:	6123      	str	r3, [r4, #16]
 800fc46:	f8ca 3000 	str.w	r3, [sl]
 800fc4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc4c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800fc50:	601c      	str	r4, [r3, #0]
 800fc52:	e735      	b.n	800fac0 <__gethex+0x114>
 800fc54:	1e69      	subs	r1, r5, #1
 800fc56:	4620      	mov	r0, r4
 800fc58:	f000 fe36 	bl	80108c8 <__any_on>
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	d1ed      	bne.n	800fc3c <__gethex+0x290>
 800fc60:	4621      	mov	r1, r4
 800fc62:	4648      	mov	r0, r9
 800fc64:	f000 f9e4 	bl	8010030 <_Bfree>
 800fc68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	6013      	str	r3, [r2, #0]
 800fc6e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800fc72:	e725      	b.n	800fac0 <__gethex+0x114>
 800fc74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d1f2      	bne.n	800fc60 <__gethex+0x2b4>
 800fc7a:	e7df      	b.n	800fc3c <__gethex+0x290>
 800fc7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d1dc      	bne.n	800fc3c <__gethex+0x290>
 800fc82:	e7ed      	b.n	800fc60 <__gethex+0x2b4>
 800fc84:	08013bec 	.word	0x08013bec
 800fc88:	08013cfd 	.word	0x08013cfd
 800fc8c:	08013d0e 	.word	0x08013d0e
 800fc90:	f106 38ff 	add.w	r8, r6, #4294967295
 800fc94:	f1bb 0f00 	cmp.w	fp, #0
 800fc98:	d133      	bne.n	800fd02 <__gethex+0x356>
 800fc9a:	f1b8 0f00 	cmp.w	r8, #0
 800fc9e:	d004      	beq.n	800fcaa <__gethex+0x2fe>
 800fca0:	4641      	mov	r1, r8
 800fca2:	4620      	mov	r0, r4
 800fca4:	f000 fe10 	bl	80108c8 <__any_on>
 800fca8:	4683      	mov	fp, r0
 800fcaa:	ea4f 1268 	mov.w	r2, r8, asr #5
 800fcae:	2301      	movs	r3, #1
 800fcb0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fcb4:	f008 081f 	and.w	r8, r8, #31
 800fcb8:	fa03 f308 	lsl.w	r3, r3, r8
 800fcbc:	4213      	tst	r3, r2
 800fcbe:	4631      	mov	r1, r6
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	bf18      	it	ne
 800fcc4:	f04b 0b02 	orrne.w	fp, fp, #2
 800fcc8:	1bad      	subs	r5, r5, r6
 800fcca:	f7ff fe07 	bl	800f8dc <rshift>
 800fcce:	687e      	ldr	r6, [r7, #4]
 800fcd0:	f04f 0802 	mov.w	r8, #2
 800fcd4:	f1bb 0f00 	cmp.w	fp, #0
 800fcd8:	d04a      	beq.n	800fd70 <__gethex+0x3c4>
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	2b02      	cmp	r3, #2
 800fcde:	d016      	beq.n	800fd0e <__gethex+0x362>
 800fce0:	2b03      	cmp	r3, #3
 800fce2:	d018      	beq.n	800fd16 <__gethex+0x36a>
 800fce4:	2b01      	cmp	r3, #1
 800fce6:	d109      	bne.n	800fcfc <__gethex+0x350>
 800fce8:	f01b 0f02 	tst.w	fp, #2
 800fcec:	d006      	beq.n	800fcfc <__gethex+0x350>
 800fcee:	f8da 3000 	ldr.w	r3, [sl]
 800fcf2:	ea4b 0b03 	orr.w	fp, fp, r3
 800fcf6:	f01b 0f01 	tst.w	fp, #1
 800fcfa:	d10f      	bne.n	800fd1c <__gethex+0x370>
 800fcfc:	f048 0810 	orr.w	r8, r8, #16
 800fd00:	e036      	b.n	800fd70 <__gethex+0x3c4>
 800fd02:	f04f 0b01 	mov.w	fp, #1
 800fd06:	e7d0      	b.n	800fcaa <__gethex+0x2fe>
 800fd08:	f04f 0801 	mov.w	r8, #1
 800fd0c:	e7e2      	b.n	800fcd4 <__gethex+0x328>
 800fd0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd10:	f1c3 0301 	rsb	r3, r3, #1
 800fd14:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d0ef      	beq.n	800fcfc <__gethex+0x350>
 800fd1c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fd20:	f104 0214 	add.w	r2, r4, #20
 800fd24:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800fd28:	9301      	str	r3, [sp, #4]
 800fd2a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800fd2e:	2300      	movs	r3, #0
 800fd30:	4694      	mov	ip, r2
 800fd32:	f852 1b04 	ldr.w	r1, [r2], #4
 800fd36:	f1b1 3fff 	cmp.w	r1, #4294967295
 800fd3a:	d01e      	beq.n	800fd7a <__gethex+0x3ce>
 800fd3c:	3101      	adds	r1, #1
 800fd3e:	f8cc 1000 	str.w	r1, [ip]
 800fd42:	f1b8 0f02 	cmp.w	r8, #2
 800fd46:	f104 0214 	add.w	r2, r4, #20
 800fd4a:	d13d      	bne.n	800fdc8 <__gethex+0x41c>
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	3b01      	subs	r3, #1
 800fd50:	42ab      	cmp	r3, r5
 800fd52:	d10b      	bne.n	800fd6c <__gethex+0x3c0>
 800fd54:	1169      	asrs	r1, r5, #5
 800fd56:	2301      	movs	r3, #1
 800fd58:	f005 051f 	and.w	r5, r5, #31
 800fd5c:	fa03 f505 	lsl.w	r5, r3, r5
 800fd60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd64:	421d      	tst	r5, r3
 800fd66:	bf18      	it	ne
 800fd68:	f04f 0801 	movne.w	r8, #1
 800fd6c:	f048 0820 	orr.w	r8, r8, #32
 800fd70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd72:	601c      	str	r4, [r3, #0]
 800fd74:	9b02      	ldr	r3, [sp, #8]
 800fd76:	601e      	str	r6, [r3, #0]
 800fd78:	e6a2      	b.n	800fac0 <__gethex+0x114>
 800fd7a:	4290      	cmp	r0, r2
 800fd7c:	f842 3c04 	str.w	r3, [r2, #-4]
 800fd80:	d8d6      	bhi.n	800fd30 <__gethex+0x384>
 800fd82:	68a2      	ldr	r2, [r4, #8]
 800fd84:	4593      	cmp	fp, r2
 800fd86:	db17      	blt.n	800fdb8 <__gethex+0x40c>
 800fd88:	6861      	ldr	r1, [r4, #4]
 800fd8a:	4648      	mov	r0, r9
 800fd8c:	3101      	adds	r1, #1
 800fd8e:	f000 f90f 	bl	800ffb0 <_Balloc>
 800fd92:	4682      	mov	sl, r0
 800fd94:	b918      	cbnz	r0, 800fd9e <__gethex+0x3f2>
 800fd96:	4b1b      	ldr	r3, [pc, #108]	; (800fe04 <__gethex+0x458>)
 800fd98:	4602      	mov	r2, r0
 800fd9a:	2184      	movs	r1, #132	; 0x84
 800fd9c:	e6b3      	b.n	800fb06 <__gethex+0x15a>
 800fd9e:	6922      	ldr	r2, [r4, #16]
 800fda0:	3202      	adds	r2, #2
 800fda2:	f104 010c 	add.w	r1, r4, #12
 800fda6:	0092      	lsls	r2, r2, #2
 800fda8:	300c      	adds	r0, #12
 800fdaa:	f7fe feb0 	bl	800eb0e <memcpy>
 800fdae:	4621      	mov	r1, r4
 800fdb0:	4648      	mov	r0, r9
 800fdb2:	f000 f93d 	bl	8010030 <_Bfree>
 800fdb6:	4654      	mov	r4, sl
 800fdb8:	6922      	ldr	r2, [r4, #16]
 800fdba:	1c51      	adds	r1, r2, #1
 800fdbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800fdc0:	6121      	str	r1, [r4, #16]
 800fdc2:	2101      	movs	r1, #1
 800fdc4:	6151      	str	r1, [r2, #20]
 800fdc6:	e7bc      	b.n	800fd42 <__gethex+0x396>
 800fdc8:	6921      	ldr	r1, [r4, #16]
 800fdca:	4559      	cmp	r1, fp
 800fdcc:	dd0b      	ble.n	800fde6 <__gethex+0x43a>
 800fdce:	2101      	movs	r1, #1
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	f7ff fd83 	bl	800f8dc <rshift>
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	3601      	adds	r6, #1
 800fdda:	42b3      	cmp	r3, r6
 800fddc:	f6ff aedb 	blt.w	800fb96 <__gethex+0x1ea>
 800fde0:	f04f 0801 	mov.w	r8, #1
 800fde4:	e7c2      	b.n	800fd6c <__gethex+0x3c0>
 800fde6:	f015 051f 	ands.w	r5, r5, #31
 800fdea:	d0f9      	beq.n	800fde0 <__gethex+0x434>
 800fdec:	9b01      	ldr	r3, [sp, #4]
 800fdee:	441a      	add	r2, r3
 800fdf0:	f1c5 0520 	rsb	r5, r5, #32
 800fdf4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800fdf8:	f000 f9cc 	bl	8010194 <__hi0bits>
 800fdfc:	42a8      	cmp	r0, r5
 800fdfe:	dbe6      	blt.n	800fdce <__gethex+0x422>
 800fe00:	e7ee      	b.n	800fde0 <__gethex+0x434>
 800fe02:	bf00      	nop
 800fe04:	08013cfd 	.word	0x08013cfd

0800fe08 <L_shift>:
 800fe08:	f1c2 0208 	rsb	r2, r2, #8
 800fe0c:	0092      	lsls	r2, r2, #2
 800fe0e:	b570      	push	{r4, r5, r6, lr}
 800fe10:	f1c2 0620 	rsb	r6, r2, #32
 800fe14:	6843      	ldr	r3, [r0, #4]
 800fe16:	6804      	ldr	r4, [r0, #0]
 800fe18:	fa03 f506 	lsl.w	r5, r3, r6
 800fe1c:	432c      	orrs	r4, r5
 800fe1e:	40d3      	lsrs	r3, r2
 800fe20:	6004      	str	r4, [r0, #0]
 800fe22:	f840 3f04 	str.w	r3, [r0, #4]!
 800fe26:	4288      	cmp	r0, r1
 800fe28:	d3f4      	bcc.n	800fe14 <L_shift+0xc>
 800fe2a:	bd70      	pop	{r4, r5, r6, pc}

0800fe2c <__match>:
 800fe2c:	b530      	push	{r4, r5, lr}
 800fe2e:	6803      	ldr	r3, [r0, #0]
 800fe30:	3301      	adds	r3, #1
 800fe32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe36:	b914      	cbnz	r4, 800fe3e <__match+0x12>
 800fe38:	6003      	str	r3, [r0, #0]
 800fe3a:	2001      	movs	r0, #1
 800fe3c:	bd30      	pop	{r4, r5, pc}
 800fe3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe42:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fe46:	2d19      	cmp	r5, #25
 800fe48:	bf98      	it	ls
 800fe4a:	3220      	addls	r2, #32
 800fe4c:	42a2      	cmp	r2, r4
 800fe4e:	d0f0      	beq.n	800fe32 <__match+0x6>
 800fe50:	2000      	movs	r0, #0
 800fe52:	e7f3      	b.n	800fe3c <__match+0x10>

0800fe54 <__hexnan>:
 800fe54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe58:	680b      	ldr	r3, [r1, #0]
 800fe5a:	6801      	ldr	r1, [r0, #0]
 800fe5c:	115e      	asrs	r6, r3, #5
 800fe5e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fe62:	f013 031f 	ands.w	r3, r3, #31
 800fe66:	b087      	sub	sp, #28
 800fe68:	bf18      	it	ne
 800fe6a:	3604      	addne	r6, #4
 800fe6c:	2500      	movs	r5, #0
 800fe6e:	1f37      	subs	r7, r6, #4
 800fe70:	4682      	mov	sl, r0
 800fe72:	4690      	mov	r8, r2
 800fe74:	9301      	str	r3, [sp, #4]
 800fe76:	f846 5c04 	str.w	r5, [r6, #-4]
 800fe7a:	46b9      	mov	r9, r7
 800fe7c:	463c      	mov	r4, r7
 800fe7e:	9502      	str	r5, [sp, #8]
 800fe80:	46ab      	mov	fp, r5
 800fe82:	784a      	ldrb	r2, [r1, #1]
 800fe84:	1c4b      	adds	r3, r1, #1
 800fe86:	9303      	str	r3, [sp, #12]
 800fe88:	b342      	cbz	r2, 800fedc <__hexnan+0x88>
 800fe8a:	4610      	mov	r0, r2
 800fe8c:	9105      	str	r1, [sp, #20]
 800fe8e:	9204      	str	r2, [sp, #16]
 800fe90:	f7ff fd76 	bl	800f980 <__hexdig_fun>
 800fe94:	2800      	cmp	r0, #0
 800fe96:	d14f      	bne.n	800ff38 <__hexnan+0xe4>
 800fe98:	9a04      	ldr	r2, [sp, #16]
 800fe9a:	9905      	ldr	r1, [sp, #20]
 800fe9c:	2a20      	cmp	r2, #32
 800fe9e:	d818      	bhi.n	800fed2 <__hexnan+0x7e>
 800fea0:	9b02      	ldr	r3, [sp, #8]
 800fea2:	459b      	cmp	fp, r3
 800fea4:	dd13      	ble.n	800fece <__hexnan+0x7a>
 800fea6:	454c      	cmp	r4, r9
 800fea8:	d206      	bcs.n	800feb8 <__hexnan+0x64>
 800feaa:	2d07      	cmp	r5, #7
 800feac:	dc04      	bgt.n	800feb8 <__hexnan+0x64>
 800feae:	462a      	mov	r2, r5
 800feb0:	4649      	mov	r1, r9
 800feb2:	4620      	mov	r0, r4
 800feb4:	f7ff ffa8 	bl	800fe08 <L_shift>
 800feb8:	4544      	cmp	r4, r8
 800feba:	d950      	bls.n	800ff5e <__hexnan+0x10a>
 800febc:	2300      	movs	r3, #0
 800febe:	f1a4 0904 	sub.w	r9, r4, #4
 800fec2:	f844 3c04 	str.w	r3, [r4, #-4]
 800fec6:	f8cd b008 	str.w	fp, [sp, #8]
 800feca:	464c      	mov	r4, r9
 800fecc:	461d      	mov	r5, r3
 800fece:	9903      	ldr	r1, [sp, #12]
 800fed0:	e7d7      	b.n	800fe82 <__hexnan+0x2e>
 800fed2:	2a29      	cmp	r2, #41	; 0x29
 800fed4:	d155      	bne.n	800ff82 <__hexnan+0x12e>
 800fed6:	3102      	adds	r1, #2
 800fed8:	f8ca 1000 	str.w	r1, [sl]
 800fedc:	f1bb 0f00 	cmp.w	fp, #0
 800fee0:	d04f      	beq.n	800ff82 <__hexnan+0x12e>
 800fee2:	454c      	cmp	r4, r9
 800fee4:	d206      	bcs.n	800fef4 <__hexnan+0xa0>
 800fee6:	2d07      	cmp	r5, #7
 800fee8:	dc04      	bgt.n	800fef4 <__hexnan+0xa0>
 800feea:	462a      	mov	r2, r5
 800feec:	4649      	mov	r1, r9
 800feee:	4620      	mov	r0, r4
 800fef0:	f7ff ff8a 	bl	800fe08 <L_shift>
 800fef4:	4544      	cmp	r4, r8
 800fef6:	d934      	bls.n	800ff62 <__hexnan+0x10e>
 800fef8:	f1a8 0204 	sub.w	r2, r8, #4
 800fefc:	4623      	mov	r3, r4
 800fefe:	f853 1b04 	ldr.w	r1, [r3], #4
 800ff02:	f842 1f04 	str.w	r1, [r2, #4]!
 800ff06:	429f      	cmp	r7, r3
 800ff08:	d2f9      	bcs.n	800fefe <__hexnan+0xaa>
 800ff0a:	1b3b      	subs	r3, r7, r4
 800ff0c:	f023 0303 	bic.w	r3, r3, #3
 800ff10:	3304      	adds	r3, #4
 800ff12:	3e03      	subs	r6, #3
 800ff14:	3401      	adds	r4, #1
 800ff16:	42a6      	cmp	r6, r4
 800ff18:	bf38      	it	cc
 800ff1a:	2304      	movcc	r3, #4
 800ff1c:	4443      	add	r3, r8
 800ff1e:	2200      	movs	r2, #0
 800ff20:	f843 2b04 	str.w	r2, [r3], #4
 800ff24:	429f      	cmp	r7, r3
 800ff26:	d2fb      	bcs.n	800ff20 <__hexnan+0xcc>
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	b91b      	cbnz	r3, 800ff34 <__hexnan+0xe0>
 800ff2c:	4547      	cmp	r7, r8
 800ff2e:	d126      	bne.n	800ff7e <__hexnan+0x12a>
 800ff30:	2301      	movs	r3, #1
 800ff32:	603b      	str	r3, [r7, #0]
 800ff34:	2005      	movs	r0, #5
 800ff36:	e025      	b.n	800ff84 <__hexnan+0x130>
 800ff38:	3501      	adds	r5, #1
 800ff3a:	2d08      	cmp	r5, #8
 800ff3c:	f10b 0b01 	add.w	fp, fp, #1
 800ff40:	dd06      	ble.n	800ff50 <__hexnan+0xfc>
 800ff42:	4544      	cmp	r4, r8
 800ff44:	d9c3      	bls.n	800fece <__hexnan+0x7a>
 800ff46:	2300      	movs	r3, #0
 800ff48:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff4c:	2501      	movs	r5, #1
 800ff4e:	3c04      	subs	r4, #4
 800ff50:	6822      	ldr	r2, [r4, #0]
 800ff52:	f000 000f 	and.w	r0, r0, #15
 800ff56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ff5a:	6020      	str	r0, [r4, #0]
 800ff5c:	e7b7      	b.n	800fece <__hexnan+0x7a>
 800ff5e:	2508      	movs	r5, #8
 800ff60:	e7b5      	b.n	800fece <__hexnan+0x7a>
 800ff62:	9b01      	ldr	r3, [sp, #4]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d0df      	beq.n	800ff28 <__hexnan+0xd4>
 800ff68:	f1c3 0320 	rsb	r3, r3, #32
 800ff6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ff70:	40da      	lsrs	r2, r3
 800ff72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ff76:	4013      	ands	r3, r2
 800ff78:	f846 3c04 	str.w	r3, [r6, #-4]
 800ff7c:	e7d4      	b.n	800ff28 <__hexnan+0xd4>
 800ff7e:	3f04      	subs	r7, #4
 800ff80:	e7d2      	b.n	800ff28 <__hexnan+0xd4>
 800ff82:	2004      	movs	r0, #4
 800ff84:	b007      	add	sp, #28
 800ff86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ff8a <__ascii_mbtowc>:
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	b901      	cbnz	r1, 800ff90 <__ascii_mbtowc+0x6>
 800ff8e:	a901      	add	r1, sp, #4
 800ff90:	b142      	cbz	r2, 800ffa4 <__ascii_mbtowc+0x1a>
 800ff92:	b14b      	cbz	r3, 800ffa8 <__ascii_mbtowc+0x1e>
 800ff94:	7813      	ldrb	r3, [r2, #0]
 800ff96:	600b      	str	r3, [r1, #0]
 800ff98:	7812      	ldrb	r2, [r2, #0]
 800ff9a:	1e10      	subs	r0, r2, #0
 800ff9c:	bf18      	it	ne
 800ff9e:	2001      	movne	r0, #1
 800ffa0:	b002      	add	sp, #8
 800ffa2:	4770      	bx	lr
 800ffa4:	4610      	mov	r0, r2
 800ffa6:	e7fb      	b.n	800ffa0 <__ascii_mbtowc+0x16>
 800ffa8:	f06f 0001 	mvn.w	r0, #1
 800ffac:	e7f8      	b.n	800ffa0 <__ascii_mbtowc+0x16>
	...

0800ffb0 <_Balloc>:
 800ffb0:	b570      	push	{r4, r5, r6, lr}
 800ffb2:	69c6      	ldr	r6, [r0, #28]
 800ffb4:	4604      	mov	r4, r0
 800ffb6:	460d      	mov	r5, r1
 800ffb8:	b976      	cbnz	r6, 800ffd8 <_Balloc+0x28>
 800ffba:	2010      	movs	r0, #16
 800ffbc:	f7fc fe90 	bl	800cce0 <malloc>
 800ffc0:	4602      	mov	r2, r0
 800ffc2:	61e0      	str	r0, [r4, #28]
 800ffc4:	b920      	cbnz	r0, 800ffd0 <_Balloc+0x20>
 800ffc6:	4b18      	ldr	r3, [pc, #96]	; (8010028 <_Balloc+0x78>)
 800ffc8:	4818      	ldr	r0, [pc, #96]	; (801002c <_Balloc+0x7c>)
 800ffca:	216b      	movs	r1, #107	; 0x6b
 800ffcc:	f000 ff50 	bl	8010e70 <__assert_func>
 800ffd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ffd4:	6006      	str	r6, [r0, #0]
 800ffd6:	60c6      	str	r6, [r0, #12]
 800ffd8:	69e6      	ldr	r6, [r4, #28]
 800ffda:	68f3      	ldr	r3, [r6, #12]
 800ffdc:	b183      	cbz	r3, 8010000 <_Balloc+0x50>
 800ffde:	69e3      	ldr	r3, [r4, #28]
 800ffe0:	68db      	ldr	r3, [r3, #12]
 800ffe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ffe6:	b9b8      	cbnz	r0, 8010018 <_Balloc+0x68>
 800ffe8:	2101      	movs	r1, #1
 800ffea:	fa01 f605 	lsl.w	r6, r1, r5
 800ffee:	1d72      	adds	r2, r6, #5
 800fff0:	0092      	lsls	r2, r2, #2
 800fff2:	4620      	mov	r0, r4
 800fff4:	f000 ff5a 	bl	8010eac <_calloc_r>
 800fff8:	b160      	cbz	r0, 8010014 <_Balloc+0x64>
 800fffa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fffe:	e00e      	b.n	801001e <_Balloc+0x6e>
 8010000:	2221      	movs	r2, #33	; 0x21
 8010002:	2104      	movs	r1, #4
 8010004:	4620      	mov	r0, r4
 8010006:	f000 ff51 	bl	8010eac <_calloc_r>
 801000a:	69e3      	ldr	r3, [r4, #28]
 801000c:	60f0      	str	r0, [r6, #12]
 801000e:	68db      	ldr	r3, [r3, #12]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d1e4      	bne.n	800ffde <_Balloc+0x2e>
 8010014:	2000      	movs	r0, #0
 8010016:	bd70      	pop	{r4, r5, r6, pc}
 8010018:	6802      	ldr	r2, [r0, #0]
 801001a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801001e:	2300      	movs	r3, #0
 8010020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010024:	e7f7      	b.n	8010016 <_Balloc+0x66>
 8010026:	bf00      	nop
 8010028:	08013c8e 	.word	0x08013c8e
 801002c:	08013d6e 	.word	0x08013d6e

08010030 <_Bfree>:
 8010030:	b570      	push	{r4, r5, r6, lr}
 8010032:	69c6      	ldr	r6, [r0, #28]
 8010034:	4605      	mov	r5, r0
 8010036:	460c      	mov	r4, r1
 8010038:	b976      	cbnz	r6, 8010058 <_Bfree+0x28>
 801003a:	2010      	movs	r0, #16
 801003c:	f7fc fe50 	bl	800cce0 <malloc>
 8010040:	4602      	mov	r2, r0
 8010042:	61e8      	str	r0, [r5, #28]
 8010044:	b920      	cbnz	r0, 8010050 <_Bfree+0x20>
 8010046:	4b09      	ldr	r3, [pc, #36]	; (801006c <_Bfree+0x3c>)
 8010048:	4809      	ldr	r0, [pc, #36]	; (8010070 <_Bfree+0x40>)
 801004a:	218f      	movs	r1, #143	; 0x8f
 801004c:	f000 ff10 	bl	8010e70 <__assert_func>
 8010050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010054:	6006      	str	r6, [r0, #0]
 8010056:	60c6      	str	r6, [r0, #12]
 8010058:	b13c      	cbz	r4, 801006a <_Bfree+0x3a>
 801005a:	69eb      	ldr	r3, [r5, #28]
 801005c:	6862      	ldr	r2, [r4, #4]
 801005e:	68db      	ldr	r3, [r3, #12]
 8010060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010064:	6021      	str	r1, [r4, #0]
 8010066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801006a:	bd70      	pop	{r4, r5, r6, pc}
 801006c:	08013c8e 	.word	0x08013c8e
 8010070:	08013d6e 	.word	0x08013d6e

08010074 <__multadd>:
 8010074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010078:	690d      	ldr	r5, [r1, #16]
 801007a:	4607      	mov	r7, r0
 801007c:	460c      	mov	r4, r1
 801007e:	461e      	mov	r6, r3
 8010080:	f101 0c14 	add.w	ip, r1, #20
 8010084:	2000      	movs	r0, #0
 8010086:	f8dc 3000 	ldr.w	r3, [ip]
 801008a:	b299      	uxth	r1, r3
 801008c:	fb02 6101 	mla	r1, r2, r1, r6
 8010090:	0c1e      	lsrs	r6, r3, #16
 8010092:	0c0b      	lsrs	r3, r1, #16
 8010094:	fb02 3306 	mla	r3, r2, r6, r3
 8010098:	b289      	uxth	r1, r1
 801009a:	3001      	adds	r0, #1
 801009c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80100a0:	4285      	cmp	r5, r0
 80100a2:	f84c 1b04 	str.w	r1, [ip], #4
 80100a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80100aa:	dcec      	bgt.n	8010086 <__multadd+0x12>
 80100ac:	b30e      	cbz	r6, 80100f2 <__multadd+0x7e>
 80100ae:	68a3      	ldr	r3, [r4, #8]
 80100b0:	42ab      	cmp	r3, r5
 80100b2:	dc19      	bgt.n	80100e8 <__multadd+0x74>
 80100b4:	6861      	ldr	r1, [r4, #4]
 80100b6:	4638      	mov	r0, r7
 80100b8:	3101      	adds	r1, #1
 80100ba:	f7ff ff79 	bl	800ffb0 <_Balloc>
 80100be:	4680      	mov	r8, r0
 80100c0:	b928      	cbnz	r0, 80100ce <__multadd+0x5a>
 80100c2:	4602      	mov	r2, r0
 80100c4:	4b0c      	ldr	r3, [pc, #48]	; (80100f8 <__multadd+0x84>)
 80100c6:	480d      	ldr	r0, [pc, #52]	; (80100fc <__multadd+0x88>)
 80100c8:	21ba      	movs	r1, #186	; 0xba
 80100ca:	f000 fed1 	bl	8010e70 <__assert_func>
 80100ce:	6922      	ldr	r2, [r4, #16]
 80100d0:	3202      	adds	r2, #2
 80100d2:	f104 010c 	add.w	r1, r4, #12
 80100d6:	0092      	lsls	r2, r2, #2
 80100d8:	300c      	adds	r0, #12
 80100da:	f7fe fd18 	bl	800eb0e <memcpy>
 80100de:	4621      	mov	r1, r4
 80100e0:	4638      	mov	r0, r7
 80100e2:	f7ff ffa5 	bl	8010030 <_Bfree>
 80100e6:	4644      	mov	r4, r8
 80100e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80100ec:	3501      	adds	r5, #1
 80100ee:	615e      	str	r6, [r3, #20]
 80100f0:	6125      	str	r5, [r4, #16]
 80100f2:	4620      	mov	r0, r4
 80100f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f8:	08013cfd 	.word	0x08013cfd
 80100fc:	08013d6e 	.word	0x08013d6e

08010100 <__s2b>:
 8010100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010104:	460c      	mov	r4, r1
 8010106:	4615      	mov	r5, r2
 8010108:	461f      	mov	r7, r3
 801010a:	2209      	movs	r2, #9
 801010c:	3308      	adds	r3, #8
 801010e:	4606      	mov	r6, r0
 8010110:	fb93 f3f2 	sdiv	r3, r3, r2
 8010114:	2100      	movs	r1, #0
 8010116:	2201      	movs	r2, #1
 8010118:	429a      	cmp	r2, r3
 801011a:	db09      	blt.n	8010130 <__s2b+0x30>
 801011c:	4630      	mov	r0, r6
 801011e:	f7ff ff47 	bl	800ffb0 <_Balloc>
 8010122:	b940      	cbnz	r0, 8010136 <__s2b+0x36>
 8010124:	4602      	mov	r2, r0
 8010126:	4b19      	ldr	r3, [pc, #100]	; (801018c <__s2b+0x8c>)
 8010128:	4819      	ldr	r0, [pc, #100]	; (8010190 <__s2b+0x90>)
 801012a:	21d3      	movs	r1, #211	; 0xd3
 801012c:	f000 fea0 	bl	8010e70 <__assert_func>
 8010130:	0052      	lsls	r2, r2, #1
 8010132:	3101      	adds	r1, #1
 8010134:	e7f0      	b.n	8010118 <__s2b+0x18>
 8010136:	9b08      	ldr	r3, [sp, #32]
 8010138:	6143      	str	r3, [r0, #20]
 801013a:	2d09      	cmp	r5, #9
 801013c:	f04f 0301 	mov.w	r3, #1
 8010140:	6103      	str	r3, [r0, #16]
 8010142:	dd16      	ble.n	8010172 <__s2b+0x72>
 8010144:	f104 0909 	add.w	r9, r4, #9
 8010148:	46c8      	mov	r8, r9
 801014a:	442c      	add	r4, r5
 801014c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010150:	4601      	mov	r1, r0
 8010152:	3b30      	subs	r3, #48	; 0x30
 8010154:	220a      	movs	r2, #10
 8010156:	4630      	mov	r0, r6
 8010158:	f7ff ff8c 	bl	8010074 <__multadd>
 801015c:	45a0      	cmp	r8, r4
 801015e:	d1f5      	bne.n	801014c <__s2b+0x4c>
 8010160:	f1a5 0408 	sub.w	r4, r5, #8
 8010164:	444c      	add	r4, r9
 8010166:	1b2d      	subs	r5, r5, r4
 8010168:	1963      	adds	r3, r4, r5
 801016a:	42bb      	cmp	r3, r7
 801016c:	db04      	blt.n	8010178 <__s2b+0x78>
 801016e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010172:	340a      	adds	r4, #10
 8010174:	2509      	movs	r5, #9
 8010176:	e7f6      	b.n	8010166 <__s2b+0x66>
 8010178:	f814 3b01 	ldrb.w	r3, [r4], #1
 801017c:	4601      	mov	r1, r0
 801017e:	3b30      	subs	r3, #48	; 0x30
 8010180:	220a      	movs	r2, #10
 8010182:	4630      	mov	r0, r6
 8010184:	f7ff ff76 	bl	8010074 <__multadd>
 8010188:	e7ee      	b.n	8010168 <__s2b+0x68>
 801018a:	bf00      	nop
 801018c:	08013cfd 	.word	0x08013cfd
 8010190:	08013d6e 	.word	0x08013d6e

08010194 <__hi0bits>:
 8010194:	0c03      	lsrs	r3, r0, #16
 8010196:	041b      	lsls	r3, r3, #16
 8010198:	b9d3      	cbnz	r3, 80101d0 <__hi0bits+0x3c>
 801019a:	0400      	lsls	r0, r0, #16
 801019c:	2310      	movs	r3, #16
 801019e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80101a2:	bf04      	itt	eq
 80101a4:	0200      	lsleq	r0, r0, #8
 80101a6:	3308      	addeq	r3, #8
 80101a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80101ac:	bf04      	itt	eq
 80101ae:	0100      	lsleq	r0, r0, #4
 80101b0:	3304      	addeq	r3, #4
 80101b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80101b6:	bf04      	itt	eq
 80101b8:	0080      	lsleq	r0, r0, #2
 80101ba:	3302      	addeq	r3, #2
 80101bc:	2800      	cmp	r0, #0
 80101be:	db05      	blt.n	80101cc <__hi0bits+0x38>
 80101c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80101c4:	f103 0301 	add.w	r3, r3, #1
 80101c8:	bf08      	it	eq
 80101ca:	2320      	moveq	r3, #32
 80101cc:	4618      	mov	r0, r3
 80101ce:	4770      	bx	lr
 80101d0:	2300      	movs	r3, #0
 80101d2:	e7e4      	b.n	801019e <__hi0bits+0xa>

080101d4 <__lo0bits>:
 80101d4:	6803      	ldr	r3, [r0, #0]
 80101d6:	f013 0207 	ands.w	r2, r3, #7
 80101da:	d00c      	beq.n	80101f6 <__lo0bits+0x22>
 80101dc:	07d9      	lsls	r1, r3, #31
 80101de:	d422      	bmi.n	8010226 <__lo0bits+0x52>
 80101e0:	079a      	lsls	r2, r3, #30
 80101e2:	bf49      	itett	mi
 80101e4:	085b      	lsrmi	r3, r3, #1
 80101e6:	089b      	lsrpl	r3, r3, #2
 80101e8:	6003      	strmi	r3, [r0, #0]
 80101ea:	2201      	movmi	r2, #1
 80101ec:	bf5c      	itt	pl
 80101ee:	6003      	strpl	r3, [r0, #0]
 80101f0:	2202      	movpl	r2, #2
 80101f2:	4610      	mov	r0, r2
 80101f4:	4770      	bx	lr
 80101f6:	b299      	uxth	r1, r3
 80101f8:	b909      	cbnz	r1, 80101fe <__lo0bits+0x2a>
 80101fa:	0c1b      	lsrs	r3, r3, #16
 80101fc:	2210      	movs	r2, #16
 80101fe:	b2d9      	uxtb	r1, r3
 8010200:	b909      	cbnz	r1, 8010206 <__lo0bits+0x32>
 8010202:	3208      	adds	r2, #8
 8010204:	0a1b      	lsrs	r3, r3, #8
 8010206:	0719      	lsls	r1, r3, #28
 8010208:	bf04      	itt	eq
 801020a:	091b      	lsreq	r3, r3, #4
 801020c:	3204      	addeq	r2, #4
 801020e:	0799      	lsls	r1, r3, #30
 8010210:	bf04      	itt	eq
 8010212:	089b      	lsreq	r3, r3, #2
 8010214:	3202      	addeq	r2, #2
 8010216:	07d9      	lsls	r1, r3, #31
 8010218:	d403      	bmi.n	8010222 <__lo0bits+0x4e>
 801021a:	085b      	lsrs	r3, r3, #1
 801021c:	f102 0201 	add.w	r2, r2, #1
 8010220:	d003      	beq.n	801022a <__lo0bits+0x56>
 8010222:	6003      	str	r3, [r0, #0]
 8010224:	e7e5      	b.n	80101f2 <__lo0bits+0x1e>
 8010226:	2200      	movs	r2, #0
 8010228:	e7e3      	b.n	80101f2 <__lo0bits+0x1e>
 801022a:	2220      	movs	r2, #32
 801022c:	e7e1      	b.n	80101f2 <__lo0bits+0x1e>
	...

08010230 <__i2b>:
 8010230:	b510      	push	{r4, lr}
 8010232:	460c      	mov	r4, r1
 8010234:	2101      	movs	r1, #1
 8010236:	f7ff febb 	bl	800ffb0 <_Balloc>
 801023a:	4602      	mov	r2, r0
 801023c:	b928      	cbnz	r0, 801024a <__i2b+0x1a>
 801023e:	4b05      	ldr	r3, [pc, #20]	; (8010254 <__i2b+0x24>)
 8010240:	4805      	ldr	r0, [pc, #20]	; (8010258 <__i2b+0x28>)
 8010242:	f240 1145 	movw	r1, #325	; 0x145
 8010246:	f000 fe13 	bl	8010e70 <__assert_func>
 801024a:	2301      	movs	r3, #1
 801024c:	6144      	str	r4, [r0, #20]
 801024e:	6103      	str	r3, [r0, #16]
 8010250:	bd10      	pop	{r4, pc}
 8010252:	bf00      	nop
 8010254:	08013cfd 	.word	0x08013cfd
 8010258:	08013d6e 	.word	0x08013d6e

0801025c <__multiply>:
 801025c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010260:	4691      	mov	r9, r2
 8010262:	690a      	ldr	r2, [r1, #16]
 8010264:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010268:	429a      	cmp	r2, r3
 801026a:	bfb8      	it	lt
 801026c:	460b      	movlt	r3, r1
 801026e:	460c      	mov	r4, r1
 8010270:	bfbc      	itt	lt
 8010272:	464c      	movlt	r4, r9
 8010274:	4699      	movlt	r9, r3
 8010276:	6927      	ldr	r7, [r4, #16]
 8010278:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801027c:	68a3      	ldr	r3, [r4, #8]
 801027e:	6861      	ldr	r1, [r4, #4]
 8010280:	eb07 060a 	add.w	r6, r7, sl
 8010284:	42b3      	cmp	r3, r6
 8010286:	b085      	sub	sp, #20
 8010288:	bfb8      	it	lt
 801028a:	3101      	addlt	r1, #1
 801028c:	f7ff fe90 	bl	800ffb0 <_Balloc>
 8010290:	b930      	cbnz	r0, 80102a0 <__multiply+0x44>
 8010292:	4602      	mov	r2, r0
 8010294:	4b44      	ldr	r3, [pc, #272]	; (80103a8 <__multiply+0x14c>)
 8010296:	4845      	ldr	r0, [pc, #276]	; (80103ac <__multiply+0x150>)
 8010298:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801029c:	f000 fde8 	bl	8010e70 <__assert_func>
 80102a0:	f100 0514 	add.w	r5, r0, #20
 80102a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80102a8:	462b      	mov	r3, r5
 80102aa:	2200      	movs	r2, #0
 80102ac:	4543      	cmp	r3, r8
 80102ae:	d321      	bcc.n	80102f4 <__multiply+0x98>
 80102b0:	f104 0314 	add.w	r3, r4, #20
 80102b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80102b8:	f109 0314 	add.w	r3, r9, #20
 80102bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80102c0:	9202      	str	r2, [sp, #8]
 80102c2:	1b3a      	subs	r2, r7, r4
 80102c4:	3a15      	subs	r2, #21
 80102c6:	f022 0203 	bic.w	r2, r2, #3
 80102ca:	3204      	adds	r2, #4
 80102cc:	f104 0115 	add.w	r1, r4, #21
 80102d0:	428f      	cmp	r7, r1
 80102d2:	bf38      	it	cc
 80102d4:	2204      	movcc	r2, #4
 80102d6:	9201      	str	r2, [sp, #4]
 80102d8:	9a02      	ldr	r2, [sp, #8]
 80102da:	9303      	str	r3, [sp, #12]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d80c      	bhi.n	80102fa <__multiply+0x9e>
 80102e0:	2e00      	cmp	r6, #0
 80102e2:	dd03      	ble.n	80102ec <__multiply+0x90>
 80102e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d05b      	beq.n	80103a4 <__multiply+0x148>
 80102ec:	6106      	str	r6, [r0, #16]
 80102ee:	b005      	add	sp, #20
 80102f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102f4:	f843 2b04 	str.w	r2, [r3], #4
 80102f8:	e7d8      	b.n	80102ac <__multiply+0x50>
 80102fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80102fe:	f1ba 0f00 	cmp.w	sl, #0
 8010302:	d024      	beq.n	801034e <__multiply+0xf2>
 8010304:	f104 0e14 	add.w	lr, r4, #20
 8010308:	46a9      	mov	r9, r5
 801030a:	f04f 0c00 	mov.w	ip, #0
 801030e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010312:	f8d9 1000 	ldr.w	r1, [r9]
 8010316:	fa1f fb82 	uxth.w	fp, r2
 801031a:	b289      	uxth	r1, r1
 801031c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010320:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010324:	f8d9 2000 	ldr.w	r2, [r9]
 8010328:	4461      	add	r1, ip
 801032a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801032e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010332:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010336:	b289      	uxth	r1, r1
 8010338:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801033c:	4577      	cmp	r7, lr
 801033e:	f849 1b04 	str.w	r1, [r9], #4
 8010342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010346:	d8e2      	bhi.n	801030e <__multiply+0xb2>
 8010348:	9a01      	ldr	r2, [sp, #4]
 801034a:	f845 c002 	str.w	ip, [r5, r2]
 801034e:	9a03      	ldr	r2, [sp, #12]
 8010350:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010354:	3304      	adds	r3, #4
 8010356:	f1b9 0f00 	cmp.w	r9, #0
 801035a:	d021      	beq.n	80103a0 <__multiply+0x144>
 801035c:	6829      	ldr	r1, [r5, #0]
 801035e:	f104 0c14 	add.w	ip, r4, #20
 8010362:	46ae      	mov	lr, r5
 8010364:	f04f 0a00 	mov.w	sl, #0
 8010368:	f8bc b000 	ldrh.w	fp, [ip]
 801036c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010370:	fb09 220b 	mla	r2, r9, fp, r2
 8010374:	4452      	add	r2, sl
 8010376:	b289      	uxth	r1, r1
 8010378:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801037c:	f84e 1b04 	str.w	r1, [lr], #4
 8010380:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010384:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010388:	f8be 1000 	ldrh.w	r1, [lr]
 801038c:	fb09 110a 	mla	r1, r9, sl, r1
 8010390:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010394:	4567      	cmp	r7, ip
 8010396:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801039a:	d8e5      	bhi.n	8010368 <__multiply+0x10c>
 801039c:	9a01      	ldr	r2, [sp, #4]
 801039e:	50a9      	str	r1, [r5, r2]
 80103a0:	3504      	adds	r5, #4
 80103a2:	e799      	b.n	80102d8 <__multiply+0x7c>
 80103a4:	3e01      	subs	r6, #1
 80103a6:	e79b      	b.n	80102e0 <__multiply+0x84>
 80103a8:	08013cfd 	.word	0x08013cfd
 80103ac:	08013d6e 	.word	0x08013d6e

080103b0 <__pow5mult>:
 80103b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103b4:	4615      	mov	r5, r2
 80103b6:	f012 0203 	ands.w	r2, r2, #3
 80103ba:	4606      	mov	r6, r0
 80103bc:	460f      	mov	r7, r1
 80103be:	d007      	beq.n	80103d0 <__pow5mult+0x20>
 80103c0:	4c25      	ldr	r4, [pc, #148]	; (8010458 <__pow5mult+0xa8>)
 80103c2:	3a01      	subs	r2, #1
 80103c4:	2300      	movs	r3, #0
 80103c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80103ca:	f7ff fe53 	bl	8010074 <__multadd>
 80103ce:	4607      	mov	r7, r0
 80103d0:	10ad      	asrs	r5, r5, #2
 80103d2:	d03d      	beq.n	8010450 <__pow5mult+0xa0>
 80103d4:	69f4      	ldr	r4, [r6, #28]
 80103d6:	b97c      	cbnz	r4, 80103f8 <__pow5mult+0x48>
 80103d8:	2010      	movs	r0, #16
 80103da:	f7fc fc81 	bl	800cce0 <malloc>
 80103de:	4602      	mov	r2, r0
 80103e0:	61f0      	str	r0, [r6, #28]
 80103e2:	b928      	cbnz	r0, 80103f0 <__pow5mult+0x40>
 80103e4:	4b1d      	ldr	r3, [pc, #116]	; (801045c <__pow5mult+0xac>)
 80103e6:	481e      	ldr	r0, [pc, #120]	; (8010460 <__pow5mult+0xb0>)
 80103e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80103ec:	f000 fd40 	bl	8010e70 <__assert_func>
 80103f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80103f4:	6004      	str	r4, [r0, #0]
 80103f6:	60c4      	str	r4, [r0, #12]
 80103f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80103fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010400:	b94c      	cbnz	r4, 8010416 <__pow5mult+0x66>
 8010402:	f240 2171 	movw	r1, #625	; 0x271
 8010406:	4630      	mov	r0, r6
 8010408:	f7ff ff12 	bl	8010230 <__i2b>
 801040c:	2300      	movs	r3, #0
 801040e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010412:	4604      	mov	r4, r0
 8010414:	6003      	str	r3, [r0, #0]
 8010416:	f04f 0900 	mov.w	r9, #0
 801041a:	07eb      	lsls	r3, r5, #31
 801041c:	d50a      	bpl.n	8010434 <__pow5mult+0x84>
 801041e:	4639      	mov	r1, r7
 8010420:	4622      	mov	r2, r4
 8010422:	4630      	mov	r0, r6
 8010424:	f7ff ff1a 	bl	801025c <__multiply>
 8010428:	4639      	mov	r1, r7
 801042a:	4680      	mov	r8, r0
 801042c:	4630      	mov	r0, r6
 801042e:	f7ff fdff 	bl	8010030 <_Bfree>
 8010432:	4647      	mov	r7, r8
 8010434:	106d      	asrs	r5, r5, #1
 8010436:	d00b      	beq.n	8010450 <__pow5mult+0xa0>
 8010438:	6820      	ldr	r0, [r4, #0]
 801043a:	b938      	cbnz	r0, 801044c <__pow5mult+0x9c>
 801043c:	4622      	mov	r2, r4
 801043e:	4621      	mov	r1, r4
 8010440:	4630      	mov	r0, r6
 8010442:	f7ff ff0b 	bl	801025c <__multiply>
 8010446:	6020      	str	r0, [r4, #0]
 8010448:	f8c0 9000 	str.w	r9, [r0]
 801044c:	4604      	mov	r4, r0
 801044e:	e7e4      	b.n	801041a <__pow5mult+0x6a>
 8010450:	4638      	mov	r0, r7
 8010452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010456:	bf00      	nop
 8010458:	08013eb8 	.word	0x08013eb8
 801045c:	08013c8e 	.word	0x08013c8e
 8010460:	08013d6e 	.word	0x08013d6e

08010464 <__lshift>:
 8010464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010468:	460c      	mov	r4, r1
 801046a:	6849      	ldr	r1, [r1, #4]
 801046c:	6923      	ldr	r3, [r4, #16]
 801046e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010472:	68a3      	ldr	r3, [r4, #8]
 8010474:	4607      	mov	r7, r0
 8010476:	4691      	mov	r9, r2
 8010478:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801047c:	f108 0601 	add.w	r6, r8, #1
 8010480:	42b3      	cmp	r3, r6
 8010482:	db0b      	blt.n	801049c <__lshift+0x38>
 8010484:	4638      	mov	r0, r7
 8010486:	f7ff fd93 	bl	800ffb0 <_Balloc>
 801048a:	4605      	mov	r5, r0
 801048c:	b948      	cbnz	r0, 80104a2 <__lshift+0x3e>
 801048e:	4602      	mov	r2, r0
 8010490:	4b28      	ldr	r3, [pc, #160]	; (8010534 <__lshift+0xd0>)
 8010492:	4829      	ldr	r0, [pc, #164]	; (8010538 <__lshift+0xd4>)
 8010494:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010498:	f000 fcea 	bl	8010e70 <__assert_func>
 801049c:	3101      	adds	r1, #1
 801049e:	005b      	lsls	r3, r3, #1
 80104a0:	e7ee      	b.n	8010480 <__lshift+0x1c>
 80104a2:	2300      	movs	r3, #0
 80104a4:	f100 0114 	add.w	r1, r0, #20
 80104a8:	f100 0210 	add.w	r2, r0, #16
 80104ac:	4618      	mov	r0, r3
 80104ae:	4553      	cmp	r3, sl
 80104b0:	db33      	blt.n	801051a <__lshift+0xb6>
 80104b2:	6920      	ldr	r0, [r4, #16]
 80104b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80104b8:	f104 0314 	add.w	r3, r4, #20
 80104bc:	f019 091f 	ands.w	r9, r9, #31
 80104c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80104c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80104c8:	d02b      	beq.n	8010522 <__lshift+0xbe>
 80104ca:	f1c9 0e20 	rsb	lr, r9, #32
 80104ce:	468a      	mov	sl, r1
 80104d0:	2200      	movs	r2, #0
 80104d2:	6818      	ldr	r0, [r3, #0]
 80104d4:	fa00 f009 	lsl.w	r0, r0, r9
 80104d8:	4310      	orrs	r0, r2
 80104da:	f84a 0b04 	str.w	r0, [sl], #4
 80104de:	f853 2b04 	ldr.w	r2, [r3], #4
 80104e2:	459c      	cmp	ip, r3
 80104e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80104e8:	d8f3      	bhi.n	80104d2 <__lshift+0x6e>
 80104ea:	ebac 0304 	sub.w	r3, ip, r4
 80104ee:	3b15      	subs	r3, #21
 80104f0:	f023 0303 	bic.w	r3, r3, #3
 80104f4:	3304      	adds	r3, #4
 80104f6:	f104 0015 	add.w	r0, r4, #21
 80104fa:	4584      	cmp	ip, r0
 80104fc:	bf38      	it	cc
 80104fe:	2304      	movcc	r3, #4
 8010500:	50ca      	str	r2, [r1, r3]
 8010502:	b10a      	cbz	r2, 8010508 <__lshift+0xa4>
 8010504:	f108 0602 	add.w	r6, r8, #2
 8010508:	3e01      	subs	r6, #1
 801050a:	4638      	mov	r0, r7
 801050c:	612e      	str	r6, [r5, #16]
 801050e:	4621      	mov	r1, r4
 8010510:	f7ff fd8e 	bl	8010030 <_Bfree>
 8010514:	4628      	mov	r0, r5
 8010516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801051a:	f842 0f04 	str.w	r0, [r2, #4]!
 801051e:	3301      	adds	r3, #1
 8010520:	e7c5      	b.n	80104ae <__lshift+0x4a>
 8010522:	3904      	subs	r1, #4
 8010524:	f853 2b04 	ldr.w	r2, [r3], #4
 8010528:	f841 2f04 	str.w	r2, [r1, #4]!
 801052c:	459c      	cmp	ip, r3
 801052e:	d8f9      	bhi.n	8010524 <__lshift+0xc0>
 8010530:	e7ea      	b.n	8010508 <__lshift+0xa4>
 8010532:	bf00      	nop
 8010534:	08013cfd 	.word	0x08013cfd
 8010538:	08013d6e 	.word	0x08013d6e

0801053c <__mcmp>:
 801053c:	b530      	push	{r4, r5, lr}
 801053e:	6902      	ldr	r2, [r0, #16]
 8010540:	690c      	ldr	r4, [r1, #16]
 8010542:	1b12      	subs	r2, r2, r4
 8010544:	d10e      	bne.n	8010564 <__mcmp+0x28>
 8010546:	f100 0314 	add.w	r3, r0, #20
 801054a:	3114      	adds	r1, #20
 801054c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010550:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010554:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010558:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801055c:	42a5      	cmp	r5, r4
 801055e:	d003      	beq.n	8010568 <__mcmp+0x2c>
 8010560:	d305      	bcc.n	801056e <__mcmp+0x32>
 8010562:	2201      	movs	r2, #1
 8010564:	4610      	mov	r0, r2
 8010566:	bd30      	pop	{r4, r5, pc}
 8010568:	4283      	cmp	r3, r0
 801056a:	d3f3      	bcc.n	8010554 <__mcmp+0x18>
 801056c:	e7fa      	b.n	8010564 <__mcmp+0x28>
 801056e:	f04f 32ff 	mov.w	r2, #4294967295
 8010572:	e7f7      	b.n	8010564 <__mcmp+0x28>

08010574 <__mdiff>:
 8010574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010578:	460c      	mov	r4, r1
 801057a:	4606      	mov	r6, r0
 801057c:	4611      	mov	r1, r2
 801057e:	4620      	mov	r0, r4
 8010580:	4690      	mov	r8, r2
 8010582:	f7ff ffdb 	bl	801053c <__mcmp>
 8010586:	1e05      	subs	r5, r0, #0
 8010588:	d110      	bne.n	80105ac <__mdiff+0x38>
 801058a:	4629      	mov	r1, r5
 801058c:	4630      	mov	r0, r6
 801058e:	f7ff fd0f 	bl	800ffb0 <_Balloc>
 8010592:	b930      	cbnz	r0, 80105a2 <__mdiff+0x2e>
 8010594:	4b3a      	ldr	r3, [pc, #232]	; (8010680 <__mdiff+0x10c>)
 8010596:	4602      	mov	r2, r0
 8010598:	f240 2137 	movw	r1, #567	; 0x237
 801059c:	4839      	ldr	r0, [pc, #228]	; (8010684 <__mdiff+0x110>)
 801059e:	f000 fc67 	bl	8010e70 <__assert_func>
 80105a2:	2301      	movs	r3, #1
 80105a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80105a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ac:	bfa4      	itt	ge
 80105ae:	4643      	movge	r3, r8
 80105b0:	46a0      	movge	r8, r4
 80105b2:	4630      	mov	r0, r6
 80105b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80105b8:	bfa6      	itte	ge
 80105ba:	461c      	movge	r4, r3
 80105bc:	2500      	movge	r5, #0
 80105be:	2501      	movlt	r5, #1
 80105c0:	f7ff fcf6 	bl	800ffb0 <_Balloc>
 80105c4:	b920      	cbnz	r0, 80105d0 <__mdiff+0x5c>
 80105c6:	4b2e      	ldr	r3, [pc, #184]	; (8010680 <__mdiff+0x10c>)
 80105c8:	4602      	mov	r2, r0
 80105ca:	f240 2145 	movw	r1, #581	; 0x245
 80105ce:	e7e5      	b.n	801059c <__mdiff+0x28>
 80105d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80105d4:	6926      	ldr	r6, [r4, #16]
 80105d6:	60c5      	str	r5, [r0, #12]
 80105d8:	f104 0914 	add.w	r9, r4, #20
 80105dc:	f108 0514 	add.w	r5, r8, #20
 80105e0:	f100 0e14 	add.w	lr, r0, #20
 80105e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80105e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80105ec:	f108 0210 	add.w	r2, r8, #16
 80105f0:	46f2      	mov	sl, lr
 80105f2:	2100      	movs	r1, #0
 80105f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80105f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80105fc:	fa11 f88b 	uxtah	r8, r1, fp
 8010600:	b299      	uxth	r1, r3
 8010602:	0c1b      	lsrs	r3, r3, #16
 8010604:	eba8 0801 	sub.w	r8, r8, r1
 8010608:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801060c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010610:	fa1f f888 	uxth.w	r8, r8
 8010614:	1419      	asrs	r1, r3, #16
 8010616:	454e      	cmp	r6, r9
 8010618:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801061c:	f84a 3b04 	str.w	r3, [sl], #4
 8010620:	d8e8      	bhi.n	80105f4 <__mdiff+0x80>
 8010622:	1b33      	subs	r3, r6, r4
 8010624:	3b15      	subs	r3, #21
 8010626:	f023 0303 	bic.w	r3, r3, #3
 801062a:	3304      	adds	r3, #4
 801062c:	3415      	adds	r4, #21
 801062e:	42a6      	cmp	r6, r4
 8010630:	bf38      	it	cc
 8010632:	2304      	movcc	r3, #4
 8010634:	441d      	add	r5, r3
 8010636:	4473      	add	r3, lr
 8010638:	469e      	mov	lr, r3
 801063a:	462e      	mov	r6, r5
 801063c:	4566      	cmp	r6, ip
 801063e:	d30e      	bcc.n	801065e <__mdiff+0xea>
 8010640:	f10c 0203 	add.w	r2, ip, #3
 8010644:	1b52      	subs	r2, r2, r5
 8010646:	f022 0203 	bic.w	r2, r2, #3
 801064a:	3d03      	subs	r5, #3
 801064c:	45ac      	cmp	ip, r5
 801064e:	bf38      	it	cc
 8010650:	2200      	movcc	r2, #0
 8010652:	4413      	add	r3, r2
 8010654:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010658:	b17a      	cbz	r2, 801067a <__mdiff+0x106>
 801065a:	6107      	str	r7, [r0, #16]
 801065c:	e7a4      	b.n	80105a8 <__mdiff+0x34>
 801065e:	f856 8b04 	ldr.w	r8, [r6], #4
 8010662:	fa11 f288 	uxtah	r2, r1, r8
 8010666:	1414      	asrs	r4, r2, #16
 8010668:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801066c:	b292      	uxth	r2, r2
 801066e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010672:	f84e 2b04 	str.w	r2, [lr], #4
 8010676:	1421      	asrs	r1, r4, #16
 8010678:	e7e0      	b.n	801063c <__mdiff+0xc8>
 801067a:	3f01      	subs	r7, #1
 801067c:	e7ea      	b.n	8010654 <__mdiff+0xe0>
 801067e:	bf00      	nop
 8010680:	08013cfd 	.word	0x08013cfd
 8010684:	08013d6e 	.word	0x08013d6e

08010688 <__ulp>:
 8010688:	b082      	sub	sp, #8
 801068a:	ed8d 0b00 	vstr	d0, [sp]
 801068e:	9a01      	ldr	r2, [sp, #4]
 8010690:	4b0f      	ldr	r3, [pc, #60]	; (80106d0 <__ulp+0x48>)
 8010692:	4013      	ands	r3, r2
 8010694:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8010698:	2b00      	cmp	r3, #0
 801069a:	dc08      	bgt.n	80106ae <__ulp+0x26>
 801069c:	425b      	negs	r3, r3
 801069e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80106a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80106a6:	da04      	bge.n	80106b2 <__ulp+0x2a>
 80106a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80106ac:	4113      	asrs	r3, r2
 80106ae:	2200      	movs	r2, #0
 80106b0:	e008      	b.n	80106c4 <__ulp+0x3c>
 80106b2:	f1a2 0314 	sub.w	r3, r2, #20
 80106b6:	2b1e      	cmp	r3, #30
 80106b8:	bfda      	itte	le
 80106ba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80106be:	40da      	lsrle	r2, r3
 80106c0:	2201      	movgt	r2, #1
 80106c2:	2300      	movs	r3, #0
 80106c4:	4619      	mov	r1, r3
 80106c6:	4610      	mov	r0, r2
 80106c8:	ec41 0b10 	vmov	d0, r0, r1
 80106cc:	b002      	add	sp, #8
 80106ce:	4770      	bx	lr
 80106d0:	7ff00000 	.word	0x7ff00000

080106d4 <__b2d>:
 80106d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106d8:	6906      	ldr	r6, [r0, #16]
 80106da:	f100 0814 	add.w	r8, r0, #20
 80106de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80106e2:	1f37      	subs	r7, r6, #4
 80106e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80106e8:	4610      	mov	r0, r2
 80106ea:	f7ff fd53 	bl	8010194 <__hi0bits>
 80106ee:	f1c0 0320 	rsb	r3, r0, #32
 80106f2:	280a      	cmp	r0, #10
 80106f4:	600b      	str	r3, [r1, #0]
 80106f6:	491b      	ldr	r1, [pc, #108]	; (8010764 <__b2d+0x90>)
 80106f8:	dc15      	bgt.n	8010726 <__b2d+0x52>
 80106fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80106fe:	fa22 f30c 	lsr.w	r3, r2, ip
 8010702:	45b8      	cmp	r8, r7
 8010704:	ea43 0501 	orr.w	r5, r3, r1
 8010708:	bf34      	ite	cc
 801070a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801070e:	2300      	movcs	r3, #0
 8010710:	3015      	adds	r0, #21
 8010712:	fa02 f000 	lsl.w	r0, r2, r0
 8010716:	fa23 f30c 	lsr.w	r3, r3, ip
 801071a:	4303      	orrs	r3, r0
 801071c:	461c      	mov	r4, r3
 801071e:	ec45 4b10 	vmov	d0, r4, r5
 8010722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010726:	45b8      	cmp	r8, r7
 8010728:	bf3a      	itte	cc
 801072a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801072e:	f1a6 0708 	subcc.w	r7, r6, #8
 8010732:	2300      	movcs	r3, #0
 8010734:	380b      	subs	r0, #11
 8010736:	d012      	beq.n	801075e <__b2d+0x8a>
 8010738:	f1c0 0120 	rsb	r1, r0, #32
 801073c:	fa23 f401 	lsr.w	r4, r3, r1
 8010740:	4082      	lsls	r2, r0
 8010742:	4322      	orrs	r2, r4
 8010744:	4547      	cmp	r7, r8
 8010746:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801074a:	bf8c      	ite	hi
 801074c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010750:	2200      	movls	r2, #0
 8010752:	4083      	lsls	r3, r0
 8010754:	40ca      	lsrs	r2, r1
 8010756:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801075a:	4313      	orrs	r3, r2
 801075c:	e7de      	b.n	801071c <__b2d+0x48>
 801075e:	ea42 0501 	orr.w	r5, r2, r1
 8010762:	e7db      	b.n	801071c <__b2d+0x48>
 8010764:	3ff00000 	.word	0x3ff00000

08010768 <__d2b>:
 8010768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801076c:	460f      	mov	r7, r1
 801076e:	2101      	movs	r1, #1
 8010770:	ec59 8b10 	vmov	r8, r9, d0
 8010774:	4616      	mov	r6, r2
 8010776:	f7ff fc1b 	bl	800ffb0 <_Balloc>
 801077a:	4604      	mov	r4, r0
 801077c:	b930      	cbnz	r0, 801078c <__d2b+0x24>
 801077e:	4602      	mov	r2, r0
 8010780:	4b24      	ldr	r3, [pc, #144]	; (8010814 <__d2b+0xac>)
 8010782:	4825      	ldr	r0, [pc, #148]	; (8010818 <__d2b+0xb0>)
 8010784:	f240 310f 	movw	r1, #783	; 0x30f
 8010788:	f000 fb72 	bl	8010e70 <__assert_func>
 801078c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010790:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010794:	bb2d      	cbnz	r5, 80107e2 <__d2b+0x7a>
 8010796:	9301      	str	r3, [sp, #4]
 8010798:	f1b8 0300 	subs.w	r3, r8, #0
 801079c:	d026      	beq.n	80107ec <__d2b+0x84>
 801079e:	4668      	mov	r0, sp
 80107a0:	9300      	str	r3, [sp, #0]
 80107a2:	f7ff fd17 	bl	80101d4 <__lo0bits>
 80107a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80107aa:	b1e8      	cbz	r0, 80107e8 <__d2b+0x80>
 80107ac:	f1c0 0320 	rsb	r3, r0, #32
 80107b0:	fa02 f303 	lsl.w	r3, r2, r3
 80107b4:	430b      	orrs	r3, r1
 80107b6:	40c2      	lsrs	r2, r0
 80107b8:	6163      	str	r3, [r4, #20]
 80107ba:	9201      	str	r2, [sp, #4]
 80107bc:	9b01      	ldr	r3, [sp, #4]
 80107be:	61a3      	str	r3, [r4, #24]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	bf14      	ite	ne
 80107c4:	2202      	movne	r2, #2
 80107c6:	2201      	moveq	r2, #1
 80107c8:	6122      	str	r2, [r4, #16]
 80107ca:	b1bd      	cbz	r5, 80107fc <__d2b+0x94>
 80107cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80107d0:	4405      	add	r5, r0
 80107d2:	603d      	str	r5, [r7, #0]
 80107d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80107d8:	6030      	str	r0, [r6, #0]
 80107da:	4620      	mov	r0, r4
 80107dc:	b003      	add	sp, #12
 80107de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80107e6:	e7d6      	b.n	8010796 <__d2b+0x2e>
 80107e8:	6161      	str	r1, [r4, #20]
 80107ea:	e7e7      	b.n	80107bc <__d2b+0x54>
 80107ec:	a801      	add	r0, sp, #4
 80107ee:	f7ff fcf1 	bl	80101d4 <__lo0bits>
 80107f2:	9b01      	ldr	r3, [sp, #4]
 80107f4:	6163      	str	r3, [r4, #20]
 80107f6:	3020      	adds	r0, #32
 80107f8:	2201      	movs	r2, #1
 80107fa:	e7e5      	b.n	80107c8 <__d2b+0x60>
 80107fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010800:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010804:	6038      	str	r0, [r7, #0]
 8010806:	6918      	ldr	r0, [r3, #16]
 8010808:	f7ff fcc4 	bl	8010194 <__hi0bits>
 801080c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010810:	e7e2      	b.n	80107d8 <__d2b+0x70>
 8010812:	bf00      	nop
 8010814:	08013cfd 	.word	0x08013cfd
 8010818:	08013d6e 	.word	0x08013d6e

0801081c <__ratio>:
 801081c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010820:	4688      	mov	r8, r1
 8010822:	4669      	mov	r1, sp
 8010824:	4681      	mov	r9, r0
 8010826:	f7ff ff55 	bl	80106d4 <__b2d>
 801082a:	a901      	add	r1, sp, #4
 801082c:	4640      	mov	r0, r8
 801082e:	ec55 4b10 	vmov	r4, r5, d0
 8010832:	f7ff ff4f 	bl	80106d4 <__b2d>
 8010836:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801083a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801083e:	eba3 0c02 	sub.w	ip, r3, r2
 8010842:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010846:	1a9b      	subs	r3, r3, r2
 8010848:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801084c:	ec51 0b10 	vmov	r0, r1, d0
 8010850:	2b00      	cmp	r3, #0
 8010852:	bfd6      	itet	le
 8010854:	460a      	movle	r2, r1
 8010856:	462a      	movgt	r2, r5
 8010858:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801085c:	468b      	mov	fp, r1
 801085e:	462f      	mov	r7, r5
 8010860:	bfd4      	ite	le
 8010862:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010866:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801086a:	4620      	mov	r0, r4
 801086c:	ee10 2a10 	vmov	r2, s0
 8010870:	465b      	mov	r3, fp
 8010872:	4639      	mov	r1, r7
 8010874:	f7ef ffea 	bl	800084c <__aeabi_ddiv>
 8010878:	ec41 0b10 	vmov	d0, r0, r1
 801087c:	b003      	add	sp, #12
 801087e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010882 <__copybits>:
 8010882:	3901      	subs	r1, #1
 8010884:	b570      	push	{r4, r5, r6, lr}
 8010886:	1149      	asrs	r1, r1, #5
 8010888:	6914      	ldr	r4, [r2, #16]
 801088a:	3101      	adds	r1, #1
 801088c:	f102 0314 	add.w	r3, r2, #20
 8010890:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010894:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010898:	1f05      	subs	r5, r0, #4
 801089a:	42a3      	cmp	r3, r4
 801089c:	d30c      	bcc.n	80108b8 <__copybits+0x36>
 801089e:	1aa3      	subs	r3, r4, r2
 80108a0:	3b11      	subs	r3, #17
 80108a2:	f023 0303 	bic.w	r3, r3, #3
 80108a6:	3211      	adds	r2, #17
 80108a8:	42a2      	cmp	r2, r4
 80108aa:	bf88      	it	hi
 80108ac:	2300      	movhi	r3, #0
 80108ae:	4418      	add	r0, r3
 80108b0:	2300      	movs	r3, #0
 80108b2:	4288      	cmp	r0, r1
 80108b4:	d305      	bcc.n	80108c2 <__copybits+0x40>
 80108b6:	bd70      	pop	{r4, r5, r6, pc}
 80108b8:	f853 6b04 	ldr.w	r6, [r3], #4
 80108bc:	f845 6f04 	str.w	r6, [r5, #4]!
 80108c0:	e7eb      	b.n	801089a <__copybits+0x18>
 80108c2:	f840 3b04 	str.w	r3, [r0], #4
 80108c6:	e7f4      	b.n	80108b2 <__copybits+0x30>

080108c8 <__any_on>:
 80108c8:	f100 0214 	add.w	r2, r0, #20
 80108cc:	6900      	ldr	r0, [r0, #16]
 80108ce:	114b      	asrs	r3, r1, #5
 80108d0:	4298      	cmp	r0, r3
 80108d2:	b510      	push	{r4, lr}
 80108d4:	db11      	blt.n	80108fa <__any_on+0x32>
 80108d6:	dd0a      	ble.n	80108ee <__any_on+0x26>
 80108d8:	f011 011f 	ands.w	r1, r1, #31
 80108dc:	d007      	beq.n	80108ee <__any_on+0x26>
 80108de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80108e2:	fa24 f001 	lsr.w	r0, r4, r1
 80108e6:	fa00 f101 	lsl.w	r1, r0, r1
 80108ea:	428c      	cmp	r4, r1
 80108ec:	d10b      	bne.n	8010906 <__any_on+0x3e>
 80108ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80108f2:	4293      	cmp	r3, r2
 80108f4:	d803      	bhi.n	80108fe <__any_on+0x36>
 80108f6:	2000      	movs	r0, #0
 80108f8:	bd10      	pop	{r4, pc}
 80108fa:	4603      	mov	r3, r0
 80108fc:	e7f7      	b.n	80108ee <__any_on+0x26>
 80108fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010902:	2900      	cmp	r1, #0
 8010904:	d0f5      	beq.n	80108f2 <__any_on+0x2a>
 8010906:	2001      	movs	r0, #1
 8010908:	e7f6      	b.n	80108f8 <__any_on+0x30>
	...

0801090c <_strtol_l.constprop.0>:
 801090c:	2b01      	cmp	r3, #1
 801090e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010912:	d001      	beq.n	8010918 <_strtol_l.constprop.0+0xc>
 8010914:	2b24      	cmp	r3, #36	; 0x24
 8010916:	d906      	bls.n	8010926 <_strtol_l.constprop.0+0x1a>
 8010918:	f7fe f8cc 	bl	800eab4 <__errno>
 801091c:	2316      	movs	r3, #22
 801091e:	6003      	str	r3, [r0, #0]
 8010920:	2000      	movs	r0, #0
 8010922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010926:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010a0c <_strtol_l.constprop.0+0x100>
 801092a:	460d      	mov	r5, r1
 801092c:	462e      	mov	r6, r5
 801092e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010932:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8010936:	f017 0708 	ands.w	r7, r7, #8
 801093a:	d1f7      	bne.n	801092c <_strtol_l.constprop.0+0x20>
 801093c:	2c2d      	cmp	r4, #45	; 0x2d
 801093e:	d132      	bne.n	80109a6 <_strtol_l.constprop.0+0x9a>
 8010940:	782c      	ldrb	r4, [r5, #0]
 8010942:	2701      	movs	r7, #1
 8010944:	1cb5      	adds	r5, r6, #2
 8010946:	2b00      	cmp	r3, #0
 8010948:	d05b      	beq.n	8010a02 <_strtol_l.constprop.0+0xf6>
 801094a:	2b10      	cmp	r3, #16
 801094c:	d109      	bne.n	8010962 <_strtol_l.constprop.0+0x56>
 801094e:	2c30      	cmp	r4, #48	; 0x30
 8010950:	d107      	bne.n	8010962 <_strtol_l.constprop.0+0x56>
 8010952:	782c      	ldrb	r4, [r5, #0]
 8010954:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010958:	2c58      	cmp	r4, #88	; 0x58
 801095a:	d14d      	bne.n	80109f8 <_strtol_l.constprop.0+0xec>
 801095c:	786c      	ldrb	r4, [r5, #1]
 801095e:	2310      	movs	r3, #16
 8010960:	3502      	adds	r5, #2
 8010962:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010966:	f108 38ff 	add.w	r8, r8, #4294967295
 801096a:	f04f 0e00 	mov.w	lr, #0
 801096e:	fbb8 f9f3 	udiv	r9, r8, r3
 8010972:	4676      	mov	r6, lr
 8010974:	fb03 8a19 	mls	sl, r3, r9, r8
 8010978:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801097c:	f1bc 0f09 	cmp.w	ip, #9
 8010980:	d816      	bhi.n	80109b0 <_strtol_l.constprop.0+0xa4>
 8010982:	4664      	mov	r4, ip
 8010984:	42a3      	cmp	r3, r4
 8010986:	dd24      	ble.n	80109d2 <_strtol_l.constprop.0+0xc6>
 8010988:	f1be 3fff 	cmp.w	lr, #4294967295
 801098c:	d008      	beq.n	80109a0 <_strtol_l.constprop.0+0x94>
 801098e:	45b1      	cmp	r9, r6
 8010990:	d31c      	bcc.n	80109cc <_strtol_l.constprop.0+0xc0>
 8010992:	d101      	bne.n	8010998 <_strtol_l.constprop.0+0x8c>
 8010994:	45a2      	cmp	sl, r4
 8010996:	db19      	blt.n	80109cc <_strtol_l.constprop.0+0xc0>
 8010998:	fb06 4603 	mla	r6, r6, r3, r4
 801099c:	f04f 0e01 	mov.w	lr, #1
 80109a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80109a4:	e7e8      	b.n	8010978 <_strtol_l.constprop.0+0x6c>
 80109a6:	2c2b      	cmp	r4, #43	; 0x2b
 80109a8:	bf04      	itt	eq
 80109aa:	782c      	ldrbeq	r4, [r5, #0]
 80109ac:	1cb5      	addeq	r5, r6, #2
 80109ae:	e7ca      	b.n	8010946 <_strtol_l.constprop.0+0x3a>
 80109b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80109b4:	f1bc 0f19 	cmp.w	ip, #25
 80109b8:	d801      	bhi.n	80109be <_strtol_l.constprop.0+0xb2>
 80109ba:	3c37      	subs	r4, #55	; 0x37
 80109bc:	e7e2      	b.n	8010984 <_strtol_l.constprop.0+0x78>
 80109be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80109c2:	f1bc 0f19 	cmp.w	ip, #25
 80109c6:	d804      	bhi.n	80109d2 <_strtol_l.constprop.0+0xc6>
 80109c8:	3c57      	subs	r4, #87	; 0x57
 80109ca:	e7db      	b.n	8010984 <_strtol_l.constprop.0+0x78>
 80109cc:	f04f 3eff 	mov.w	lr, #4294967295
 80109d0:	e7e6      	b.n	80109a0 <_strtol_l.constprop.0+0x94>
 80109d2:	f1be 3fff 	cmp.w	lr, #4294967295
 80109d6:	d105      	bne.n	80109e4 <_strtol_l.constprop.0+0xd8>
 80109d8:	2322      	movs	r3, #34	; 0x22
 80109da:	6003      	str	r3, [r0, #0]
 80109dc:	4646      	mov	r6, r8
 80109de:	b942      	cbnz	r2, 80109f2 <_strtol_l.constprop.0+0xe6>
 80109e0:	4630      	mov	r0, r6
 80109e2:	e79e      	b.n	8010922 <_strtol_l.constprop.0+0x16>
 80109e4:	b107      	cbz	r7, 80109e8 <_strtol_l.constprop.0+0xdc>
 80109e6:	4276      	negs	r6, r6
 80109e8:	2a00      	cmp	r2, #0
 80109ea:	d0f9      	beq.n	80109e0 <_strtol_l.constprop.0+0xd4>
 80109ec:	f1be 0f00 	cmp.w	lr, #0
 80109f0:	d000      	beq.n	80109f4 <_strtol_l.constprop.0+0xe8>
 80109f2:	1e69      	subs	r1, r5, #1
 80109f4:	6011      	str	r1, [r2, #0]
 80109f6:	e7f3      	b.n	80109e0 <_strtol_l.constprop.0+0xd4>
 80109f8:	2430      	movs	r4, #48	; 0x30
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d1b1      	bne.n	8010962 <_strtol_l.constprop.0+0x56>
 80109fe:	2308      	movs	r3, #8
 8010a00:	e7af      	b.n	8010962 <_strtol_l.constprop.0+0x56>
 8010a02:	2c30      	cmp	r4, #48	; 0x30
 8010a04:	d0a5      	beq.n	8010952 <_strtol_l.constprop.0+0x46>
 8010a06:	230a      	movs	r3, #10
 8010a08:	e7ab      	b.n	8010962 <_strtol_l.constprop.0+0x56>
 8010a0a:	bf00      	nop
 8010a0c:	08013ec5 	.word	0x08013ec5

08010a10 <_strtol_r>:
 8010a10:	f7ff bf7c 	b.w	801090c <_strtol_l.constprop.0>

08010a14 <__ascii_wctomb>:
 8010a14:	b149      	cbz	r1, 8010a2a <__ascii_wctomb+0x16>
 8010a16:	2aff      	cmp	r2, #255	; 0xff
 8010a18:	bf85      	ittet	hi
 8010a1a:	238a      	movhi	r3, #138	; 0x8a
 8010a1c:	6003      	strhi	r3, [r0, #0]
 8010a1e:	700a      	strbls	r2, [r1, #0]
 8010a20:	f04f 30ff 	movhi.w	r0, #4294967295
 8010a24:	bf98      	it	ls
 8010a26:	2001      	movls	r0, #1
 8010a28:	4770      	bx	lr
 8010a2a:	4608      	mov	r0, r1
 8010a2c:	4770      	bx	lr

08010a2e <__ssputs_r>:
 8010a2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a32:	688e      	ldr	r6, [r1, #8]
 8010a34:	461f      	mov	r7, r3
 8010a36:	42be      	cmp	r6, r7
 8010a38:	680b      	ldr	r3, [r1, #0]
 8010a3a:	4682      	mov	sl, r0
 8010a3c:	460c      	mov	r4, r1
 8010a3e:	4690      	mov	r8, r2
 8010a40:	d82c      	bhi.n	8010a9c <__ssputs_r+0x6e>
 8010a42:	898a      	ldrh	r2, [r1, #12]
 8010a44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010a48:	d026      	beq.n	8010a98 <__ssputs_r+0x6a>
 8010a4a:	6965      	ldr	r5, [r4, #20]
 8010a4c:	6909      	ldr	r1, [r1, #16]
 8010a4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a52:	eba3 0901 	sub.w	r9, r3, r1
 8010a56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a5a:	1c7b      	adds	r3, r7, #1
 8010a5c:	444b      	add	r3, r9
 8010a5e:	106d      	asrs	r5, r5, #1
 8010a60:	429d      	cmp	r5, r3
 8010a62:	bf38      	it	cc
 8010a64:	461d      	movcc	r5, r3
 8010a66:	0553      	lsls	r3, r2, #21
 8010a68:	d527      	bpl.n	8010aba <__ssputs_r+0x8c>
 8010a6a:	4629      	mov	r1, r5
 8010a6c:	f7fc f968 	bl	800cd40 <_malloc_r>
 8010a70:	4606      	mov	r6, r0
 8010a72:	b360      	cbz	r0, 8010ace <__ssputs_r+0xa0>
 8010a74:	6921      	ldr	r1, [r4, #16]
 8010a76:	464a      	mov	r2, r9
 8010a78:	f7fe f849 	bl	800eb0e <memcpy>
 8010a7c:	89a3      	ldrh	r3, [r4, #12]
 8010a7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a86:	81a3      	strh	r3, [r4, #12]
 8010a88:	6126      	str	r6, [r4, #16]
 8010a8a:	6165      	str	r5, [r4, #20]
 8010a8c:	444e      	add	r6, r9
 8010a8e:	eba5 0509 	sub.w	r5, r5, r9
 8010a92:	6026      	str	r6, [r4, #0]
 8010a94:	60a5      	str	r5, [r4, #8]
 8010a96:	463e      	mov	r6, r7
 8010a98:	42be      	cmp	r6, r7
 8010a9a:	d900      	bls.n	8010a9e <__ssputs_r+0x70>
 8010a9c:	463e      	mov	r6, r7
 8010a9e:	6820      	ldr	r0, [r4, #0]
 8010aa0:	4632      	mov	r2, r6
 8010aa2:	4641      	mov	r1, r8
 8010aa4:	f000 f9ca 	bl	8010e3c <memmove>
 8010aa8:	68a3      	ldr	r3, [r4, #8]
 8010aaa:	1b9b      	subs	r3, r3, r6
 8010aac:	60a3      	str	r3, [r4, #8]
 8010aae:	6823      	ldr	r3, [r4, #0]
 8010ab0:	4433      	add	r3, r6
 8010ab2:	6023      	str	r3, [r4, #0]
 8010ab4:	2000      	movs	r0, #0
 8010ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aba:	462a      	mov	r2, r5
 8010abc:	f000 fa0c 	bl	8010ed8 <_realloc_r>
 8010ac0:	4606      	mov	r6, r0
 8010ac2:	2800      	cmp	r0, #0
 8010ac4:	d1e0      	bne.n	8010a88 <__ssputs_r+0x5a>
 8010ac6:	6921      	ldr	r1, [r4, #16]
 8010ac8:	4650      	mov	r0, sl
 8010aca:	f7fe febb 	bl	800f844 <_free_r>
 8010ace:	230c      	movs	r3, #12
 8010ad0:	f8ca 3000 	str.w	r3, [sl]
 8010ad4:	89a3      	ldrh	r3, [r4, #12]
 8010ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ada:	81a3      	strh	r3, [r4, #12]
 8010adc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ae0:	e7e9      	b.n	8010ab6 <__ssputs_r+0x88>
	...

08010ae4 <_svfiprintf_r>:
 8010ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ae8:	4698      	mov	r8, r3
 8010aea:	898b      	ldrh	r3, [r1, #12]
 8010aec:	061b      	lsls	r3, r3, #24
 8010aee:	b09d      	sub	sp, #116	; 0x74
 8010af0:	4607      	mov	r7, r0
 8010af2:	460d      	mov	r5, r1
 8010af4:	4614      	mov	r4, r2
 8010af6:	d50e      	bpl.n	8010b16 <_svfiprintf_r+0x32>
 8010af8:	690b      	ldr	r3, [r1, #16]
 8010afa:	b963      	cbnz	r3, 8010b16 <_svfiprintf_r+0x32>
 8010afc:	2140      	movs	r1, #64	; 0x40
 8010afe:	f7fc f91f 	bl	800cd40 <_malloc_r>
 8010b02:	6028      	str	r0, [r5, #0]
 8010b04:	6128      	str	r0, [r5, #16]
 8010b06:	b920      	cbnz	r0, 8010b12 <_svfiprintf_r+0x2e>
 8010b08:	230c      	movs	r3, #12
 8010b0a:	603b      	str	r3, [r7, #0]
 8010b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b10:	e0d0      	b.n	8010cb4 <_svfiprintf_r+0x1d0>
 8010b12:	2340      	movs	r3, #64	; 0x40
 8010b14:	616b      	str	r3, [r5, #20]
 8010b16:	2300      	movs	r3, #0
 8010b18:	9309      	str	r3, [sp, #36]	; 0x24
 8010b1a:	2320      	movs	r3, #32
 8010b1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b20:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b24:	2330      	movs	r3, #48	; 0x30
 8010b26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010ccc <_svfiprintf_r+0x1e8>
 8010b2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b2e:	f04f 0901 	mov.w	r9, #1
 8010b32:	4623      	mov	r3, r4
 8010b34:	469a      	mov	sl, r3
 8010b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b3a:	b10a      	cbz	r2, 8010b40 <_svfiprintf_r+0x5c>
 8010b3c:	2a25      	cmp	r2, #37	; 0x25
 8010b3e:	d1f9      	bne.n	8010b34 <_svfiprintf_r+0x50>
 8010b40:	ebba 0b04 	subs.w	fp, sl, r4
 8010b44:	d00b      	beq.n	8010b5e <_svfiprintf_r+0x7a>
 8010b46:	465b      	mov	r3, fp
 8010b48:	4622      	mov	r2, r4
 8010b4a:	4629      	mov	r1, r5
 8010b4c:	4638      	mov	r0, r7
 8010b4e:	f7ff ff6e 	bl	8010a2e <__ssputs_r>
 8010b52:	3001      	adds	r0, #1
 8010b54:	f000 80a9 	beq.w	8010caa <_svfiprintf_r+0x1c6>
 8010b58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b5a:	445a      	add	r2, fp
 8010b5c:	9209      	str	r2, [sp, #36]	; 0x24
 8010b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	f000 80a1 	beq.w	8010caa <_svfiprintf_r+0x1c6>
 8010b68:	2300      	movs	r3, #0
 8010b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b72:	f10a 0a01 	add.w	sl, sl, #1
 8010b76:	9304      	str	r3, [sp, #16]
 8010b78:	9307      	str	r3, [sp, #28]
 8010b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8010b80:	4654      	mov	r4, sl
 8010b82:	2205      	movs	r2, #5
 8010b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b88:	4850      	ldr	r0, [pc, #320]	; (8010ccc <_svfiprintf_r+0x1e8>)
 8010b8a:	f7ef fb21 	bl	80001d0 <memchr>
 8010b8e:	9a04      	ldr	r2, [sp, #16]
 8010b90:	b9d8      	cbnz	r0, 8010bca <_svfiprintf_r+0xe6>
 8010b92:	06d0      	lsls	r0, r2, #27
 8010b94:	bf44      	itt	mi
 8010b96:	2320      	movmi	r3, #32
 8010b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b9c:	0711      	lsls	r1, r2, #28
 8010b9e:	bf44      	itt	mi
 8010ba0:	232b      	movmi	r3, #43	; 0x2b
 8010ba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8010baa:	2b2a      	cmp	r3, #42	; 0x2a
 8010bac:	d015      	beq.n	8010bda <_svfiprintf_r+0xf6>
 8010bae:	9a07      	ldr	r2, [sp, #28]
 8010bb0:	4654      	mov	r4, sl
 8010bb2:	2000      	movs	r0, #0
 8010bb4:	f04f 0c0a 	mov.w	ip, #10
 8010bb8:	4621      	mov	r1, r4
 8010bba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bbe:	3b30      	subs	r3, #48	; 0x30
 8010bc0:	2b09      	cmp	r3, #9
 8010bc2:	d94d      	bls.n	8010c60 <_svfiprintf_r+0x17c>
 8010bc4:	b1b0      	cbz	r0, 8010bf4 <_svfiprintf_r+0x110>
 8010bc6:	9207      	str	r2, [sp, #28]
 8010bc8:	e014      	b.n	8010bf4 <_svfiprintf_r+0x110>
 8010bca:	eba0 0308 	sub.w	r3, r0, r8
 8010bce:	fa09 f303 	lsl.w	r3, r9, r3
 8010bd2:	4313      	orrs	r3, r2
 8010bd4:	9304      	str	r3, [sp, #16]
 8010bd6:	46a2      	mov	sl, r4
 8010bd8:	e7d2      	b.n	8010b80 <_svfiprintf_r+0x9c>
 8010bda:	9b03      	ldr	r3, [sp, #12]
 8010bdc:	1d19      	adds	r1, r3, #4
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	9103      	str	r1, [sp, #12]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	bfbb      	ittet	lt
 8010be6:	425b      	neglt	r3, r3
 8010be8:	f042 0202 	orrlt.w	r2, r2, #2
 8010bec:	9307      	strge	r3, [sp, #28]
 8010bee:	9307      	strlt	r3, [sp, #28]
 8010bf0:	bfb8      	it	lt
 8010bf2:	9204      	strlt	r2, [sp, #16]
 8010bf4:	7823      	ldrb	r3, [r4, #0]
 8010bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8010bf8:	d10c      	bne.n	8010c14 <_svfiprintf_r+0x130>
 8010bfa:	7863      	ldrb	r3, [r4, #1]
 8010bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8010bfe:	d134      	bne.n	8010c6a <_svfiprintf_r+0x186>
 8010c00:	9b03      	ldr	r3, [sp, #12]
 8010c02:	1d1a      	adds	r2, r3, #4
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	9203      	str	r2, [sp, #12]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	bfb8      	it	lt
 8010c0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c10:	3402      	adds	r4, #2
 8010c12:	9305      	str	r3, [sp, #20]
 8010c14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010cdc <_svfiprintf_r+0x1f8>
 8010c18:	7821      	ldrb	r1, [r4, #0]
 8010c1a:	2203      	movs	r2, #3
 8010c1c:	4650      	mov	r0, sl
 8010c1e:	f7ef fad7 	bl	80001d0 <memchr>
 8010c22:	b138      	cbz	r0, 8010c34 <_svfiprintf_r+0x150>
 8010c24:	9b04      	ldr	r3, [sp, #16]
 8010c26:	eba0 000a 	sub.w	r0, r0, sl
 8010c2a:	2240      	movs	r2, #64	; 0x40
 8010c2c:	4082      	lsls	r2, r0
 8010c2e:	4313      	orrs	r3, r2
 8010c30:	3401      	adds	r4, #1
 8010c32:	9304      	str	r3, [sp, #16]
 8010c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c38:	4825      	ldr	r0, [pc, #148]	; (8010cd0 <_svfiprintf_r+0x1ec>)
 8010c3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c3e:	2206      	movs	r2, #6
 8010c40:	f7ef fac6 	bl	80001d0 <memchr>
 8010c44:	2800      	cmp	r0, #0
 8010c46:	d038      	beq.n	8010cba <_svfiprintf_r+0x1d6>
 8010c48:	4b22      	ldr	r3, [pc, #136]	; (8010cd4 <_svfiprintf_r+0x1f0>)
 8010c4a:	bb1b      	cbnz	r3, 8010c94 <_svfiprintf_r+0x1b0>
 8010c4c:	9b03      	ldr	r3, [sp, #12]
 8010c4e:	3307      	adds	r3, #7
 8010c50:	f023 0307 	bic.w	r3, r3, #7
 8010c54:	3308      	adds	r3, #8
 8010c56:	9303      	str	r3, [sp, #12]
 8010c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c5a:	4433      	add	r3, r6
 8010c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8010c5e:	e768      	b.n	8010b32 <_svfiprintf_r+0x4e>
 8010c60:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c64:	460c      	mov	r4, r1
 8010c66:	2001      	movs	r0, #1
 8010c68:	e7a6      	b.n	8010bb8 <_svfiprintf_r+0xd4>
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	3401      	adds	r4, #1
 8010c6e:	9305      	str	r3, [sp, #20]
 8010c70:	4619      	mov	r1, r3
 8010c72:	f04f 0c0a 	mov.w	ip, #10
 8010c76:	4620      	mov	r0, r4
 8010c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c7c:	3a30      	subs	r2, #48	; 0x30
 8010c7e:	2a09      	cmp	r2, #9
 8010c80:	d903      	bls.n	8010c8a <_svfiprintf_r+0x1a6>
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d0c6      	beq.n	8010c14 <_svfiprintf_r+0x130>
 8010c86:	9105      	str	r1, [sp, #20]
 8010c88:	e7c4      	b.n	8010c14 <_svfiprintf_r+0x130>
 8010c8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c8e:	4604      	mov	r4, r0
 8010c90:	2301      	movs	r3, #1
 8010c92:	e7f0      	b.n	8010c76 <_svfiprintf_r+0x192>
 8010c94:	ab03      	add	r3, sp, #12
 8010c96:	9300      	str	r3, [sp, #0]
 8010c98:	462a      	mov	r2, r5
 8010c9a:	4b0f      	ldr	r3, [pc, #60]	; (8010cd8 <_svfiprintf_r+0x1f4>)
 8010c9c:	a904      	add	r1, sp, #16
 8010c9e:	4638      	mov	r0, r7
 8010ca0:	f7fc ff98 	bl	800dbd4 <_printf_float>
 8010ca4:	1c42      	adds	r2, r0, #1
 8010ca6:	4606      	mov	r6, r0
 8010ca8:	d1d6      	bne.n	8010c58 <_svfiprintf_r+0x174>
 8010caa:	89ab      	ldrh	r3, [r5, #12]
 8010cac:	065b      	lsls	r3, r3, #25
 8010cae:	f53f af2d 	bmi.w	8010b0c <_svfiprintf_r+0x28>
 8010cb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010cb4:	b01d      	add	sp, #116	; 0x74
 8010cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cba:	ab03      	add	r3, sp, #12
 8010cbc:	9300      	str	r3, [sp, #0]
 8010cbe:	462a      	mov	r2, r5
 8010cc0:	4b05      	ldr	r3, [pc, #20]	; (8010cd8 <_svfiprintf_r+0x1f4>)
 8010cc2:	a904      	add	r1, sp, #16
 8010cc4:	4638      	mov	r0, r7
 8010cc6:	f7fd fa29 	bl	800e11c <_printf_i>
 8010cca:	e7eb      	b.n	8010ca4 <_svfiprintf_r+0x1c0>
 8010ccc:	08013fc5 	.word	0x08013fc5
 8010cd0:	08013fcf 	.word	0x08013fcf
 8010cd4:	0800dbd5 	.word	0x0800dbd5
 8010cd8:	08010a2f 	.word	0x08010a2f
 8010cdc:	08013fcb 	.word	0x08013fcb

08010ce0 <__sflush_r>:
 8010ce0:	898a      	ldrh	r2, [r1, #12]
 8010ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ce6:	4605      	mov	r5, r0
 8010ce8:	0710      	lsls	r0, r2, #28
 8010cea:	460c      	mov	r4, r1
 8010cec:	d458      	bmi.n	8010da0 <__sflush_r+0xc0>
 8010cee:	684b      	ldr	r3, [r1, #4]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	dc05      	bgt.n	8010d00 <__sflush_r+0x20>
 8010cf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	dc02      	bgt.n	8010d00 <__sflush_r+0x20>
 8010cfa:	2000      	movs	r0, #0
 8010cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d02:	2e00      	cmp	r6, #0
 8010d04:	d0f9      	beq.n	8010cfa <__sflush_r+0x1a>
 8010d06:	2300      	movs	r3, #0
 8010d08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010d0c:	682f      	ldr	r7, [r5, #0]
 8010d0e:	6a21      	ldr	r1, [r4, #32]
 8010d10:	602b      	str	r3, [r5, #0]
 8010d12:	d032      	beq.n	8010d7a <__sflush_r+0x9a>
 8010d14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010d16:	89a3      	ldrh	r3, [r4, #12]
 8010d18:	075a      	lsls	r2, r3, #29
 8010d1a:	d505      	bpl.n	8010d28 <__sflush_r+0x48>
 8010d1c:	6863      	ldr	r3, [r4, #4]
 8010d1e:	1ac0      	subs	r0, r0, r3
 8010d20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010d22:	b10b      	cbz	r3, 8010d28 <__sflush_r+0x48>
 8010d24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010d26:	1ac0      	subs	r0, r0, r3
 8010d28:	2300      	movs	r3, #0
 8010d2a:	4602      	mov	r2, r0
 8010d2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d2e:	6a21      	ldr	r1, [r4, #32]
 8010d30:	4628      	mov	r0, r5
 8010d32:	47b0      	blx	r6
 8010d34:	1c43      	adds	r3, r0, #1
 8010d36:	89a3      	ldrh	r3, [r4, #12]
 8010d38:	d106      	bne.n	8010d48 <__sflush_r+0x68>
 8010d3a:	6829      	ldr	r1, [r5, #0]
 8010d3c:	291d      	cmp	r1, #29
 8010d3e:	d82b      	bhi.n	8010d98 <__sflush_r+0xb8>
 8010d40:	4a29      	ldr	r2, [pc, #164]	; (8010de8 <__sflush_r+0x108>)
 8010d42:	410a      	asrs	r2, r1
 8010d44:	07d6      	lsls	r6, r2, #31
 8010d46:	d427      	bmi.n	8010d98 <__sflush_r+0xb8>
 8010d48:	2200      	movs	r2, #0
 8010d4a:	6062      	str	r2, [r4, #4]
 8010d4c:	04d9      	lsls	r1, r3, #19
 8010d4e:	6922      	ldr	r2, [r4, #16]
 8010d50:	6022      	str	r2, [r4, #0]
 8010d52:	d504      	bpl.n	8010d5e <__sflush_r+0x7e>
 8010d54:	1c42      	adds	r2, r0, #1
 8010d56:	d101      	bne.n	8010d5c <__sflush_r+0x7c>
 8010d58:	682b      	ldr	r3, [r5, #0]
 8010d5a:	b903      	cbnz	r3, 8010d5e <__sflush_r+0x7e>
 8010d5c:	6560      	str	r0, [r4, #84]	; 0x54
 8010d5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d60:	602f      	str	r7, [r5, #0]
 8010d62:	2900      	cmp	r1, #0
 8010d64:	d0c9      	beq.n	8010cfa <__sflush_r+0x1a>
 8010d66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d6a:	4299      	cmp	r1, r3
 8010d6c:	d002      	beq.n	8010d74 <__sflush_r+0x94>
 8010d6e:	4628      	mov	r0, r5
 8010d70:	f7fe fd68 	bl	800f844 <_free_r>
 8010d74:	2000      	movs	r0, #0
 8010d76:	6360      	str	r0, [r4, #52]	; 0x34
 8010d78:	e7c0      	b.n	8010cfc <__sflush_r+0x1c>
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	4628      	mov	r0, r5
 8010d7e:	47b0      	blx	r6
 8010d80:	1c41      	adds	r1, r0, #1
 8010d82:	d1c8      	bne.n	8010d16 <__sflush_r+0x36>
 8010d84:	682b      	ldr	r3, [r5, #0]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d0c5      	beq.n	8010d16 <__sflush_r+0x36>
 8010d8a:	2b1d      	cmp	r3, #29
 8010d8c:	d001      	beq.n	8010d92 <__sflush_r+0xb2>
 8010d8e:	2b16      	cmp	r3, #22
 8010d90:	d101      	bne.n	8010d96 <__sflush_r+0xb6>
 8010d92:	602f      	str	r7, [r5, #0]
 8010d94:	e7b1      	b.n	8010cfa <__sflush_r+0x1a>
 8010d96:	89a3      	ldrh	r3, [r4, #12]
 8010d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d9c:	81a3      	strh	r3, [r4, #12]
 8010d9e:	e7ad      	b.n	8010cfc <__sflush_r+0x1c>
 8010da0:	690f      	ldr	r7, [r1, #16]
 8010da2:	2f00      	cmp	r7, #0
 8010da4:	d0a9      	beq.n	8010cfa <__sflush_r+0x1a>
 8010da6:	0793      	lsls	r3, r2, #30
 8010da8:	680e      	ldr	r6, [r1, #0]
 8010daa:	bf08      	it	eq
 8010dac:	694b      	ldreq	r3, [r1, #20]
 8010dae:	600f      	str	r7, [r1, #0]
 8010db0:	bf18      	it	ne
 8010db2:	2300      	movne	r3, #0
 8010db4:	eba6 0807 	sub.w	r8, r6, r7
 8010db8:	608b      	str	r3, [r1, #8]
 8010dba:	f1b8 0f00 	cmp.w	r8, #0
 8010dbe:	dd9c      	ble.n	8010cfa <__sflush_r+0x1a>
 8010dc0:	6a21      	ldr	r1, [r4, #32]
 8010dc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010dc4:	4643      	mov	r3, r8
 8010dc6:	463a      	mov	r2, r7
 8010dc8:	4628      	mov	r0, r5
 8010dca:	47b0      	blx	r6
 8010dcc:	2800      	cmp	r0, #0
 8010dce:	dc06      	bgt.n	8010dde <__sflush_r+0xfe>
 8010dd0:	89a3      	ldrh	r3, [r4, #12]
 8010dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dd6:	81a3      	strh	r3, [r4, #12]
 8010dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8010ddc:	e78e      	b.n	8010cfc <__sflush_r+0x1c>
 8010dde:	4407      	add	r7, r0
 8010de0:	eba8 0800 	sub.w	r8, r8, r0
 8010de4:	e7e9      	b.n	8010dba <__sflush_r+0xda>
 8010de6:	bf00      	nop
 8010de8:	dfbffffe 	.word	0xdfbffffe

08010dec <_fflush_r>:
 8010dec:	b538      	push	{r3, r4, r5, lr}
 8010dee:	690b      	ldr	r3, [r1, #16]
 8010df0:	4605      	mov	r5, r0
 8010df2:	460c      	mov	r4, r1
 8010df4:	b913      	cbnz	r3, 8010dfc <_fflush_r+0x10>
 8010df6:	2500      	movs	r5, #0
 8010df8:	4628      	mov	r0, r5
 8010dfa:	bd38      	pop	{r3, r4, r5, pc}
 8010dfc:	b118      	cbz	r0, 8010e06 <_fflush_r+0x1a>
 8010dfe:	6a03      	ldr	r3, [r0, #32]
 8010e00:	b90b      	cbnz	r3, 8010e06 <_fflush_r+0x1a>
 8010e02:	f7fd fd49 	bl	800e898 <__sinit>
 8010e06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d0f3      	beq.n	8010df6 <_fflush_r+0xa>
 8010e0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010e10:	07d0      	lsls	r0, r2, #31
 8010e12:	d404      	bmi.n	8010e1e <_fflush_r+0x32>
 8010e14:	0599      	lsls	r1, r3, #22
 8010e16:	d402      	bmi.n	8010e1e <_fflush_r+0x32>
 8010e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e1a:	f7fd fe76 	bl	800eb0a <__retarget_lock_acquire_recursive>
 8010e1e:	4628      	mov	r0, r5
 8010e20:	4621      	mov	r1, r4
 8010e22:	f7ff ff5d 	bl	8010ce0 <__sflush_r>
 8010e26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e28:	07da      	lsls	r2, r3, #31
 8010e2a:	4605      	mov	r5, r0
 8010e2c:	d4e4      	bmi.n	8010df8 <_fflush_r+0xc>
 8010e2e:	89a3      	ldrh	r3, [r4, #12]
 8010e30:	059b      	lsls	r3, r3, #22
 8010e32:	d4e1      	bmi.n	8010df8 <_fflush_r+0xc>
 8010e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e36:	f7fd fe69 	bl	800eb0c <__retarget_lock_release_recursive>
 8010e3a:	e7dd      	b.n	8010df8 <_fflush_r+0xc>

08010e3c <memmove>:
 8010e3c:	4288      	cmp	r0, r1
 8010e3e:	b510      	push	{r4, lr}
 8010e40:	eb01 0402 	add.w	r4, r1, r2
 8010e44:	d902      	bls.n	8010e4c <memmove+0x10>
 8010e46:	4284      	cmp	r4, r0
 8010e48:	4623      	mov	r3, r4
 8010e4a:	d807      	bhi.n	8010e5c <memmove+0x20>
 8010e4c:	1e43      	subs	r3, r0, #1
 8010e4e:	42a1      	cmp	r1, r4
 8010e50:	d008      	beq.n	8010e64 <memmove+0x28>
 8010e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010e56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010e5a:	e7f8      	b.n	8010e4e <memmove+0x12>
 8010e5c:	4402      	add	r2, r0
 8010e5e:	4601      	mov	r1, r0
 8010e60:	428a      	cmp	r2, r1
 8010e62:	d100      	bne.n	8010e66 <memmove+0x2a>
 8010e64:	bd10      	pop	{r4, pc}
 8010e66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010e6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010e6e:	e7f7      	b.n	8010e60 <memmove+0x24>

08010e70 <__assert_func>:
 8010e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e72:	4614      	mov	r4, r2
 8010e74:	461a      	mov	r2, r3
 8010e76:	4b09      	ldr	r3, [pc, #36]	; (8010e9c <__assert_func+0x2c>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	4605      	mov	r5, r0
 8010e7c:	68d8      	ldr	r0, [r3, #12]
 8010e7e:	b14c      	cbz	r4, 8010e94 <__assert_func+0x24>
 8010e80:	4b07      	ldr	r3, [pc, #28]	; (8010ea0 <__assert_func+0x30>)
 8010e82:	9100      	str	r1, [sp, #0]
 8010e84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e88:	4906      	ldr	r1, [pc, #24]	; (8010ea4 <__assert_func+0x34>)
 8010e8a:	462b      	mov	r3, r5
 8010e8c:	f000 f854 	bl	8010f38 <fiprintf>
 8010e90:	f000 f864 	bl	8010f5c <abort>
 8010e94:	4b04      	ldr	r3, [pc, #16]	; (8010ea8 <__assert_func+0x38>)
 8010e96:	461c      	mov	r4, r3
 8010e98:	e7f3      	b.n	8010e82 <__assert_func+0x12>
 8010e9a:	bf00      	nop
 8010e9c:	20000204 	.word	0x20000204
 8010ea0:	08013fd6 	.word	0x08013fd6
 8010ea4:	08013fe3 	.word	0x08013fe3
 8010ea8:	08014011 	.word	0x08014011

08010eac <_calloc_r>:
 8010eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010eae:	fba1 2402 	umull	r2, r4, r1, r2
 8010eb2:	b94c      	cbnz	r4, 8010ec8 <_calloc_r+0x1c>
 8010eb4:	4611      	mov	r1, r2
 8010eb6:	9201      	str	r2, [sp, #4]
 8010eb8:	f7fb ff42 	bl	800cd40 <_malloc_r>
 8010ebc:	9a01      	ldr	r2, [sp, #4]
 8010ebe:	4605      	mov	r5, r0
 8010ec0:	b930      	cbnz	r0, 8010ed0 <_calloc_r+0x24>
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	b003      	add	sp, #12
 8010ec6:	bd30      	pop	{r4, r5, pc}
 8010ec8:	220c      	movs	r2, #12
 8010eca:	6002      	str	r2, [r0, #0]
 8010ecc:	2500      	movs	r5, #0
 8010ece:	e7f8      	b.n	8010ec2 <_calloc_r+0x16>
 8010ed0:	4621      	mov	r1, r4
 8010ed2:	f7fd fd7a 	bl	800e9ca <memset>
 8010ed6:	e7f4      	b.n	8010ec2 <_calloc_r+0x16>

08010ed8 <_realloc_r>:
 8010ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010edc:	4680      	mov	r8, r0
 8010ede:	4614      	mov	r4, r2
 8010ee0:	460e      	mov	r6, r1
 8010ee2:	b921      	cbnz	r1, 8010eee <_realloc_r+0x16>
 8010ee4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ee8:	4611      	mov	r1, r2
 8010eea:	f7fb bf29 	b.w	800cd40 <_malloc_r>
 8010eee:	b92a      	cbnz	r2, 8010efc <_realloc_r+0x24>
 8010ef0:	f7fe fca8 	bl	800f844 <_free_r>
 8010ef4:	4625      	mov	r5, r4
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010efc:	f000 f835 	bl	8010f6a <_malloc_usable_size_r>
 8010f00:	4284      	cmp	r4, r0
 8010f02:	4607      	mov	r7, r0
 8010f04:	d802      	bhi.n	8010f0c <_realloc_r+0x34>
 8010f06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010f0a:	d812      	bhi.n	8010f32 <_realloc_r+0x5a>
 8010f0c:	4621      	mov	r1, r4
 8010f0e:	4640      	mov	r0, r8
 8010f10:	f7fb ff16 	bl	800cd40 <_malloc_r>
 8010f14:	4605      	mov	r5, r0
 8010f16:	2800      	cmp	r0, #0
 8010f18:	d0ed      	beq.n	8010ef6 <_realloc_r+0x1e>
 8010f1a:	42bc      	cmp	r4, r7
 8010f1c:	4622      	mov	r2, r4
 8010f1e:	4631      	mov	r1, r6
 8010f20:	bf28      	it	cs
 8010f22:	463a      	movcs	r2, r7
 8010f24:	f7fd fdf3 	bl	800eb0e <memcpy>
 8010f28:	4631      	mov	r1, r6
 8010f2a:	4640      	mov	r0, r8
 8010f2c:	f7fe fc8a 	bl	800f844 <_free_r>
 8010f30:	e7e1      	b.n	8010ef6 <_realloc_r+0x1e>
 8010f32:	4635      	mov	r5, r6
 8010f34:	e7df      	b.n	8010ef6 <_realloc_r+0x1e>
	...

08010f38 <fiprintf>:
 8010f38:	b40e      	push	{r1, r2, r3}
 8010f3a:	b503      	push	{r0, r1, lr}
 8010f3c:	4601      	mov	r1, r0
 8010f3e:	ab03      	add	r3, sp, #12
 8010f40:	4805      	ldr	r0, [pc, #20]	; (8010f58 <fiprintf+0x20>)
 8010f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f46:	6800      	ldr	r0, [r0, #0]
 8010f48:	9301      	str	r3, [sp, #4]
 8010f4a:	f000 f83f 	bl	8010fcc <_vfiprintf_r>
 8010f4e:	b002      	add	sp, #8
 8010f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f54:	b003      	add	sp, #12
 8010f56:	4770      	bx	lr
 8010f58:	20000204 	.word	0x20000204

08010f5c <abort>:
 8010f5c:	b508      	push	{r3, lr}
 8010f5e:	2006      	movs	r0, #6
 8010f60:	f000 fa0c 	bl	801137c <raise>
 8010f64:	2001      	movs	r0, #1
 8010f66:	f7f1 fc51 	bl	800280c <_exit>

08010f6a <_malloc_usable_size_r>:
 8010f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f6e:	1f18      	subs	r0, r3, #4
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	bfbc      	itt	lt
 8010f74:	580b      	ldrlt	r3, [r1, r0]
 8010f76:	18c0      	addlt	r0, r0, r3
 8010f78:	4770      	bx	lr

08010f7a <__sfputc_r>:
 8010f7a:	6893      	ldr	r3, [r2, #8]
 8010f7c:	3b01      	subs	r3, #1
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	b410      	push	{r4}
 8010f82:	6093      	str	r3, [r2, #8]
 8010f84:	da08      	bge.n	8010f98 <__sfputc_r+0x1e>
 8010f86:	6994      	ldr	r4, [r2, #24]
 8010f88:	42a3      	cmp	r3, r4
 8010f8a:	db01      	blt.n	8010f90 <__sfputc_r+0x16>
 8010f8c:	290a      	cmp	r1, #10
 8010f8e:	d103      	bne.n	8010f98 <__sfputc_r+0x1e>
 8010f90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f94:	f000 b934 	b.w	8011200 <__swbuf_r>
 8010f98:	6813      	ldr	r3, [r2, #0]
 8010f9a:	1c58      	adds	r0, r3, #1
 8010f9c:	6010      	str	r0, [r2, #0]
 8010f9e:	7019      	strb	r1, [r3, #0]
 8010fa0:	4608      	mov	r0, r1
 8010fa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010fa6:	4770      	bx	lr

08010fa8 <__sfputs_r>:
 8010fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010faa:	4606      	mov	r6, r0
 8010fac:	460f      	mov	r7, r1
 8010fae:	4614      	mov	r4, r2
 8010fb0:	18d5      	adds	r5, r2, r3
 8010fb2:	42ac      	cmp	r4, r5
 8010fb4:	d101      	bne.n	8010fba <__sfputs_r+0x12>
 8010fb6:	2000      	movs	r0, #0
 8010fb8:	e007      	b.n	8010fca <__sfputs_r+0x22>
 8010fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fbe:	463a      	mov	r2, r7
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	f7ff ffda 	bl	8010f7a <__sfputc_r>
 8010fc6:	1c43      	adds	r3, r0, #1
 8010fc8:	d1f3      	bne.n	8010fb2 <__sfputs_r+0xa>
 8010fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010fcc <_vfiprintf_r>:
 8010fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd0:	460d      	mov	r5, r1
 8010fd2:	b09d      	sub	sp, #116	; 0x74
 8010fd4:	4614      	mov	r4, r2
 8010fd6:	4698      	mov	r8, r3
 8010fd8:	4606      	mov	r6, r0
 8010fda:	b118      	cbz	r0, 8010fe4 <_vfiprintf_r+0x18>
 8010fdc:	6a03      	ldr	r3, [r0, #32]
 8010fde:	b90b      	cbnz	r3, 8010fe4 <_vfiprintf_r+0x18>
 8010fe0:	f7fd fc5a 	bl	800e898 <__sinit>
 8010fe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010fe6:	07d9      	lsls	r1, r3, #31
 8010fe8:	d405      	bmi.n	8010ff6 <_vfiprintf_r+0x2a>
 8010fea:	89ab      	ldrh	r3, [r5, #12]
 8010fec:	059a      	lsls	r2, r3, #22
 8010fee:	d402      	bmi.n	8010ff6 <_vfiprintf_r+0x2a>
 8010ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ff2:	f7fd fd8a 	bl	800eb0a <__retarget_lock_acquire_recursive>
 8010ff6:	89ab      	ldrh	r3, [r5, #12]
 8010ff8:	071b      	lsls	r3, r3, #28
 8010ffa:	d501      	bpl.n	8011000 <_vfiprintf_r+0x34>
 8010ffc:	692b      	ldr	r3, [r5, #16]
 8010ffe:	b99b      	cbnz	r3, 8011028 <_vfiprintf_r+0x5c>
 8011000:	4629      	mov	r1, r5
 8011002:	4630      	mov	r0, r6
 8011004:	f000 f93a 	bl	801127c <__swsetup_r>
 8011008:	b170      	cbz	r0, 8011028 <_vfiprintf_r+0x5c>
 801100a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801100c:	07dc      	lsls	r4, r3, #31
 801100e:	d504      	bpl.n	801101a <_vfiprintf_r+0x4e>
 8011010:	f04f 30ff 	mov.w	r0, #4294967295
 8011014:	b01d      	add	sp, #116	; 0x74
 8011016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801101a:	89ab      	ldrh	r3, [r5, #12]
 801101c:	0598      	lsls	r0, r3, #22
 801101e:	d4f7      	bmi.n	8011010 <_vfiprintf_r+0x44>
 8011020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011022:	f7fd fd73 	bl	800eb0c <__retarget_lock_release_recursive>
 8011026:	e7f3      	b.n	8011010 <_vfiprintf_r+0x44>
 8011028:	2300      	movs	r3, #0
 801102a:	9309      	str	r3, [sp, #36]	; 0x24
 801102c:	2320      	movs	r3, #32
 801102e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011032:	f8cd 800c 	str.w	r8, [sp, #12]
 8011036:	2330      	movs	r3, #48	; 0x30
 8011038:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80111ec <_vfiprintf_r+0x220>
 801103c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011040:	f04f 0901 	mov.w	r9, #1
 8011044:	4623      	mov	r3, r4
 8011046:	469a      	mov	sl, r3
 8011048:	f813 2b01 	ldrb.w	r2, [r3], #1
 801104c:	b10a      	cbz	r2, 8011052 <_vfiprintf_r+0x86>
 801104e:	2a25      	cmp	r2, #37	; 0x25
 8011050:	d1f9      	bne.n	8011046 <_vfiprintf_r+0x7a>
 8011052:	ebba 0b04 	subs.w	fp, sl, r4
 8011056:	d00b      	beq.n	8011070 <_vfiprintf_r+0xa4>
 8011058:	465b      	mov	r3, fp
 801105a:	4622      	mov	r2, r4
 801105c:	4629      	mov	r1, r5
 801105e:	4630      	mov	r0, r6
 8011060:	f7ff ffa2 	bl	8010fa8 <__sfputs_r>
 8011064:	3001      	adds	r0, #1
 8011066:	f000 80a9 	beq.w	80111bc <_vfiprintf_r+0x1f0>
 801106a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801106c:	445a      	add	r2, fp
 801106e:	9209      	str	r2, [sp, #36]	; 0x24
 8011070:	f89a 3000 	ldrb.w	r3, [sl]
 8011074:	2b00      	cmp	r3, #0
 8011076:	f000 80a1 	beq.w	80111bc <_vfiprintf_r+0x1f0>
 801107a:	2300      	movs	r3, #0
 801107c:	f04f 32ff 	mov.w	r2, #4294967295
 8011080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011084:	f10a 0a01 	add.w	sl, sl, #1
 8011088:	9304      	str	r3, [sp, #16]
 801108a:	9307      	str	r3, [sp, #28]
 801108c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011090:	931a      	str	r3, [sp, #104]	; 0x68
 8011092:	4654      	mov	r4, sl
 8011094:	2205      	movs	r2, #5
 8011096:	f814 1b01 	ldrb.w	r1, [r4], #1
 801109a:	4854      	ldr	r0, [pc, #336]	; (80111ec <_vfiprintf_r+0x220>)
 801109c:	f7ef f898 	bl	80001d0 <memchr>
 80110a0:	9a04      	ldr	r2, [sp, #16]
 80110a2:	b9d8      	cbnz	r0, 80110dc <_vfiprintf_r+0x110>
 80110a4:	06d1      	lsls	r1, r2, #27
 80110a6:	bf44      	itt	mi
 80110a8:	2320      	movmi	r3, #32
 80110aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110ae:	0713      	lsls	r3, r2, #28
 80110b0:	bf44      	itt	mi
 80110b2:	232b      	movmi	r3, #43	; 0x2b
 80110b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110b8:	f89a 3000 	ldrb.w	r3, [sl]
 80110bc:	2b2a      	cmp	r3, #42	; 0x2a
 80110be:	d015      	beq.n	80110ec <_vfiprintf_r+0x120>
 80110c0:	9a07      	ldr	r2, [sp, #28]
 80110c2:	4654      	mov	r4, sl
 80110c4:	2000      	movs	r0, #0
 80110c6:	f04f 0c0a 	mov.w	ip, #10
 80110ca:	4621      	mov	r1, r4
 80110cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110d0:	3b30      	subs	r3, #48	; 0x30
 80110d2:	2b09      	cmp	r3, #9
 80110d4:	d94d      	bls.n	8011172 <_vfiprintf_r+0x1a6>
 80110d6:	b1b0      	cbz	r0, 8011106 <_vfiprintf_r+0x13a>
 80110d8:	9207      	str	r2, [sp, #28]
 80110da:	e014      	b.n	8011106 <_vfiprintf_r+0x13a>
 80110dc:	eba0 0308 	sub.w	r3, r0, r8
 80110e0:	fa09 f303 	lsl.w	r3, r9, r3
 80110e4:	4313      	orrs	r3, r2
 80110e6:	9304      	str	r3, [sp, #16]
 80110e8:	46a2      	mov	sl, r4
 80110ea:	e7d2      	b.n	8011092 <_vfiprintf_r+0xc6>
 80110ec:	9b03      	ldr	r3, [sp, #12]
 80110ee:	1d19      	adds	r1, r3, #4
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	9103      	str	r1, [sp, #12]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	bfbb      	ittet	lt
 80110f8:	425b      	neglt	r3, r3
 80110fa:	f042 0202 	orrlt.w	r2, r2, #2
 80110fe:	9307      	strge	r3, [sp, #28]
 8011100:	9307      	strlt	r3, [sp, #28]
 8011102:	bfb8      	it	lt
 8011104:	9204      	strlt	r2, [sp, #16]
 8011106:	7823      	ldrb	r3, [r4, #0]
 8011108:	2b2e      	cmp	r3, #46	; 0x2e
 801110a:	d10c      	bne.n	8011126 <_vfiprintf_r+0x15a>
 801110c:	7863      	ldrb	r3, [r4, #1]
 801110e:	2b2a      	cmp	r3, #42	; 0x2a
 8011110:	d134      	bne.n	801117c <_vfiprintf_r+0x1b0>
 8011112:	9b03      	ldr	r3, [sp, #12]
 8011114:	1d1a      	adds	r2, r3, #4
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	9203      	str	r2, [sp, #12]
 801111a:	2b00      	cmp	r3, #0
 801111c:	bfb8      	it	lt
 801111e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011122:	3402      	adds	r4, #2
 8011124:	9305      	str	r3, [sp, #20]
 8011126:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80111fc <_vfiprintf_r+0x230>
 801112a:	7821      	ldrb	r1, [r4, #0]
 801112c:	2203      	movs	r2, #3
 801112e:	4650      	mov	r0, sl
 8011130:	f7ef f84e 	bl	80001d0 <memchr>
 8011134:	b138      	cbz	r0, 8011146 <_vfiprintf_r+0x17a>
 8011136:	9b04      	ldr	r3, [sp, #16]
 8011138:	eba0 000a 	sub.w	r0, r0, sl
 801113c:	2240      	movs	r2, #64	; 0x40
 801113e:	4082      	lsls	r2, r0
 8011140:	4313      	orrs	r3, r2
 8011142:	3401      	adds	r4, #1
 8011144:	9304      	str	r3, [sp, #16]
 8011146:	f814 1b01 	ldrb.w	r1, [r4], #1
 801114a:	4829      	ldr	r0, [pc, #164]	; (80111f0 <_vfiprintf_r+0x224>)
 801114c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011150:	2206      	movs	r2, #6
 8011152:	f7ef f83d 	bl	80001d0 <memchr>
 8011156:	2800      	cmp	r0, #0
 8011158:	d03f      	beq.n	80111da <_vfiprintf_r+0x20e>
 801115a:	4b26      	ldr	r3, [pc, #152]	; (80111f4 <_vfiprintf_r+0x228>)
 801115c:	bb1b      	cbnz	r3, 80111a6 <_vfiprintf_r+0x1da>
 801115e:	9b03      	ldr	r3, [sp, #12]
 8011160:	3307      	adds	r3, #7
 8011162:	f023 0307 	bic.w	r3, r3, #7
 8011166:	3308      	adds	r3, #8
 8011168:	9303      	str	r3, [sp, #12]
 801116a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801116c:	443b      	add	r3, r7
 801116e:	9309      	str	r3, [sp, #36]	; 0x24
 8011170:	e768      	b.n	8011044 <_vfiprintf_r+0x78>
 8011172:	fb0c 3202 	mla	r2, ip, r2, r3
 8011176:	460c      	mov	r4, r1
 8011178:	2001      	movs	r0, #1
 801117a:	e7a6      	b.n	80110ca <_vfiprintf_r+0xfe>
 801117c:	2300      	movs	r3, #0
 801117e:	3401      	adds	r4, #1
 8011180:	9305      	str	r3, [sp, #20]
 8011182:	4619      	mov	r1, r3
 8011184:	f04f 0c0a 	mov.w	ip, #10
 8011188:	4620      	mov	r0, r4
 801118a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801118e:	3a30      	subs	r2, #48	; 0x30
 8011190:	2a09      	cmp	r2, #9
 8011192:	d903      	bls.n	801119c <_vfiprintf_r+0x1d0>
 8011194:	2b00      	cmp	r3, #0
 8011196:	d0c6      	beq.n	8011126 <_vfiprintf_r+0x15a>
 8011198:	9105      	str	r1, [sp, #20]
 801119a:	e7c4      	b.n	8011126 <_vfiprintf_r+0x15a>
 801119c:	fb0c 2101 	mla	r1, ip, r1, r2
 80111a0:	4604      	mov	r4, r0
 80111a2:	2301      	movs	r3, #1
 80111a4:	e7f0      	b.n	8011188 <_vfiprintf_r+0x1bc>
 80111a6:	ab03      	add	r3, sp, #12
 80111a8:	9300      	str	r3, [sp, #0]
 80111aa:	462a      	mov	r2, r5
 80111ac:	4b12      	ldr	r3, [pc, #72]	; (80111f8 <_vfiprintf_r+0x22c>)
 80111ae:	a904      	add	r1, sp, #16
 80111b0:	4630      	mov	r0, r6
 80111b2:	f7fc fd0f 	bl	800dbd4 <_printf_float>
 80111b6:	4607      	mov	r7, r0
 80111b8:	1c78      	adds	r0, r7, #1
 80111ba:	d1d6      	bne.n	801116a <_vfiprintf_r+0x19e>
 80111bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111be:	07d9      	lsls	r1, r3, #31
 80111c0:	d405      	bmi.n	80111ce <_vfiprintf_r+0x202>
 80111c2:	89ab      	ldrh	r3, [r5, #12]
 80111c4:	059a      	lsls	r2, r3, #22
 80111c6:	d402      	bmi.n	80111ce <_vfiprintf_r+0x202>
 80111c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111ca:	f7fd fc9f 	bl	800eb0c <__retarget_lock_release_recursive>
 80111ce:	89ab      	ldrh	r3, [r5, #12]
 80111d0:	065b      	lsls	r3, r3, #25
 80111d2:	f53f af1d 	bmi.w	8011010 <_vfiprintf_r+0x44>
 80111d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111d8:	e71c      	b.n	8011014 <_vfiprintf_r+0x48>
 80111da:	ab03      	add	r3, sp, #12
 80111dc:	9300      	str	r3, [sp, #0]
 80111de:	462a      	mov	r2, r5
 80111e0:	4b05      	ldr	r3, [pc, #20]	; (80111f8 <_vfiprintf_r+0x22c>)
 80111e2:	a904      	add	r1, sp, #16
 80111e4:	4630      	mov	r0, r6
 80111e6:	f7fc ff99 	bl	800e11c <_printf_i>
 80111ea:	e7e4      	b.n	80111b6 <_vfiprintf_r+0x1ea>
 80111ec:	08013fc5 	.word	0x08013fc5
 80111f0:	08013fcf 	.word	0x08013fcf
 80111f4:	0800dbd5 	.word	0x0800dbd5
 80111f8:	08010fa9 	.word	0x08010fa9
 80111fc:	08013fcb 	.word	0x08013fcb

08011200 <__swbuf_r>:
 8011200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011202:	460e      	mov	r6, r1
 8011204:	4614      	mov	r4, r2
 8011206:	4605      	mov	r5, r0
 8011208:	b118      	cbz	r0, 8011212 <__swbuf_r+0x12>
 801120a:	6a03      	ldr	r3, [r0, #32]
 801120c:	b90b      	cbnz	r3, 8011212 <__swbuf_r+0x12>
 801120e:	f7fd fb43 	bl	800e898 <__sinit>
 8011212:	69a3      	ldr	r3, [r4, #24]
 8011214:	60a3      	str	r3, [r4, #8]
 8011216:	89a3      	ldrh	r3, [r4, #12]
 8011218:	071a      	lsls	r2, r3, #28
 801121a:	d525      	bpl.n	8011268 <__swbuf_r+0x68>
 801121c:	6923      	ldr	r3, [r4, #16]
 801121e:	b31b      	cbz	r3, 8011268 <__swbuf_r+0x68>
 8011220:	6823      	ldr	r3, [r4, #0]
 8011222:	6922      	ldr	r2, [r4, #16]
 8011224:	1a98      	subs	r0, r3, r2
 8011226:	6963      	ldr	r3, [r4, #20]
 8011228:	b2f6      	uxtb	r6, r6
 801122a:	4283      	cmp	r3, r0
 801122c:	4637      	mov	r7, r6
 801122e:	dc04      	bgt.n	801123a <__swbuf_r+0x3a>
 8011230:	4621      	mov	r1, r4
 8011232:	4628      	mov	r0, r5
 8011234:	f7ff fdda 	bl	8010dec <_fflush_r>
 8011238:	b9e0      	cbnz	r0, 8011274 <__swbuf_r+0x74>
 801123a:	68a3      	ldr	r3, [r4, #8]
 801123c:	3b01      	subs	r3, #1
 801123e:	60a3      	str	r3, [r4, #8]
 8011240:	6823      	ldr	r3, [r4, #0]
 8011242:	1c5a      	adds	r2, r3, #1
 8011244:	6022      	str	r2, [r4, #0]
 8011246:	701e      	strb	r6, [r3, #0]
 8011248:	6962      	ldr	r2, [r4, #20]
 801124a:	1c43      	adds	r3, r0, #1
 801124c:	429a      	cmp	r2, r3
 801124e:	d004      	beq.n	801125a <__swbuf_r+0x5a>
 8011250:	89a3      	ldrh	r3, [r4, #12]
 8011252:	07db      	lsls	r3, r3, #31
 8011254:	d506      	bpl.n	8011264 <__swbuf_r+0x64>
 8011256:	2e0a      	cmp	r6, #10
 8011258:	d104      	bne.n	8011264 <__swbuf_r+0x64>
 801125a:	4621      	mov	r1, r4
 801125c:	4628      	mov	r0, r5
 801125e:	f7ff fdc5 	bl	8010dec <_fflush_r>
 8011262:	b938      	cbnz	r0, 8011274 <__swbuf_r+0x74>
 8011264:	4638      	mov	r0, r7
 8011266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011268:	4621      	mov	r1, r4
 801126a:	4628      	mov	r0, r5
 801126c:	f000 f806 	bl	801127c <__swsetup_r>
 8011270:	2800      	cmp	r0, #0
 8011272:	d0d5      	beq.n	8011220 <__swbuf_r+0x20>
 8011274:	f04f 37ff 	mov.w	r7, #4294967295
 8011278:	e7f4      	b.n	8011264 <__swbuf_r+0x64>
	...

0801127c <__swsetup_r>:
 801127c:	b538      	push	{r3, r4, r5, lr}
 801127e:	4b2a      	ldr	r3, [pc, #168]	; (8011328 <__swsetup_r+0xac>)
 8011280:	4605      	mov	r5, r0
 8011282:	6818      	ldr	r0, [r3, #0]
 8011284:	460c      	mov	r4, r1
 8011286:	b118      	cbz	r0, 8011290 <__swsetup_r+0x14>
 8011288:	6a03      	ldr	r3, [r0, #32]
 801128a:	b90b      	cbnz	r3, 8011290 <__swsetup_r+0x14>
 801128c:	f7fd fb04 	bl	800e898 <__sinit>
 8011290:	89a3      	ldrh	r3, [r4, #12]
 8011292:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011296:	0718      	lsls	r0, r3, #28
 8011298:	d422      	bmi.n	80112e0 <__swsetup_r+0x64>
 801129a:	06d9      	lsls	r1, r3, #27
 801129c:	d407      	bmi.n	80112ae <__swsetup_r+0x32>
 801129e:	2309      	movs	r3, #9
 80112a0:	602b      	str	r3, [r5, #0]
 80112a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80112a6:	81a3      	strh	r3, [r4, #12]
 80112a8:	f04f 30ff 	mov.w	r0, #4294967295
 80112ac:	e034      	b.n	8011318 <__swsetup_r+0x9c>
 80112ae:	0758      	lsls	r0, r3, #29
 80112b0:	d512      	bpl.n	80112d8 <__swsetup_r+0x5c>
 80112b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112b4:	b141      	cbz	r1, 80112c8 <__swsetup_r+0x4c>
 80112b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80112ba:	4299      	cmp	r1, r3
 80112bc:	d002      	beq.n	80112c4 <__swsetup_r+0x48>
 80112be:	4628      	mov	r0, r5
 80112c0:	f7fe fac0 	bl	800f844 <_free_r>
 80112c4:	2300      	movs	r3, #0
 80112c6:	6363      	str	r3, [r4, #52]	; 0x34
 80112c8:	89a3      	ldrh	r3, [r4, #12]
 80112ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80112ce:	81a3      	strh	r3, [r4, #12]
 80112d0:	2300      	movs	r3, #0
 80112d2:	6063      	str	r3, [r4, #4]
 80112d4:	6923      	ldr	r3, [r4, #16]
 80112d6:	6023      	str	r3, [r4, #0]
 80112d8:	89a3      	ldrh	r3, [r4, #12]
 80112da:	f043 0308 	orr.w	r3, r3, #8
 80112de:	81a3      	strh	r3, [r4, #12]
 80112e0:	6923      	ldr	r3, [r4, #16]
 80112e2:	b94b      	cbnz	r3, 80112f8 <__swsetup_r+0x7c>
 80112e4:	89a3      	ldrh	r3, [r4, #12]
 80112e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80112ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80112ee:	d003      	beq.n	80112f8 <__swsetup_r+0x7c>
 80112f0:	4621      	mov	r1, r4
 80112f2:	4628      	mov	r0, r5
 80112f4:	f000 f884 	bl	8011400 <__smakebuf_r>
 80112f8:	89a0      	ldrh	r0, [r4, #12]
 80112fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80112fe:	f010 0301 	ands.w	r3, r0, #1
 8011302:	d00a      	beq.n	801131a <__swsetup_r+0x9e>
 8011304:	2300      	movs	r3, #0
 8011306:	60a3      	str	r3, [r4, #8]
 8011308:	6963      	ldr	r3, [r4, #20]
 801130a:	425b      	negs	r3, r3
 801130c:	61a3      	str	r3, [r4, #24]
 801130e:	6923      	ldr	r3, [r4, #16]
 8011310:	b943      	cbnz	r3, 8011324 <__swsetup_r+0xa8>
 8011312:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011316:	d1c4      	bne.n	80112a2 <__swsetup_r+0x26>
 8011318:	bd38      	pop	{r3, r4, r5, pc}
 801131a:	0781      	lsls	r1, r0, #30
 801131c:	bf58      	it	pl
 801131e:	6963      	ldrpl	r3, [r4, #20]
 8011320:	60a3      	str	r3, [r4, #8]
 8011322:	e7f4      	b.n	801130e <__swsetup_r+0x92>
 8011324:	2000      	movs	r0, #0
 8011326:	e7f7      	b.n	8011318 <__swsetup_r+0x9c>
 8011328:	20000204 	.word	0x20000204

0801132c <_raise_r>:
 801132c:	291f      	cmp	r1, #31
 801132e:	b538      	push	{r3, r4, r5, lr}
 8011330:	4604      	mov	r4, r0
 8011332:	460d      	mov	r5, r1
 8011334:	d904      	bls.n	8011340 <_raise_r+0x14>
 8011336:	2316      	movs	r3, #22
 8011338:	6003      	str	r3, [r0, #0]
 801133a:	f04f 30ff 	mov.w	r0, #4294967295
 801133e:	bd38      	pop	{r3, r4, r5, pc}
 8011340:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011342:	b112      	cbz	r2, 801134a <_raise_r+0x1e>
 8011344:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011348:	b94b      	cbnz	r3, 801135e <_raise_r+0x32>
 801134a:	4620      	mov	r0, r4
 801134c:	f000 f830 	bl	80113b0 <_getpid_r>
 8011350:	462a      	mov	r2, r5
 8011352:	4601      	mov	r1, r0
 8011354:	4620      	mov	r0, r4
 8011356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801135a:	f000 b817 	b.w	801138c <_kill_r>
 801135e:	2b01      	cmp	r3, #1
 8011360:	d00a      	beq.n	8011378 <_raise_r+0x4c>
 8011362:	1c59      	adds	r1, r3, #1
 8011364:	d103      	bne.n	801136e <_raise_r+0x42>
 8011366:	2316      	movs	r3, #22
 8011368:	6003      	str	r3, [r0, #0]
 801136a:	2001      	movs	r0, #1
 801136c:	e7e7      	b.n	801133e <_raise_r+0x12>
 801136e:	2400      	movs	r4, #0
 8011370:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011374:	4628      	mov	r0, r5
 8011376:	4798      	blx	r3
 8011378:	2000      	movs	r0, #0
 801137a:	e7e0      	b.n	801133e <_raise_r+0x12>

0801137c <raise>:
 801137c:	4b02      	ldr	r3, [pc, #8]	; (8011388 <raise+0xc>)
 801137e:	4601      	mov	r1, r0
 8011380:	6818      	ldr	r0, [r3, #0]
 8011382:	f7ff bfd3 	b.w	801132c <_raise_r>
 8011386:	bf00      	nop
 8011388:	20000204 	.word	0x20000204

0801138c <_kill_r>:
 801138c:	b538      	push	{r3, r4, r5, lr}
 801138e:	4d07      	ldr	r5, [pc, #28]	; (80113ac <_kill_r+0x20>)
 8011390:	2300      	movs	r3, #0
 8011392:	4604      	mov	r4, r0
 8011394:	4608      	mov	r0, r1
 8011396:	4611      	mov	r1, r2
 8011398:	602b      	str	r3, [r5, #0]
 801139a:	f7f1 fa27 	bl	80027ec <_kill>
 801139e:	1c43      	adds	r3, r0, #1
 80113a0:	d102      	bne.n	80113a8 <_kill_r+0x1c>
 80113a2:	682b      	ldr	r3, [r5, #0]
 80113a4:	b103      	cbz	r3, 80113a8 <_kill_r+0x1c>
 80113a6:	6023      	str	r3, [r4, #0]
 80113a8:	bd38      	pop	{r3, r4, r5, pc}
 80113aa:	bf00      	nop
 80113ac:	20000ed8 	.word	0x20000ed8

080113b0 <_getpid_r>:
 80113b0:	f7f1 ba14 	b.w	80027dc <_getpid>

080113b4 <__swhatbuf_r>:
 80113b4:	b570      	push	{r4, r5, r6, lr}
 80113b6:	460c      	mov	r4, r1
 80113b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113bc:	2900      	cmp	r1, #0
 80113be:	b096      	sub	sp, #88	; 0x58
 80113c0:	4615      	mov	r5, r2
 80113c2:	461e      	mov	r6, r3
 80113c4:	da0d      	bge.n	80113e2 <__swhatbuf_r+0x2e>
 80113c6:	89a3      	ldrh	r3, [r4, #12]
 80113c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80113cc:	f04f 0100 	mov.w	r1, #0
 80113d0:	bf0c      	ite	eq
 80113d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80113d6:	2340      	movne	r3, #64	; 0x40
 80113d8:	2000      	movs	r0, #0
 80113da:	6031      	str	r1, [r6, #0]
 80113dc:	602b      	str	r3, [r5, #0]
 80113de:	b016      	add	sp, #88	; 0x58
 80113e0:	bd70      	pop	{r4, r5, r6, pc}
 80113e2:	466a      	mov	r2, sp
 80113e4:	f000 f848 	bl	8011478 <_fstat_r>
 80113e8:	2800      	cmp	r0, #0
 80113ea:	dbec      	blt.n	80113c6 <__swhatbuf_r+0x12>
 80113ec:	9901      	ldr	r1, [sp, #4]
 80113ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80113f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80113f6:	4259      	negs	r1, r3
 80113f8:	4159      	adcs	r1, r3
 80113fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80113fe:	e7eb      	b.n	80113d8 <__swhatbuf_r+0x24>

08011400 <__smakebuf_r>:
 8011400:	898b      	ldrh	r3, [r1, #12]
 8011402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011404:	079d      	lsls	r5, r3, #30
 8011406:	4606      	mov	r6, r0
 8011408:	460c      	mov	r4, r1
 801140a:	d507      	bpl.n	801141c <__smakebuf_r+0x1c>
 801140c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011410:	6023      	str	r3, [r4, #0]
 8011412:	6123      	str	r3, [r4, #16]
 8011414:	2301      	movs	r3, #1
 8011416:	6163      	str	r3, [r4, #20]
 8011418:	b002      	add	sp, #8
 801141a:	bd70      	pop	{r4, r5, r6, pc}
 801141c:	ab01      	add	r3, sp, #4
 801141e:	466a      	mov	r2, sp
 8011420:	f7ff ffc8 	bl	80113b4 <__swhatbuf_r>
 8011424:	9900      	ldr	r1, [sp, #0]
 8011426:	4605      	mov	r5, r0
 8011428:	4630      	mov	r0, r6
 801142a:	f7fb fc89 	bl	800cd40 <_malloc_r>
 801142e:	b948      	cbnz	r0, 8011444 <__smakebuf_r+0x44>
 8011430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011434:	059a      	lsls	r2, r3, #22
 8011436:	d4ef      	bmi.n	8011418 <__smakebuf_r+0x18>
 8011438:	f023 0303 	bic.w	r3, r3, #3
 801143c:	f043 0302 	orr.w	r3, r3, #2
 8011440:	81a3      	strh	r3, [r4, #12]
 8011442:	e7e3      	b.n	801140c <__smakebuf_r+0xc>
 8011444:	89a3      	ldrh	r3, [r4, #12]
 8011446:	6020      	str	r0, [r4, #0]
 8011448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801144c:	81a3      	strh	r3, [r4, #12]
 801144e:	9b00      	ldr	r3, [sp, #0]
 8011450:	6163      	str	r3, [r4, #20]
 8011452:	9b01      	ldr	r3, [sp, #4]
 8011454:	6120      	str	r0, [r4, #16]
 8011456:	b15b      	cbz	r3, 8011470 <__smakebuf_r+0x70>
 8011458:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801145c:	4630      	mov	r0, r6
 801145e:	f000 f81d 	bl	801149c <_isatty_r>
 8011462:	b128      	cbz	r0, 8011470 <__smakebuf_r+0x70>
 8011464:	89a3      	ldrh	r3, [r4, #12]
 8011466:	f023 0303 	bic.w	r3, r3, #3
 801146a:	f043 0301 	orr.w	r3, r3, #1
 801146e:	81a3      	strh	r3, [r4, #12]
 8011470:	89a3      	ldrh	r3, [r4, #12]
 8011472:	431d      	orrs	r5, r3
 8011474:	81a5      	strh	r5, [r4, #12]
 8011476:	e7cf      	b.n	8011418 <__smakebuf_r+0x18>

08011478 <_fstat_r>:
 8011478:	b538      	push	{r3, r4, r5, lr}
 801147a:	4d07      	ldr	r5, [pc, #28]	; (8011498 <_fstat_r+0x20>)
 801147c:	2300      	movs	r3, #0
 801147e:	4604      	mov	r4, r0
 8011480:	4608      	mov	r0, r1
 8011482:	4611      	mov	r1, r2
 8011484:	602b      	str	r3, [r5, #0]
 8011486:	f7f1 fa10 	bl	80028aa <_fstat>
 801148a:	1c43      	adds	r3, r0, #1
 801148c:	d102      	bne.n	8011494 <_fstat_r+0x1c>
 801148e:	682b      	ldr	r3, [r5, #0]
 8011490:	b103      	cbz	r3, 8011494 <_fstat_r+0x1c>
 8011492:	6023      	str	r3, [r4, #0]
 8011494:	bd38      	pop	{r3, r4, r5, pc}
 8011496:	bf00      	nop
 8011498:	20000ed8 	.word	0x20000ed8

0801149c <_isatty_r>:
 801149c:	b538      	push	{r3, r4, r5, lr}
 801149e:	4d06      	ldr	r5, [pc, #24]	; (80114b8 <_isatty_r+0x1c>)
 80114a0:	2300      	movs	r3, #0
 80114a2:	4604      	mov	r4, r0
 80114a4:	4608      	mov	r0, r1
 80114a6:	602b      	str	r3, [r5, #0]
 80114a8:	f7f1 fa0f 	bl	80028ca <_isatty>
 80114ac:	1c43      	adds	r3, r0, #1
 80114ae:	d102      	bne.n	80114b6 <_isatty_r+0x1a>
 80114b0:	682b      	ldr	r3, [r5, #0]
 80114b2:	b103      	cbz	r3, 80114b6 <_isatty_r+0x1a>
 80114b4:	6023      	str	r3, [r4, #0]
 80114b6:	bd38      	pop	{r3, r4, r5, pc}
 80114b8:	20000ed8 	.word	0x20000ed8

080114bc <atan2>:
 80114bc:	f000 bbe8 	b.w	8011c90 <__ieee754_atan2>

080114c0 <fmod>:
 80114c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114c2:	ed2d 8b02 	vpush	{d8}
 80114c6:	ec57 6b10 	vmov	r6, r7, d0
 80114ca:	ec55 4b11 	vmov	r4, r5, d1
 80114ce:	f000 fca5 	bl	8011e1c <__ieee754_fmod>
 80114d2:	4622      	mov	r2, r4
 80114d4:	462b      	mov	r3, r5
 80114d6:	4630      	mov	r0, r6
 80114d8:	4639      	mov	r1, r7
 80114da:	eeb0 8a40 	vmov.f32	s16, s0
 80114de:	eef0 8a60 	vmov.f32	s17, s1
 80114e2:	f7ef fb23 	bl	8000b2c <__aeabi_dcmpun>
 80114e6:	b990      	cbnz	r0, 801150e <fmod+0x4e>
 80114e8:	2200      	movs	r2, #0
 80114ea:	2300      	movs	r3, #0
 80114ec:	4620      	mov	r0, r4
 80114ee:	4629      	mov	r1, r5
 80114f0:	f7ef faea 	bl	8000ac8 <__aeabi_dcmpeq>
 80114f4:	b158      	cbz	r0, 801150e <fmod+0x4e>
 80114f6:	f7fd fadd 	bl	800eab4 <__errno>
 80114fa:	2321      	movs	r3, #33	; 0x21
 80114fc:	6003      	str	r3, [r0, #0]
 80114fe:	2200      	movs	r2, #0
 8011500:	2300      	movs	r3, #0
 8011502:	4610      	mov	r0, r2
 8011504:	4619      	mov	r1, r3
 8011506:	f7ef f9a1 	bl	800084c <__aeabi_ddiv>
 801150a:	ec41 0b18 	vmov	d8, r0, r1
 801150e:	eeb0 0a48 	vmov.f32	s0, s16
 8011512:	eef0 0a68 	vmov.f32	s1, s17
 8011516:	ecbd 8b02 	vpop	{d8}
 801151a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801151c <pow>:
 801151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801151e:	ed2d 8b02 	vpush	{d8}
 8011522:	eeb0 8a40 	vmov.f32	s16, s0
 8011526:	eef0 8a60 	vmov.f32	s17, s1
 801152a:	ec55 4b11 	vmov	r4, r5, d1
 801152e:	f000 fd83 	bl	8012038 <__ieee754_pow>
 8011532:	4622      	mov	r2, r4
 8011534:	462b      	mov	r3, r5
 8011536:	4620      	mov	r0, r4
 8011538:	4629      	mov	r1, r5
 801153a:	ec57 6b10 	vmov	r6, r7, d0
 801153e:	f7ef faf5 	bl	8000b2c <__aeabi_dcmpun>
 8011542:	2800      	cmp	r0, #0
 8011544:	d13b      	bne.n	80115be <pow+0xa2>
 8011546:	ec51 0b18 	vmov	r0, r1, d8
 801154a:	2200      	movs	r2, #0
 801154c:	2300      	movs	r3, #0
 801154e:	f7ef fabb 	bl	8000ac8 <__aeabi_dcmpeq>
 8011552:	b1b8      	cbz	r0, 8011584 <pow+0x68>
 8011554:	2200      	movs	r2, #0
 8011556:	2300      	movs	r3, #0
 8011558:	4620      	mov	r0, r4
 801155a:	4629      	mov	r1, r5
 801155c:	f7ef fab4 	bl	8000ac8 <__aeabi_dcmpeq>
 8011560:	2800      	cmp	r0, #0
 8011562:	d146      	bne.n	80115f2 <pow+0xd6>
 8011564:	ec45 4b10 	vmov	d0, r4, r5
 8011568:	f000 f922 	bl	80117b0 <finite>
 801156c:	b338      	cbz	r0, 80115be <pow+0xa2>
 801156e:	2200      	movs	r2, #0
 8011570:	2300      	movs	r3, #0
 8011572:	4620      	mov	r0, r4
 8011574:	4629      	mov	r1, r5
 8011576:	f7ef fab1 	bl	8000adc <__aeabi_dcmplt>
 801157a:	b300      	cbz	r0, 80115be <pow+0xa2>
 801157c:	f7fd fa9a 	bl	800eab4 <__errno>
 8011580:	2322      	movs	r3, #34	; 0x22
 8011582:	e01b      	b.n	80115bc <pow+0xa0>
 8011584:	ec47 6b10 	vmov	d0, r6, r7
 8011588:	f000 f912 	bl	80117b0 <finite>
 801158c:	b9e0      	cbnz	r0, 80115c8 <pow+0xac>
 801158e:	eeb0 0a48 	vmov.f32	s0, s16
 8011592:	eef0 0a68 	vmov.f32	s1, s17
 8011596:	f000 f90b 	bl	80117b0 <finite>
 801159a:	b1a8      	cbz	r0, 80115c8 <pow+0xac>
 801159c:	ec45 4b10 	vmov	d0, r4, r5
 80115a0:	f000 f906 	bl	80117b0 <finite>
 80115a4:	b180      	cbz	r0, 80115c8 <pow+0xac>
 80115a6:	4632      	mov	r2, r6
 80115a8:	463b      	mov	r3, r7
 80115aa:	4630      	mov	r0, r6
 80115ac:	4639      	mov	r1, r7
 80115ae:	f7ef fabd 	bl	8000b2c <__aeabi_dcmpun>
 80115b2:	2800      	cmp	r0, #0
 80115b4:	d0e2      	beq.n	801157c <pow+0x60>
 80115b6:	f7fd fa7d 	bl	800eab4 <__errno>
 80115ba:	2321      	movs	r3, #33	; 0x21
 80115bc:	6003      	str	r3, [r0, #0]
 80115be:	ecbd 8b02 	vpop	{d8}
 80115c2:	ec47 6b10 	vmov	d0, r6, r7
 80115c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115c8:	2200      	movs	r2, #0
 80115ca:	2300      	movs	r3, #0
 80115cc:	4630      	mov	r0, r6
 80115ce:	4639      	mov	r1, r7
 80115d0:	f7ef fa7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80115d4:	2800      	cmp	r0, #0
 80115d6:	d0f2      	beq.n	80115be <pow+0xa2>
 80115d8:	eeb0 0a48 	vmov.f32	s0, s16
 80115dc:	eef0 0a68 	vmov.f32	s1, s17
 80115e0:	f000 f8e6 	bl	80117b0 <finite>
 80115e4:	2800      	cmp	r0, #0
 80115e6:	d0ea      	beq.n	80115be <pow+0xa2>
 80115e8:	ec45 4b10 	vmov	d0, r4, r5
 80115ec:	f000 f8e0 	bl	80117b0 <finite>
 80115f0:	e7c3      	b.n	801157a <pow+0x5e>
 80115f2:	4f01      	ldr	r7, [pc, #4]	; (80115f8 <pow+0xdc>)
 80115f4:	2600      	movs	r6, #0
 80115f6:	e7e2      	b.n	80115be <pow+0xa2>
 80115f8:	3ff00000 	.word	0x3ff00000

080115fc <sqrt>:
 80115fc:	b538      	push	{r3, r4, r5, lr}
 80115fe:	ed2d 8b02 	vpush	{d8}
 8011602:	ec55 4b10 	vmov	r4, r5, d0
 8011606:	f000 f8df 	bl	80117c8 <__ieee754_sqrt>
 801160a:	4622      	mov	r2, r4
 801160c:	462b      	mov	r3, r5
 801160e:	4620      	mov	r0, r4
 8011610:	4629      	mov	r1, r5
 8011612:	eeb0 8a40 	vmov.f32	s16, s0
 8011616:	eef0 8a60 	vmov.f32	s17, s1
 801161a:	f7ef fa87 	bl	8000b2c <__aeabi_dcmpun>
 801161e:	b990      	cbnz	r0, 8011646 <sqrt+0x4a>
 8011620:	2200      	movs	r2, #0
 8011622:	2300      	movs	r3, #0
 8011624:	4620      	mov	r0, r4
 8011626:	4629      	mov	r1, r5
 8011628:	f7ef fa58 	bl	8000adc <__aeabi_dcmplt>
 801162c:	b158      	cbz	r0, 8011646 <sqrt+0x4a>
 801162e:	f7fd fa41 	bl	800eab4 <__errno>
 8011632:	2321      	movs	r3, #33	; 0x21
 8011634:	6003      	str	r3, [r0, #0]
 8011636:	2200      	movs	r2, #0
 8011638:	2300      	movs	r3, #0
 801163a:	4610      	mov	r0, r2
 801163c:	4619      	mov	r1, r3
 801163e:	f7ef f905 	bl	800084c <__aeabi_ddiv>
 8011642:	ec41 0b18 	vmov	d8, r0, r1
 8011646:	eeb0 0a48 	vmov.f32	s0, s16
 801164a:	eef0 0a68 	vmov.f32	s1, s17
 801164e:	ecbd 8b02 	vpop	{d8}
 8011652:	bd38      	pop	{r3, r4, r5, pc}
 8011654:	0000      	movs	r0, r0
	...

08011658 <cos>:
 8011658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801165a:	ec53 2b10 	vmov	r2, r3, d0
 801165e:	4826      	ldr	r0, [pc, #152]	; (80116f8 <cos+0xa0>)
 8011660:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011664:	4281      	cmp	r1, r0
 8011666:	dc06      	bgt.n	8011676 <cos+0x1e>
 8011668:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80116f0 <cos+0x98>
 801166c:	b005      	add	sp, #20
 801166e:	f85d eb04 	ldr.w	lr, [sp], #4
 8011672:	f000 b985 	b.w	8011980 <__kernel_cos>
 8011676:	4821      	ldr	r0, [pc, #132]	; (80116fc <cos+0xa4>)
 8011678:	4281      	cmp	r1, r0
 801167a:	dd09      	ble.n	8011690 <cos+0x38>
 801167c:	ee10 0a10 	vmov	r0, s0
 8011680:	4619      	mov	r1, r3
 8011682:	f7ee fe01 	bl	8000288 <__aeabi_dsub>
 8011686:	ec41 0b10 	vmov	d0, r0, r1
 801168a:	b005      	add	sp, #20
 801168c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011690:	4668      	mov	r0, sp
 8011692:	f001 f9fd 	bl	8012a90 <__ieee754_rem_pio2>
 8011696:	f000 0003 	and.w	r0, r0, #3
 801169a:	2801      	cmp	r0, #1
 801169c:	d00b      	beq.n	80116b6 <cos+0x5e>
 801169e:	2802      	cmp	r0, #2
 80116a0:	d016      	beq.n	80116d0 <cos+0x78>
 80116a2:	b9e0      	cbnz	r0, 80116de <cos+0x86>
 80116a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116a8:	ed9d 0b00 	vldr	d0, [sp]
 80116ac:	f000 f968 	bl	8011980 <__kernel_cos>
 80116b0:	ec51 0b10 	vmov	r0, r1, d0
 80116b4:	e7e7      	b.n	8011686 <cos+0x2e>
 80116b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116ba:	ed9d 0b00 	vldr	d0, [sp]
 80116be:	f000 fa27 	bl	8011b10 <__kernel_sin>
 80116c2:	ec53 2b10 	vmov	r2, r3, d0
 80116c6:	ee10 0a10 	vmov	r0, s0
 80116ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80116ce:	e7da      	b.n	8011686 <cos+0x2e>
 80116d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116d4:	ed9d 0b00 	vldr	d0, [sp]
 80116d8:	f000 f952 	bl	8011980 <__kernel_cos>
 80116dc:	e7f1      	b.n	80116c2 <cos+0x6a>
 80116de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80116e2:	ed9d 0b00 	vldr	d0, [sp]
 80116e6:	2001      	movs	r0, #1
 80116e8:	f000 fa12 	bl	8011b10 <__kernel_sin>
 80116ec:	e7e0      	b.n	80116b0 <cos+0x58>
 80116ee:	bf00      	nop
	...
 80116f8:	3fe921fb 	.word	0x3fe921fb
 80116fc:	7fefffff 	.word	0x7fefffff

08011700 <sin>:
 8011700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011702:	ec53 2b10 	vmov	r2, r3, d0
 8011706:	4828      	ldr	r0, [pc, #160]	; (80117a8 <sin+0xa8>)
 8011708:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801170c:	4281      	cmp	r1, r0
 801170e:	dc07      	bgt.n	8011720 <sin+0x20>
 8011710:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80117a0 <sin+0xa0>
 8011714:	2000      	movs	r0, #0
 8011716:	b005      	add	sp, #20
 8011718:	f85d eb04 	ldr.w	lr, [sp], #4
 801171c:	f000 b9f8 	b.w	8011b10 <__kernel_sin>
 8011720:	4822      	ldr	r0, [pc, #136]	; (80117ac <sin+0xac>)
 8011722:	4281      	cmp	r1, r0
 8011724:	dd09      	ble.n	801173a <sin+0x3a>
 8011726:	ee10 0a10 	vmov	r0, s0
 801172a:	4619      	mov	r1, r3
 801172c:	f7ee fdac 	bl	8000288 <__aeabi_dsub>
 8011730:	ec41 0b10 	vmov	d0, r0, r1
 8011734:	b005      	add	sp, #20
 8011736:	f85d fb04 	ldr.w	pc, [sp], #4
 801173a:	4668      	mov	r0, sp
 801173c:	f001 f9a8 	bl	8012a90 <__ieee754_rem_pio2>
 8011740:	f000 0003 	and.w	r0, r0, #3
 8011744:	2801      	cmp	r0, #1
 8011746:	d00c      	beq.n	8011762 <sin+0x62>
 8011748:	2802      	cmp	r0, #2
 801174a:	d011      	beq.n	8011770 <sin+0x70>
 801174c:	b9f0      	cbnz	r0, 801178c <sin+0x8c>
 801174e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011752:	ed9d 0b00 	vldr	d0, [sp]
 8011756:	2001      	movs	r0, #1
 8011758:	f000 f9da 	bl	8011b10 <__kernel_sin>
 801175c:	ec51 0b10 	vmov	r0, r1, d0
 8011760:	e7e6      	b.n	8011730 <sin+0x30>
 8011762:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011766:	ed9d 0b00 	vldr	d0, [sp]
 801176a:	f000 f909 	bl	8011980 <__kernel_cos>
 801176e:	e7f5      	b.n	801175c <sin+0x5c>
 8011770:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011774:	ed9d 0b00 	vldr	d0, [sp]
 8011778:	2001      	movs	r0, #1
 801177a:	f000 f9c9 	bl	8011b10 <__kernel_sin>
 801177e:	ec53 2b10 	vmov	r2, r3, d0
 8011782:	ee10 0a10 	vmov	r0, s0
 8011786:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801178a:	e7d1      	b.n	8011730 <sin+0x30>
 801178c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011790:	ed9d 0b00 	vldr	d0, [sp]
 8011794:	f000 f8f4 	bl	8011980 <__kernel_cos>
 8011798:	e7f1      	b.n	801177e <sin+0x7e>
 801179a:	bf00      	nop
 801179c:	f3af 8000 	nop.w
	...
 80117a8:	3fe921fb 	.word	0x3fe921fb
 80117ac:	7fefffff 	.word	0x7fefffff

080117b0 <finite>:
 80117b0:	b082      	sub	sp, #8
 80117b2:	ed8d 0b00 	vstr	d0, [sp]
 80117b6:	9801      	ldr	r0, [sp, #4]
 80117b8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80117bc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80117c0:	0fc0      	lsrs	r0, r0, #31
 80117c2:	b002      	add	sp, #8
 80117c4:	4770      	bx	lr
	...

080117c8 <__ieee754_sqrt>:
 80117c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117cc:	ec55 4b10 	vmov	r4, r5, d0
 80117d0:	4e67      	ldr	r6, [pc, #412]	; (8011970 <__ieee754_sqrt+0x1a8>)
 80117d2:	43ae      	bics	r6, r5
 80117d4:	ee10 0a10 	vmov	r0, s0
 80117d8:	ee10 2a10 	vmov	r2, s0
 80117dc:	4629      	mov	r1, r5
 80117de:	462b      	mov	r3, r5
 80117e0:	d10d      	bne.n	80117fe <__ieee754_sqrt+0x36>
 80117e2:	f7ee ff09 	bl	80005f8 <__aeabi_dmul>
 80117e6:	4602      	mov	r2, r0
 80117e8:	460b      	mov	r3, r1
 80117ea:	4620      	mov	r0, r4
 80117ec:	4629      	mov	r1, r5
 80117ee:	f7ee fd4d 	bl	800028c <__adddf3>
 80117f2:	4604      	mov	r4, r0
 80117f4:	460d      	mov	r5, r1
 80117f6:	ec45 4b10 	vmov	d0, r4, r5
 80117fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117fe:	2d00      	cmp	r5, #0
 8011800:	dc0b      	bgt.n	801181a <__ieee754_sqrt+0x52>
 8011802:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011806:	4326      	orrs	r6, r4
 8011808:	d0f5      	beq.n	80117f6 <__ieee754_sqrt+0x2e>
 801180a:	b135      	cbz	r5, 801181a <__ieee754_sqrt+0x52>
 801180c:	f7ee fd3c 	bl	8000288 <__aeabi_dsub>
 8011810:	4602      	mov	r2, r0
 8011812:	460b      	mov	r3, r1
 8011814:	f7ef f81a 	bl	800084c <__aeabi_ddiv>
 8011818:	e7eb      	b.n	80117f2 <__ieee754_sqrt+0x2a>
 801181a:	1509      	asrs	r1, r1, #20
 801181c:	f000 808d 	beq.w	801193a <__ieee754_sqrt+0x172>
 8011820:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011824:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8011828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801182c:	07c9      	lsls	r1, r1, #31
 801182e:	bf5c      	itt	pl
 8011830:	005b      	lslpl	r3, r3, #1
 8011832:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011836:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801183a:	bf58      	it	pl
 801183c:	0052      	lslpl	r2, r2, #1
 801183e:	2500      	movs	r5, #0
 8011840:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011844:	1076      	asrs	r6, r6, #1
 8011846:	0052      	lsls	r2, r2, #1
 8011848:	f04f 0e16 	mov.w	lr, #22
 801184c:	46ac      	mov	ip, r5
 801184e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011852:	eb0c 0001 	add.w	r0, ip, r1
 8011856:	4298      	cmp	r0, r3
 8011858:	bfde      	ittt	le
 801185a:	1a1b      	suble	r3, r3, r0
 801185c:	eb00 0c01 	addle.w	ip, r0, r1
 8011860:	186d      	addle	r5, r5, r1
 8011862:	005b      	lsls	r3, r3, #1
 8011864:	f1be 0e01 	subs.w	lr, lr, #1
 8011868:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801186c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011870:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011874:	d1ed      	bne.n	8011852 <__ieee754_sqrt+0x8a>
 8011876:	4674      	mov	r4, lr
 8011878:	2720      	movs	r7, #32
 801187a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801187e:	4563      	cmp	r3, ip
 8011880:	eb01 000e 	add.w	r0, r1, lr
 8011884:	dc02      	bgt.n	801188c <__ieee754_sqrt+0xc4>
 8011886:	d113      	bne.n	80118b0 <__ieee754_sqrt+0xe8>
 8011888:	4290      	cmp	r0, r2
 801188a:	d811      	bhi.n	80118b0 <__ieee754_sqrt+0xe8>
 801188c:	2800      	cmp	r0, #0
 801188e:	eb00 0e01 	add.w	lr, r0, r1
 8011892:	da57      	bge.n	8011944 <__ieee754_sqrt+0x17c>
 8011894:	f1be 0f00 	cmp.w	lr, #0
 8011898:	db54      	blt.n	8011944 <__ieee754_sqrt+0x17c>
 801189a:	f10c 0801 	add.w	r8, ip, #1
 801189e:	eba3 030c 	sub.w	r3, r3, ip
 80118a2:	4290      	cmp	r0, r2
 80118a4:	bf88      	it	hi
 80118a6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80118aa:	1a12      	subs	r2, r2, r0
 80118ac:	440c      	add	r4, r1
 80118ae:	46c4      	mov	ip, r8
 80118b0:	005b      	lsls	r3, r3, #1
 80118b2:	3f01      	subs	r7, #1
 80118b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80118b8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80118bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80118c0:	d1dd      	bne.n	801187e <__ieee754_sqrt+0xb6>
 80118c2:	4313      	orrs	r3, r2
 80118c4:	d01b      	beq.n	80118fe <__ieee754_sqrt+0x136>
 80118c6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011974 <__ieee754_sqrt+0x1ac>
 80118ca:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8011978 <__ieee754_sqrt+0x1b0>
 80118ce:	e9da 0100 	ldrd	r0, r1, [sl]
 80118d2:	e9db 2300 	ldrd	r2, r3, [fp]
 80118d6:	f7ee fcd7 	bl	8000288 <__aeabi_dsub>
 80118da:	e9da 8900 	ldrd	r8, r9, [sl]
 80118de:	4602      	mov	r2, r0
 80118e0:	460b      	mov	r3, r1
 80118e2:	4640      	mov	r0, r8
 80118e4:	4649      	mov	r1, r9
 80118e6:	f7ef f903 	bl	8000af0 <__aeabi_dcmple>
 80118ea:	b140      	cbz	r0, 80118fe <__ieee754_sqrt+0x136>
 80118ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 80118f0:	e9da 0100 	ldrd	r0, r1, [sl]
 80118f4:	e9db 2300 	ldrd	r2, r3, [fp]
 80118f8:	d126      	bne.n	8011948 <__ieee754_sqrt+0x180>
 80118fa:	3501      	adds	r5, #1
 80118fc:	463c      	mov	r4, r7
 80118fe:	106a      	asrs	r2, r5, #1
 8011900:	0863      	lsrs	r3, r4, #1
 8011902:	07e9      	lsls	r1, r5, #31
 8011904:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011908:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801190c:	bf48      	it	mi
 801190e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011912:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8011916:	461c      	mov	r4, r3
 8011918:	e76d      	b.n	80117f6 <__ieee754_sqrt+0x2e>
 801191a:	0ad3      	lsrs	r3, r2, #11
 801191c:	3815      	subs	r0, #21
 801191e:	0552      	lsls	r2, r2, #21
 8011920:	2b00      	cmp	r3, #0
 8011922:	d0fa      	beq.n	801191a <__ieee754_sqrt+0x152>
 8011924:	02dc      	lsls	r4, r3, #11
 8011926:	d50a      	bpl.n	801193e <__ieee754_sqrt+0x176>
 8011928:	f1c1 0420 	rsb	r4, r1, #32
 801192c:	fa22 f404 	lsr.w	r4, r2, r4
 8011930:	1e4d      	subs	r5, r1, #1
 8011932:	408a      	lsls	r2, r1
 8011934:	4323      	orrs	r3, r4
 8011936:	1b41      	subs	r1, r0, r5
 8011938:	e772      	b.n	8011820 <__ieee754_sqrt+0x58>
 801193a:	4608      	mov	r0, r1
 801193c:	e7f0      	b.n	8011920 <__ieee754_sqrt+0x158>
 801193e:	005b      	lsls	r3, r3, #1
 8011940:	3101      	adds	r1, #1
 8011942:	e7ef      	b.n	8011924 <__ieee754_sqrt+0x15c>
 8011944:	46e0      	mov	r8, ip
 8011946:	e7aa      	b.n	801189e <__ieee754_sqrt+0xd6>
 8011948:	f7ee fca0 	bl	800028c <__adddf3>
 801194c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011950:	4602      	mov	r2, r0
 8011952:	460b      	mov	r3, r1
 8011954:	4640      	mov	r0, r8
 8011956:	4649      	mov	r1, r9
 8011958:	f7ef f8c0 	bl	8000adc <__aeabi_dcmplt>
 801195c:	b120      	cbz	r0, 8011968 <__ieee754_sqrt+0x1a0>
 801195e:	1ca0      	adds	r0, r4, #2
 8011960:	bf08      	it	eq
 8011962:	3501      	addeq	r5, #1
 8011964:	3402      	adds	r4, #2
 8011966:	e7ca      	b.n	80118fe <__ieee754_sqrt+0x136>
 8011968:	3401      	adds	r4, #1
 801196a:	f024 0401 	bic.w	r4, r4, #1
 801196e:	e7c6      	b.n	80118fe <__ieee754_sqrt+0x136>
 8011970:	7ff00000 	.word	0x7ff00000
 8011974:	20000208 	.word	0x20000208
 8011978:	20000210 	.word	0x20000210
 801197c:	00000000 	.word	0x00000000

08011980 <__kernel_cos>:
 8011980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011984:	ec57 6b10 	vmov	r6, r7, d0
 8011988:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801198c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011990:	ed8d 1b00 	vstr	d1, [sp]
 8011994:	da07      	bge.n	80119a6 <__kernel_cos+0x26>
 8011996:	ee10 0a10 	vmov	r0, s0
 801199a:	4639      	mov	r1, r7
 801199c:	f7ef f8dc 	bl	8000b58 <__aeabi_d2iz>
 80119a0:	2800      	cmp	r0, #0
 80119a2:	f000 8088 	beq.w	8011ab6 <__kernel_cos+0x136>
 80119a6:	4632      	mov	r2, r6
 80119a8:	463b      	mov	r3, r7
 80119aa:	4630      	mov	r0, r6
 80119ac:	4639      	mov	r1, r7
 80119ae:	f7ee fe23 	bl	80005f8 <__aeabi_dmul>
 80119b2:	4b51      	ldr	r3, [pc, #324]	; (8011af8 <__kernel_cos+0x178>)
 80119b4:	2200      	movs	r2, #0
 80119b6:	4604      	mov	r4, r0
 80119b8:	460d      	mov	r5, r1
 80119ba:	f7ee fe1d 	bl	80005f8 <__aeabi_dmul>
 80119be:	a340      	add	r3, pc, #256	; (adr r3, 8011ac0 <__kernel_cos+0x140>)
 80119c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c4:	4682      	mov	sl, r0
 80119c6:	468b      	mov	fp, r1
 80119c8:	4620      	mov	r0, r4
 80119ca:	4629      	mov	r1, r5
 80119cc:	f7ee fe14 	bl	80005f8 <__aeabi_dmul>
 80119d0:	a33d      	add	r3, pc, #244	; (adr r3, 8011ac8 <__kernel_cos+0x148>)
 80119d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d6:	f7ee fc59 	bl	800028c <__adddf3>
 80119da:	4622      	mov	r2, r4
 80119dc:	462b      	mov	r3, r5
 80119de:	f7ee fe0b 	bl	80005f8 <__aeabi_dmul>
 80119e2:	a33b      	add	r3, pc, #236	; (adr r3, 8011ad0 <__kernel_cos+0x150>)
 80119e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e8:	f7ee fc4e 	bl	8000288 <__aeabi_dsub>
 80119ec:	4622      	mov	r2, r4
 80119ee:	462b      	mov	r3, r5
 80119f0:	f7ee fe02 	bl	80005f8 <__aeabi_dmul>
 80119f4:	a338      	add	r3, pc, #224	; (adr r3, 8011ad8 <__kernel_cos+0x158>)
 80119f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119fa:	f7ee fc47 	bl	800028c <__adddf3>
 80119fe:	4622      	mov	r2, r4
 8011a00:	462b      	mov	r3, r5
 8011a02:	f7ee fdf9 	bl	80005f8 <__aeabi_dmul>
 8011a06:	a336      	add	r3, pc, #216	; (adr r3, 8011ae0 <__kernel_cos+0x160>)
 8011a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a0c:	f7ee fc3c 	bl	8000288 <__aeabi_dsub>
 8011a10:	4622      	mov	r2, r4
 8011a12:	462b      	mov	r3, r5
 8011a14:	f7ee fdf0 	bl	80005f8 <__aeabi_dmul>
 8011a18:	a333      	add	r3, pc, #204	; (adr r3, 8011ae8 <__kernel_cos+0x168>)
 8011a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a1e:	f7ee fc35 	bl	800028c <__adddf3>
 8011a22:	4622      	mov	r2, r4
 8011a24:	462b      	mov	r3, r5
 8011a26:	f7ee fde7 	bl	80005f8 <__aeabi_dmul>
 8011a2a:	4622      	mov	r2, r4
 8011a2c:	462b      	mov	r3, r5
 8011a2e:	f7ee fde3 	bl	80005f8 <__aeabi_dmul>
 8011a32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a36:	4604      	mov	r4, r0
 8011a38:	460d      	mov	r5, r1
 8011a3a:	4630      	mov	r0, r6
 8011a3c:	4639      	mov	r1, r7
 8011a3e:	f7ee fddb 	bl	80005f8 <__aeabi_dmul>
 8011a42:	460b      	mov	r3, r1
 8011a44:	4602      	mov	r2, r0
 8011a46:	4629      	mov	r1, r5
 8011a48:	4620      	mov	r0, r4
 8011a4a:	f7ee fc1d 	bl	8000288 <__aeabi_dsub>
 8011a4e:	4b2b      	ldr	r3, [pc, #172]	; (8011afc <__kernel_cos+0x17c>)
 8011a50:	4598      	cmp	r8, r3
 8011a52:	4606      	mov	r6, r0
 8011a54:	460f      	mov	r7, r1
 8011a56:	dc10      	bgt.n	8011a7a <__kernel_cos+0xfa>
 8011a58:	4602      	mov	r2, r0
 8011a5a:	460b      	mov	r3, r1
 8011a5c:	4650      	mov	r0, sl
 8011a5e:	4659      	mov	r1, fp
 8011a60:	f7ee fc12 	bl	8000288 <__aeabi_dsub>
 8011a64:	460b      	mov	r3, r1
 8011a66:	4926      	ldr	r1, [pc, #152]	; (8011b00 <__kernel_cos+0x180>)
 8011a68:	4602      	mov	r2, r0
 8011a6a:	2000      	movs	r0, #0
 8011a6c:	f7ee fc0c 	bl	8000288 <__aeabi_dsub>
 8011a70:	ec41 0b10 	vmov	d0, r0, r1
 8011a74:	b003      	add	sp, #12
 8011a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a7a:	4b22      	ldr	r3, [pc, #136]	; (8011b04 <__kernel_cos+0x184>)
 8011a7c:	4920      	ldr	r1, [pc, #128]	; (8011b00 <__kernel_cos+0x180>)
 8011a7e:	4598      	cmp	r8, r3
 8011a80:	bfcc      	ite	gt
 8011a82:	4d21      	ldrgt	r5, [pc, #132]	; (8011b08 <__kernel_cos+0x188>)
 8011a84:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8011a88:	2400      	movs	r4, #0
 8011a8a:	4622      	mov	r2, r4
 8011a8c:	462b      	mov	r3, r5
 8011a8e:	2000      	movs	r0, #0
 8011a90:	f7ee fbfa 	bl	8000288 <__aeabi_dsub>
 8011a94:	4622      	mov	r2, r4
 8011a96:	4680      	mov	r8, r0
 8011a98:	4689      	mov	r9, r1
 8011a9a:	462b      	mov	r3, r5
 8011a9c:	4650      	mov	r0, sl
 8011a9e:	4659      	mov	r1, fp
 8011aa0:	f7ee fbf2 	bl	8000288 <__aeabi_dsub>
 8011aa4:	4632      	mov	r2, r6
 8011aa6:	463b      	mov	r3, r7
 8011aa8:	f7ee fbee 	bl	8000288 <__aeabi_dsub>
 8011aac:	4602      	mov	r2, r0
 8011aae:	460b      	mov	r3, r1
 8011ab0:	4640      	mov	r0, r8
 8011ab2:	4649      	mov	r1, r9
 8011ab4:	e7da      	b.n	8011a6c <__kernel_cos+0xec>
 8011ab6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011af0 <__kernel_cos+0x170>
 8011aba:	e7db      	b.n	8011a74 <__kernel_cos+0xf4>
 8011abc:	f3af 8000 	nop.w
 8011ac0:	be8838d4 	.word	0xbe8838d4
 8011ac4:	bda8fae9 	.word	0xbda8fae9
 8011ac8:	bdb4b1c4 	.word	0xbdb4b1c4
 8011acc:	3e21ee9e 	.word	0x3e21ee9e
 8011ad0:	809c52ad 	.word	0x809c52ad
 8011ad4:	3e927e4f 	.word	0x3e927e4f
 8011ad8:	19cb1590 	.word	0x19cb1590
 8011adc:	3efa01a0 	.word	0x3efa01a0
 8011ae0:	16c15177 	.word	0x16c15177
 8011ae4:	3f56c16c 	.word	0x3f56c16c
 8011ae8:	5555554c 	.word	0x5555554c
 8011aec:	3fa55555 	.word	0x3fa55555
 8011af0:	00000000 	.word	0x00000000
 8011af4:	3ff00000 	.word	0x3ff00000
 8011af8:	3fe00000 	.word	0x3fe00000
 8011afc:	3fd33332 	.word	0x3fd33332
 8011b00:	3ff00000 	.word	0x3ff00000
 8011b04:	3fe90000 	.word	0x3fe90000
 8011b08:	3fd20000 	.word	0x3fd20000
 8011b0c:	00000000 	.word	0x00000000

08011b10 <__kernel_sin>:
 8011b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b14:	ed2d 8b04 	vpush	{d8-d9}
 8011b18:	eeb0 8a41 	vmov.f32	s16, s2
 8011b1c:	eef0 8a61 	vmov.f32	s17, s3
 8011b20:	ec55 4b10 	vmov	r4, r5, d0
 8011b24:	b083      	sub	sp, #12
 8011b26:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011b2a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011b2e:	9001      	str	r0, [sp, #4]
 8011b30:	da06      	bge.n	8011b40 <__kernel_sin+0x30>
 8011b32:	ee10 0a10 	vmov	r0, s0
 8011b36:	4629      	mov	r1, r5
 8011b38:	f7ef f80e 	bl	8000b58 <__aeabi_d2iz>
 8011b3c:	2800      	cmp	r0, #0
 8011b3e:	d051      	beq.n	8011be4 <__kernel_sin+0xd4>
 8011b40:	4622      	mov	r2, r4
 8011b42:	462b      	mov	r3, r5
 8011b44:	4620      	mov	r0, r4
 8011b46:	4629      	mov	r1, r5
 8011b48:	f7ee fd56 	bl	80005f8 <__aeabi_dmul>
 8011b4c:	4682      	mov	sl, r0
 8011b4e:	468b      	mov	fp, r1
 8011b50:	4602      	mov	r2, r0
 8011b52:	460b      	mov	r3, r1
 8011b54:	4620      	mov	r0, r4
 8011b56:	4629      	mov	r1, r5
 8011b58:	f7ee fd4e 	bl	80005f8 <__aeabi_dmul>
 8011b5c:	a341      	add	r3, pc, #260	; (adr r3, 8011c64 <__kernel_sin+0x154>)
 8011b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b62:	4680      	mov	r8, r0
 8011b64:	4689      	mov	r9, r1
 8011b66:	4650      	mov	r0, sl
 8011b68:	4659      	mov	r1, fp
 8011b6a:	f7ee fd45 	bl	80005f8 <__aeabi_dmul>
 8011b6e:	a33f      	add	r3, pc, #252	; (adr r3, 8011c6c <__kernel_sin+0x15c>)
 8011b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b74:	f7ee fb88 	bl	8000288 <__aeabi_dsub>
 8011b78:	4652      	mov	r2, sl
 8011b7a:	465b      	mov	r3, fp
 8011b7c:	f7ee fd3c 	bl	80005f8 <__aeabi_dmul>
 8011b80:	a33c      	add	r3, pc, #240	; (adr r3, 8011c74 <__kernel_sin+0x164>)
 8011b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b86:	f7ee fb81 	bl	800028c <__adddf3>
 8011b8a:	4652      	mov	r2, sl
 8011b8c:	465b      	mov	r3, fp
 8011b8e:	f7ee fd33 	bl	80005f8 <__aeabi_dmul>
 8011b92:	a33a      	add	r3, pc, #232	; (adr r3, 8011c7c <__kernel_sin+0x16c>)
 8011b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b98:	f7ee fb76 	bl	8000288 <__aeabi_dsub>
 8011b9c:	4652      	mov	r2, sl
 8011b9e:	465b      	mov	r3, fp
 8011ba0:	f7ee fd2a 	bl	80005f8 <__aeabi_dmul>
 8011ba4:	a337      	add	r3, pc, #220	; (adr r3, 8011c84 <__kernel_sin+0x174>)
 8011ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011baa:	f7ee fb6f 	bl	800028c <__adddf3>
 8011bae:	9b01      	ldr	r3, [sp, #4]
 8011bb0:	4606      	mov	r6, r0
 8011bb2:	460f      	mov	r7, r1
 8011bb4:	b9eb      	cbnz	r3, 8011bf2 <__kernel_sin+0xe2>
 8011bb6:	4602      	mov	r2, r0
 8011bb8:	460b      	mov	r3, r1
 8011bba:	4650      	mov	r0, sl
 8011bbc:	4659      	mov	r1, fp
 8011bbe:	f7ee fd1b 	bl	80005f8 <__aeabi_dmul>
 8011bc2:	a325      	add	r3, pc, #148	; (adr r3, 8011c58 <__kernel_sin+0x148>)
 8011bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc8:	f7ee fb5e 	bl	8000288 <__aeabi_dsub>
 8011bcc:	4642      	mov	r2, r8
 8011bce:	464b      	mov	r3, r9
 8011bd0:	f7ee fd12 	bl	80005f8 <__aeabi_dmul>
 8011bd4:	4602      	mov	r2, r0
 8011bd6:	460b      	mov	r3, r1
 8011bd8:	4620      	mov	r0, r4
 8011bda:	4629      	mov	r1, r5
 8011bdc:	f7ee fb56 	bl	800028c <__adddf3>
 8011be0:	4604      	mov	r4, r0
 8011be2:	460d      	mov	r5, r1
 8011be4:	ec45 4b10 	vmov	d0, r4, r5
 8011be8:	b003      	add	sp, #12
 8011bea:	ecbd 8b04 	vpop	{d8-d9}
 8011bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bf2:	4b1b      	ldr	r3, [pc, #108]	; (8011c60 <__kernel_sin+0x150>)
 8011bf4:	ec51 0b18 	vmov	r0, r1, d8
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	f7ee fcfd 	bl	80005f8 <__aeabi_dmul>
 8011bfe:	4632      	mov	r2, r6
 8011c00:	ec41 0b19 	vmov	d9, r0, r1
 8011c04:	463b      	mov	r3, r7
 8011c06:	4640      	mov	r0, r8
 8011c08:	4649      	mov	r1, r9
 8011c0a:	f7ee fcf5 	bl	80005f8 <__aeabi_dmul>
 8011c0e:	4602      	mov	r2, r0
 8011c10:	460b      	mov	r3, r1
 8011c12:	ec51 0b19 	vmov	r0, r1, d9
 8011c16:	f7ee fb37 	bl	8000288 <__aeabi_dsub>
 8011c1a:	4652      	mov	r2, sl
 8011c1c:	465b      	mov	r3, fp
 8011c1e:	f7ee fceb 	bl	80005f8 <__aeabi_dmul>
 8011c22:	ec53 2b18 	vmov	r2, r3, d8
 8011c26:	f7ee fb2f 	bl	8000288 <__aeabi_dsub>
 8011c2a:	a30b      	add	r3, pc, #44	; (adr r3, 8011c58 <__kernel_sin+0x148>)
 8011c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c30:	4606      	mov	r6, r0
 8011c32:	460f      	mov	r7, r1
 8011c34:	4640      	mov	r0, r8
 8011c36:	4649      	mov	r1, r9
 8011c38:	f7ee fcde 	bl	80005f8 <__aeabi_dmul>
 8011c3c:	4602      	mov	r2, r0
 8011c3e:	460b      	mov	r3, r1
 8011c40:	4630      	mov	r0, r6
 8011c42:	4639      	mov	r1, r7
 8011c44:	f7ee fb22 	bl	800028c <__adddf3>
 8011c48:	4602      	mov	r2, r0
 8011c4a:	460b      	mov	r3, r1
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	4629      	mov	r1, r5
 8011c50:	f7ee fb1a 	bl	8000288 <__aeabi_dsub>
 8011c54:	e7c4      	b.n	8011be0 <__kernel_sin+0xd0>
 8011c56:	bf00      	nop
 8011c58:	55555549 	.word	0x55555549
 8011c5c:	3fc55555 	.word	0x3fc55555
 8011c60:	3fe00000 	.word	0x3fe00000
 8011c64:	5acfd57c 	.word	0x5acfd57c
 8011c68:	3de5d93a 	.word	0x3de5d93a
 8011c6c:	8a2b9ceb 	.word	0x8a2b9ceb
 8011c70:	3e5ae5e6 	.word	0x3e5ae5e6
 8011c74:	57b1fe7d 	.word	0x57b1fe7d
 8011c78:	3ec71de3 	.word	0x3ec71de3
 8011c7c:	19c161d5 	.word	0x19c161d5
 8011c80:	3f2a01a0 	.word	0x3f2a01a0
 8011c84:	1110f8a6 	.word	0x1110f8a6
 8011c88:	3f811111 	.word	0x3f811111
 8011c8c:	00000000 	.word	0x00000000

08011c90 <__ieee754_atan2>:
 8011c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c94:	ec57 6b11 	vmov	r6, r7, d1
 8011c98:	4273      	negs	r3, r6
 8011c9a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8011e18 <__ieee754_atan2+0x188>
 8011c9e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011ca2:	4333      	orrs	r3, r6
 8011ca4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011ca8:	4543      	cmp	r3, r8
 8011caa:	ec51 0b10 	vmov	r0, r1, d0
 8011cae:	ee11 5a10 	vmov	r5, s2
 8011cb2:	d80a      	bhi.n	8011cca <__ieee754_atan2+0x3a>
 8011cb4:	4244      	negs	r4, r0
 8011cb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011cba:	4304      	orrs	r4, r0
 8011cbc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011cc0:	4544      	cmp	r4, r8
 8011cc2:	ee10 9a10 	vmov	r9, s0
 8011cc6:	468e      	mov	lr, r1
 8011cc8:	d907      	bls.n	8011cda <__ieee754_atan2+0x4a>
 8011cca:	4632      	mov	r2, r6
 8011ccc:	463b      	mov	r3, r7
 8011cce:	f7ee fadd 	bl	800028c <__adddf3>
 8011cd2:	ec41 0b10 	vmov	d0, r0, r1
 8011cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011cda:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011cde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011ce2:	4334      	orrs	r4, r6
 8011ce4:	d103      	bne.n	8011cee <__ieee754_atan2+0x5e>
 8011ce6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cea:	f001 b8d9 	b.w	8012ea0 <atan>
 8011cee:	17bc      	asrs	r4, r7, #30
 8011cf0:	f004 0402 	and.w	r4, r4, #2
 8011cf4:	ea53 0909 	orrs.w	r9, r3, r9
 8011cf8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011cfc:	d107      	bne.n	8011d0e <__ieee754_atan2+0x7e>
 8011cfe:	2c02      	cmp	r4, #2
 8011d00:	d05f      	beq.n	8011dc2 <__ieee754_atan2+0x132>
 8011d02:	2c03      	cmp	r4, #3
 8011d04:	d1e5      	bne.n	8011cd2 <__ieee754_atan2+0x42>
 8011d06:	a140      	add	r1, pc, #256	; (adr r1, 8011e08 <__ieee754_atan2+0x178>)
 8011d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d0c:	e7e1      	b.n	8011cd2 <__ieee754_atan2+0x42>
 8011d0e:	4315      	orrs	r5, r2
 8011d10:	d106      	bne.n	8011d20 <__ieee754_atan2+0x90>
 8011d12:	f1be 0f00 	cmp.w	lr, #0
 8011d16:	da5f      	bge.n	8011dd8 <__ieee754_atan2+0x148>
 8011d18:	a13d      	add	r1, pc, #244	; (adr r1, 8011e10 <__ieee754_atan2+0x180>)
 8011d1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d1e:	e7d8      	b.n	8011cd2 <__ieee754_atan2+0x42>
 8011d20:	4542      	cmp	r2, r8
 8011d22:	d10f      	bne.n	8011d44 <__ieee754_atan2+0xb4>
 8011d24:	4293      	cmp	r3, r2
 8011d26:	f104 34ff 	add.w	r4, r4, #4294967295
 8011d2a:	d107      	bne.n	8011d3c <__ieee754_atan2+0xac>
 8011d2c:	2c02      	cmp	r4, #2
 8011d2e:	d84c      	bhi.n	8011dca <__ieee754_atan2+0x13a>
 8011d30:	4b33      	ldr	r3, [pc, #204]	; (8011e00 <__ieee754_atan2+0x170>)
 8011d32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011d36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011d3a:	e7ca      	b.n	8011cd2 <__ieee754_atan2+0x42>
 8011d3c:	2c02      	cmp	r4, #2
 8011d3e:	d848      	bhi.n	8011dd2 <__ieee754_atan2+0x142>
 8011d40:	4b30      	ldr	r3, [pc, #192]	; (8011e04 <__ieee754_atan2+0x174>)
 8011d42:	e7f6      	b.n	8011d32 <__ieee754_atan2+0xa2>
 8011d44:	4543      	cmp	r3, r8
 8011d46:	d0e4      	beq.n	8011d12 <__ieee754_atan2+0x82>
 8011d48:	1a9b      	subs	r3, r3, r2
 8011d4a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011d4e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011d52:	da1e      	bge.n	8011d92 <__ieee754_atan2+0x102>
 8011d54:	2f00      	cmp	r7, #0
 8011d56:	da01      	bge.n	8011d5c <__ieee754_atan2+0xcc>
 8011d58:	323c      	adds	r2, #60	; 0x3c
 8011d5a:	db1e      	blt.n	8011d9a <__ieee754_atan2+0x10a>
 8011d5c:	4632      	mov	r2, r6
 8011d5e:	463b      	mov	r3, r7
 8011d60:	f7ee fd74 	bl	800084c <__aeabi_ddiv>
 8011d64:	ec41 0b10 	vmov	d0, r0, r1
 8011d68:	f001 fa3a 	bl	80131e0 <fabs>
 8011d6c:	f001 f898 	bl	8012ea0 <atan>
 8011d70:	ec51 0b10 	vmov	r0, r1, d0
 8011d74:	2c01      	cmp	r4, #1
 8011d76:	d013      	beq.n	8011da0 <__ieee754_atan2+0x110>
 8011d78:	2c02      	cmp	r4, #2
 8011d7a:	d015      	beq.n	8011da8 <__ieee754_atan2+0x118>
 8011d7c:	2c00      	cmp	r4, #0
 8011d7e:	d0a8      	beq.n	8011cd2 <__ieee754_atan2+0x42>
 8011d80:	a317      	add	r3, pc, #92	; (adr r3, 8011de0 <__ieee754_atan2+0x150>)
 8011d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d86:	f7ee fa7f 	bl	8000288 <__aeabi_dsub>
 8011d8a:	a317      	add	r3, pc, #92	; (adr r3, 8011de8 <__ieee754_atan2+0x158>)
 8011d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d90:	e014      	b.n	8011dbc <__ieee754_atan2+0x12c>
 8011d92:	a117      	add	r1, pc, #92	; (adr r1, 8011df0 <__ieee754_atan2+0x160>)
 8011d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d98:	e7ec      	b.n	8011d74 <__ieee754_atan2+0xe4>
 8011d9a:	2000      	movs	r0, #0
 8011d9c:	2100      	movs	r1, #0
 8011d9e:	e7e9      	b.n	8011d74 <__ieee754_atan2+0xe4>
 8011da0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011da4:	4619      	mov	r1, r3
 8011da6:	e794      	b.n	8011cd2 <__ieee754_atan2+0x42>
 8011da8:	a30d      	add	r3, pc, #52	; (adr r3, 8011de0 <__ieee754_atan2+0x150>)
 8011daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dae:	f7ee fa6b 	bl	8000288 <__aeabi_dsub>
 8011db2:	4602      	mov	r2, r0
 8011db4:	460b      	mov	r3, r1
 8011db6:	a10c      	add	r1, pc, #48	; (adr r1, 8011de8 <__ieee754_atan2+0x158>)
 8011db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dbc:	f7ee fa64 	bl	8000288 <__aeabi_dsub>
 8011dc0:	e787      	b.n	8011cd2 <__ieee754_atan2+0x42>
 8011dc2:	a109      	add	r1, pc, #36	; (adr r1, 8011de8 <__ieee754_atan2+0x158>)
 8011dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dc8:	e783      	b.n	8011cd2 <__ieee754_atan2+0x42>
 8011dca:	a10b      	add	r1, pc, #44	; (adr r1, 8011df8 <__ieee754_atan2+0x168>)
 8011dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dd0:	e77f      	b.n	8011cd2 <__ieee754_atan2+0x42>
 8011dd2:	2000      	movs	r0, #0
 8011dd4:	2100      	movs	r1, #0
 8011dd6:	e77c      	b.n	8011cd2 <__ieee754_atan2+0x42>
 8011dd8:	a105      	add	r1, pc, #20	; (adr r1, 8011df0 <__ieee754_atan2+0x160>)
 8011dda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dde:	e778      	b.n	8011cd2 <__ieee754_atan2+0x42>
 8011de0:	33145c07 	.word	0x33145c07
 8011de4:	3ca1a626 	.word	0x3ca1a626
 8011de8:	54442d18 	.word	0x54442d18
 8011dec:	400921fb 	.word	0x400921fb
 8011df0:	54442d18 	.word	0x54442d18
 8011df4:	3ff921fb 	.word	0x3ff921fb
 8011df8:	54442d18 	.word	0x54442d18
 8011dfc:	3fe921fb 	.word	0x3fe921fb
 8011e00:	08014018 	.word	0x08014018
 8011e04:	08014030 	.word	0x08014030
 8011e08:	54442d18 	.word	0x54442d18
 8011e0c:	c00921fb 	.word	0xc00921fb
 8011e10:	54442d18 	.word	0x54442d18
 8011e14:	bff921fb 	.word	0xbff921fb
 8011e18:	7ff00000 	.word	0x7ff00000

08011e1c <__ieee754_fmod>:
 8011e1c:	ec53 2b11 	vmov	r2, r3, d1
 8011e20:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8011e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e28:	ea5c 0402 	orrs.w	r4, ip, r2
 8011e2c:	ec51 0b10 	vmov	r0, r1, d0
 8011e30:	ee11 7a10 	vmov	r7, s2
 8011e34:	ee11 ea10 	vmov	lr, s2
 8011e38:	461e      	mov	r6, r3
 8011e3a:	d00c      	beq.n	8011e56 <__ieee754_fmod+0x3a>
 8011e3c:	4c78      	ldr	r4, [pc, #480]	; (8012020 <__ieee754_fmod+0x204>)
 8011e3e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8011e42:	45a0      	cmp	r8, r4
 8011e44:	4689      	mov	r9, r1
 8011e46:	dc06      	bgt.n	8011e56 <__ieee754_fmod+0x3a>
 8011e48:	4254      	negs	r4, r2
 8011e4a:	4d76      	ldr	r5, [pc, #472]	; (8012024 <__ieee754_fmod+0x208>)
 8011e4c:	4314      	orrs	r4, r2
 8011e4e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8011e52:	42ac      	cmp	r4, r5
 8011e54:	d909      	bls.n	8011e6a <__ieee754_fmod+0x4e>
 8011e56:	f7ee fbcf 	bl	80005f8 <__aeabi_dmul>
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	460b      	mov	r3, r1
 8011e5e:	f7ee fcf5 	bl	800084c <__aeabi_ddiv>
 8011e62:	ec41 0b10 	vmov	d0, r0, r1
 8011e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e6a:	45e0      	cmp	r8, ip
 8011e6c:	ee10 aa10 	vmov	sl, s0
 8011e70:	ee10 4a10 	vmov	r4, s0
 8011e74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8011e78:	dc09      	bgt.n	8011e8e <__ieee754_fmod+0x72>
 8011e7a:	dbf2      	blt.n	8011e62 <__ieee754_fmod+0x46>
 8011e7c:	4290      	cmp	r0, r2
 8011e7e:	d3f0      	bcc.n	8011e62 <__ieee754_fmod+0x46>
 8011e80:	d105      	bne.n	8011e8e <__ieee754_fmod+0x72>
 8011e82:	4b69      	ldr	r3, [pc, #420]	; (8012028 <__ieee754_fmod+0x20c>)
 8011e84:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8011e88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011e8c:	e7e9      	b.n	8011e62 <__ieee754_fmod+0x46>
 8011e8e:	4a65      	ldr	r2, [pc, #404]	; (8012024 <__ieee754_fmod+0x208>)
 8011e90:	ea19 0f02 	tst.w	r9, r2
 8011e94:	d148      	bne.n	8011f28 <__ieee754_fmod+0x10c>
 8011e96:	f1b8 0f00 	cmp.w	r8, #0
 8011e9a:	d13d      	bne.n	8011f18 <__ieee754_fmod+0xfc>
 8011e9c:	4963      	ldr	r1, [pc, #396]	; (801202c <__ieee754_fmod+0x210>)
 8011e9e:	4653      	mov	r3, sl
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	dc36      	bgt.n	8011f12 <__ieee754_fmod+0xf6>
 8011ea4:	4216      	tst	r6, r2
 8011ea6:	d14f      	bne.n	8011f48 <__ieee754_fmod+0x12c>
 8011ea8:	f1bc 0f00 	cmp.w	ip, #0
 8011eac:	d144      	bne.n	8011f38 <__ieee754_fmod+0x11c>
 8011eae:	4a5f      	ldr	r2, [pc, #380]	; (801202c <__ieee754_fmod+0x210>)
 8011eb0:	463b      	mov	r3, r7
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	dc3d      	bgt.n	8011f32 <__ieee754_fmod+0x116>
 8011eb6:	485e      	ldr	r0, [pc, #376]	; (8012030 <__ieee754_fmod+0x214>)
 8011eb8:	4281      	cmp	r1, r0
 8011eba:	db4a      	blt.n	8011f52 <__ieee754_fmod+0x136>
 8011ebc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011ec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011ec4:	485a      	ldr	r0, [pc, #360]	; (8012030 <__ieee754_fmod+0x214>)
 8011ec6:	4282      	cmp	r2, r0
 8011ec8:	db57      	blt.n	8011f7a <__ieee754_fmod+0x15e>
 8011eca:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8011ece:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8011ed2:	1a89      	subs	r1, r1, r2
 8011ed4:	1b98      	subs	r0, r3, r6
 8011ed6:	eba4 070e 	sub.w	r7, r4, lr
 8011eda:	2900      	cmp	r1, #0
 8011edc:	d162      	bne.n	8011fa4 <__ieee754_fmod+0x188>
 8011ede:	4574      	cmp	r4, lr
 8011ee0:	bf38      	it	cc
 8011ee2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8011ee6:	2800      	cmp	r0, #0
 8011ee8:	bfa4      	itt	ge
 8011eea:	463c      	movge	r4, r7
 8011eec:	4603      	movge	r3, r0
 8011eee:	ea53 0104 	orrs.w	r1, r3, r4
 8011ef2:	d0c6      	beq.n	8011e82 <__ieee754_fmod+0x66>
 8011ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011ef8:	db69      	blt.n	8011fce <__ieee754_fmod+0x1b2>
 8011efa:	494d      	ldr	r1, [pc, #308]	; (8012030 <__ieee754_fmod+0x214>)
 8011efc:	428a      	cmp	r2, r1
 8011efe:	db6c      	blt.n	8011fda <__ieee754_fmod+0x1be>
 8011f00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011f04:	432b      	orrs	r3, r5
 8011f06:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8011f0a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011f0e:	4620      	mov	r0, r4
 8011f10:	e7a7      	b.n	8011e62 <__ieee754_fmod+0x46>
 8011f12:	3901      	subs	r1, #1
 8011f14:	005b      	lsls	r3, r3, #1
 8011f16:	e7c3      	b.n	8011ea0 <__ieee754_fmod+0x84>
 8011f18:	4945      	ldr	r1, [pc, #276]	; (8012030 <__ieee754_fmod+0x214>)
 8011f1a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	ddc0      	ble.n	8011ea4 <__ieee754_fmod+0x88>
 8011f22:	3901      	subs	r1, #1
 8011f24:	005b      	lsls	r3, r3, #1
 8011f26:	e7fa      	b.n	8011f1e <__ieee754_fmod+0x102>
 8011f28:	ea4f 5128 	mov.w	r1, r8, asr #20
 8011f2c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011f30:	e7b8      	b.n	8011ea4 <__ieee754_fmod+0x88>
 8011f32:	3a01      	subs	r2, #1
 8011f34:	005b      	lsls	r3, r3, #1
 8011f36:	e7bc      	b.n	8011eb2 <__ieee754_fmod+0x96>
 8011f38:	4a3d      	ldr	r2, [pc, #244]	; (8012030 <__ieee754_fmod+0x214>)
 8011f3a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	ddb9      	ble.n	8011eb6 <__ieee754_fmod+0x9a>
 8011f42:	3a01      	subs	r2, #1
 8011f44:	005b      	lsls	r3, r3, #1
 8011f46:	e7fa      	b.n	8011f3e <__ieee754_fmod+0x122>
 8011f48:	ea4f 522c 	mov.w	r2, ip, asr #20
 8011f4c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011f50:	e7b1      	b.n	8011eb6 <__ieee754_fmod+0x9a>
 8011f52:	1a40      	subs	r0, r0, r1
 8011f54:	281f      	cmp	r0, #31
 8011f56:	dc0a      	bgt.n	8011f6e <__ieee754_fmod+0x152>
 8011f58:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8011f5c:	fa08 f800 	lsl.w	r8, r8, r0
 8011f60:	fa2a f303 	lsr.w	r3, sl, r3
 8011f64:	ea43 0308 	orr.w	r3, r3, r8
 8011f68:	fa0a f400 	lsl.w	r4, sl, r0
 8011f6c:	e7aa      	b.n	8011ec4 <__ieee754_fmod+0xa8>
 8011f6e:	4b31      	ldr	r3, [pc, #196]	; (8012034 <__ieee754_fmod+0x218>)
 8011f70:	1a5b      	subs	r3, r3, r1
 8011f72:	fa0a f303 	lsl.w	r3, sl, r3
 8011f76:	2400      	movs	r4, #0
 8011f78:	e7a4      	b.n	8011ec4 <__ieee754_fmod+0xa8>
 8011f7a:	1a80      	subs	r0, r0, r2
 8011f7c:	281f      	cmp	r0, #31
 8011f7e:	dc0a      	bgt.n	8011f96 <__ieee754_fmod+0x17a>
 8011f80:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8011f84:	fa0c fc00 	lsl.w	ip, ip, r0
 8011f88:	fa27 f606 	lsr.w	r6, r7, r6
 8011f8c:	ea46 060c 	orr.w	r6, r6, ip
 8011f90:	fa07 fe00 	lsl.w	lr, r7, r0
 8011f94:	e79d      	b.n	8011ed2 <__ieee754_fmod+0xb6>
 8011f96:	4e27      	ldr	r6, [pc, #156]	; (8012034 <__ieee754_fmod+0x218>)
 8011f98:	1ab6      	subs	r6, r6, r2
 8011f9a:	fa07 f606 	lsl.w	r6, r7, r6
 8011f9e:	f04f 0e00 	mov.w	lr, #0
 8011fa2:	e796      	b.n	8011ed2 <__ieee754_fmod+0xb6>
 8011fa4:	4574      	cmp	r4, lr
 8011fa6:	bf38      	it	cc
 8011fa8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8011fac:	2800      	cmp	r0, #0
 8011fae:	da05      	bge.n	8011fbc <__ieee754_fmod+0x1a0>
 8011fb0:	0fe0      	lsrs	r0, r4, #31
 8011fb2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011fb6:	0064      	lsls	r4, r4, #1
 8011fb8:	3901      	subs	r1, #1
 8011fba:	e78b      	b.n	8011ed4 <__ieee754_fmod+0xb8>
 8011fbc:	ea50 0307 	orrs.w	r3, r0, r7
 8011fc0:	f43f af5f 	beq.w	8011e82 <__ieee754_fmod+0x66>
 8011fc4:	0ffb      	lsrs	r3, r7, #31
 8011fc6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8011fca:	007c      	lsls	r4, r7, #1
 8011fcc:	e7f4      	b.n	8011fb8 <__ieee754_fmod+0x19c>
 8011fce:	0fe1      	lsrs	r1, r4, #31
 8011fd0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8011fd4:	0064      	lsls	r4, r4, #1
 8011fd6:	3a01      	subs	r2, #1
 8011fd8:	e78c      	b.n	8011ef4 <__ieee754_fmod+0xd8>
 8011fda:	1a89      	subs	r1, r1, r2
 8011fdc:	2914      	cmp	r1, #20
 8011fde:	dc0a      	bgt.n	8011ff6 <__ieee754_fmod+0x1da>
 8011fe0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8011fe4:	fa03 f202 	lsl.w	r2, r3, r2
 8011fe8:	40cc      	lsrs	r4, r1
 8011fea:	4322      	orrs	r2, r4
 8011fec:	410b      	asrs	r3, r1
 8011fee:	ea43 0105 	orr.w	r1, r3, r5
 8011ff2:	4610      	mov	r0, r2
 8011ff4:	e735      	b.n	8011e62 <__ieee754_fmod+0x46>
 8011ff6:	291f      	cmp	r1, #31
 8011ff8:	dc07      	bgt.n	801200a <__ieee754_fmod+0x1ee>
 8011ffa:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8011ffe:	40cc      	lsrs	r4, r1
 8012000:	fa03 f202 	lsl.w	r2, r3, r2
 8012004:	4322      	orrs	r2, r4
 8012006:	462b      	mov	r3, r5
 8012008:	e7f1      	b.n	8011fee <__ieee754_fmod+0x1d2>
 801200a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801200e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012012:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8012016:	32e2      	adds	r2, #226	; 0xe2
 8012018:	fa43 f202 	asr.w	r2, r3, r2
 801201c:	e7f3      	b.n	8012006 <__ieee754_fmod+0x1ea>
 801201e:	bf00      	nop
 8012020:	7fefffff 	.word	0x7fefffff
 8012024:	7ff00000 	.word	0x7ff00000
 8012028:	08014048 	.word	0x08014048
 801202c:	fffffbed 	.word	0xfffffbed
 8012030:	fffffc02 	.word	0xfffffc02
 8012034:	fffffbe2 	.word	0xfffffbe2

08012038 <__ieee754_pow>:
 8012038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801203c:	ed2d 8b06 	vpush	{d8-d10}
 8012040:	b089      	sub	sp, #36	; 0x24
 8012042:	ed8d 1b00 	vstr	d1, [sp]
 8012046:	e9dd 2900 	ldrd	r2, r9, [sp]
 801204a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801204e:	ea58 0102 	orrs.w	r1, r8, r2
 8012052:	ec57 6b10 	vmov	r6, r7, d0
 8012056:	d115      	bne.n	8012084 <__ieee754_pow+0x4c>
 8012058:	19b3      	adds	r3, r6, r6
 801205a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801205e:	4152      	adcs	r2, r2
 8012060:	4299      	cmp	r1, r3
 8012062:	4b89      	ldr	r3, [pc, #548]	; (8012288 <__ieee754_pow+0x250>)
 8012064:	4193      	sbcs	r3, r2
 8012066:	f080 84d1 	bcs.w	8012a0c <__ieee754_pow+0x9d4>
 801206a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801206e:	4630      	mov	r0, r6
 8012070:	4639      	mov	r1, r7
 8012072:	f7ee f90b 	bl	800028c <__adddf3>
 8012076:	ec41 0b10 	vmov	d0, r0, r1
 801207a:	b009      	add	sp, #36	; 0x24
 801207c:	ecbd 8b06 	vpop	{d8-d10}
 8012080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012084:	4b81      	ldr	r3, [pc, #516]	; (801228c <__ieee754_pow+0x254>)
 8012086:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801208a:	429c      	cmp	r4, r3
 801208c:	ee10 aa10 	vmov	sl, s0
 8012090:	463d      	mov	r5, r7
 8012092:	dc06      	bgt.n	80120a2 <__ieee754_pow+0x6a>
 8012094:	d101      	bne.n	801209a <__ieee754_pow+0x62>
 8012096:	2e00      	cmp	r6, #0
 8012098:	d1e7      	bne.n	801206a <__ieee754_pow+0x32>
 801209a:	4598      	cmp	r8, r3
 801209c:	dc01      	bgt.n	80120a2 <__ieee754_pow+0x6a>
 801209e:	d10f      	bne.n	80120c0 <__ieee754_pow+0x88>
 80120a0:	b172      	cbz	r2, 80120c0 <__ieee754_pow+0x88>
 80120a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80120a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80120aa:	ea55 050a 	orrs.w	r5, r5, sl
 80120ae:	d1dc      	bne.n	801206a <__ieee754_pow+0x32>
 80120b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80120b4:	18db      	adds	r3, r3, r3
 80120b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80120ba:	4152      	adcs	r2, r2
 80120bc:	429d      	cmp	r5, r3
 80120be:	e7d0      	b.n	8012062 <__ieee754_pow+0x2a>
 80120c0:	2d00      	cmp	r5, #0
 80120c2:	da3b      	bge.n	801213c <__ieee754_pow+0x104>
 80120c4:	4b72      	ldr	r3, [pc, #456]	; (8012290 <__ieee754_pow+0x258>)
 80120c6:	4598      	cmp	r8, r3
 80120c8:	dc51      	bgt.n	801216e <__ieee754_pow+0x136>
 80120ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80120ce:	4598      	cmp	r8, r3
 80120d0:	f340 84ab 	ble.w	8012a2a <__ieee754_pow+0x9f2>
 80120d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80120d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80120dc:	2b14      	cmp	r3, #20
 80120de:	dd0f      	ble.n	8012100 <__ieee754_pow+0xc8>
 80120e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80120e4:	fa22 f103 	lsr.w	r1, r2, r3
 80120e8:	fa01 f303 	lsl.w	r3, r1, r3
 80120ec:	4293      	cmp	r3, r2
 80120ee:	f040 849c 	bne.w	8012a2a <__ieee754_pow+0x9f2>
 80120f2:	f001 0101 	and.w	r1, r1, #1
 80120f6:	f1c1 0302 	rsb	r3, r1, #2
 80120fa:	9304      	str	r3, [sp, #16]
 80120fc:	b182      	cbz	r2, 8012120 <__ieee754_pow+0xe8>
 80120fe:	e05f      	b.n	80121c0 <__ieee754_pow+0x188>
 8012100:	2a00      	cmp	r2, #0
 8012102:	d15b      	bne.n	80121bc <__ieee754_pow+0x184>
 8012104:	f1c3 0314 	rsb	r3, r3, #20
 8012108:	fa48 f103 	asr.w	r1, r8, r3
 801210c:	fa01 f303 	lsl.w	r3, r1, r3
 8012110:	4543      	cmp	r3, r8
 8012112:	f040 8487 	bne.w	8012a24 <__ieee754_pow+0x9ec>
 8012116:	f001 0101 	and.w	r1, r1, #1
 801211a:	f1c1 0302 	rsb	r3, r1, #2
 801211e:	9304      	str	r3, [sp, #16]
 8012120:	4b5c      	ldr	r3, [pc, #368]	; (8012294 <__ieee754_pow+0x25c>)
 8012122:	4598      	cmp	r8, r3
 8012124:	d132      	bne.n	801218c <__ieee754_pow+0x154>
 8012126:	f1b9 0f00 	cmp.w	r9, #0
 801212a:	f280 8477 	bge.w	8012a1c <__ieee754_pow+0x9e4>
 801212e:	4959      	ldr	r1, [pc, #356]	; (8012294 <__ieee754_pow+0x25c>)
 8012130:	4632      	mov	r2, r6
 8012132:	463b      	mov	r3, r7
 8012134:	2000      	movs	r0, #0
 8012136:	f7ee fb89 	bl	800084c <__aeabi_ddiv>
 801213a:	e79c      	b.n	8012076 <__ieee754_pow+0x3e>
 801213c:	2300      	movs	r3, #0
 801213e:	9304      	str	r3, [sp, #16]
 8012140:	2a00      	cmp	r2, #0
 8012142:	d13d      	bne.n	80121c0 <__ieee754_pow+0x188>
 8012144:	4b51      	ldr	r3, [pc, #324]	; (801228c <__ieee754_pow+0x254>)
 8012146:	4598      	cmp	r8, r3
 8012148:	d1ea      	bne.n	8012120 <__ieee754_pow+0xe8>
 801214a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801214e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012152:	ea53 030a 	orrs.w	r3, r3, sl
 8012156:	f000 8459 	beq.w	8012a0c <__ieee754_pow+0x9d4>
 801215a:	4b4f      	ldr	r3, [pc, #316]	; (8012298 <__ieee754_pow+0x260>)
 801215c:	429c      	cmp	r4, r3
 801215e:	dd08      	ble.n	8012172 <__ieee754_pow+0x13a>
 8012160:	f1b9 0f00 	cmp.w	r9, #0
 8012164:	f2c0 8456 	blt.w	8012a14 <__ieee754_pow+0x9dc>
 8012168:	e9dd 0100 	ldrd	r0, r1, [sp]
 801216c:	e783      	b.n	8012076 <__ieee754_pow+0x3e>
 801216e:	2302      	movs	r3, #2
 8012170:	e7e5      	b.n	801213e <__ieee754_pow+0x106>
 8012172:	f1b9 0f00 	cmp.w	r9, #0
 8012176:	f04f 0000 	mov.w	r0, #0
 801217a:	f04f 0100 	mov.w	r1, #0
 801217e:	f6bf af7a 	bge.w	8012076 <__ieee754_pow+0x3e>
 8012182:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012186:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801218a:	e774      	b.n	8012076 <__ieee754_pow+0x3e>
 801218c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012190:	d106      	bne.n	80121a0 <__ieee754_pow+0x168>
 8012192:	4632      	mov	r2, r6
 8012194:	463b      	mov	r3, r7
 8012196:	4630      	mov	r0, r6
 8012198:	4639      	mov	r1, r7
 801219a:	f7ee fa2d 	bl	80005f8 <__aeabi_dmul>
 801219e:	e76a      	b.n	8012076 <__ieee754_pow+0x3e>
 80121a0:	4b3e      	ldr	r3, [pc, #248]	; (801229c <__ieee754_pow+0x264>)
 80121a2:	4599      	cmp	r9, r3
 80121a4:	d10c      	bne.n	80121c0 <__ieee754_pow+0x188>
 80121a6:	2d00      	cmp	r5, #0
 80121a8:	db0a      	blt.n	80121c0 <__ieee754_pow+0x188>
 80121aa:	ec47 6b10 	vmov	d0, r6, r7
 80121ae:	b009      	add	sp, #36	; 0x24
 80121b0:	ecbd 8b06 	vpop	{d8-d10}
 80121b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b8:	f7ff bb06 	b.w	80117c8 <__ieee754_sqrt>
 80121bc:	2300      	movs	r3, #0
 80121be:	9304      	str	r3, [sp, #16]
 80121c0:	ec47 6b10 	vmov	d0, r6, r7
 80121c4:	f001 f80c 	bl	80131e0 <fabs>
 80121c8:	ec51 0b10 	vmov	r0, r1, d0
 80121cc:	f1ba 0f00 	cmp.w	sl, #0
 80121d0:	d129      	bne.n	8012226 <__ieee754_pow+0x1ee>
 80121d2:	b124      	cbz	r4, 80121de <__ieee754_pow+0x1a6>
 80121d4:	4b2f      	ldr	r3, [pc, #188]	; (8012294 <__ieee754_pow+0x25c>)
 80121d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80121da:	429a      	cmp	r2, r3
 80121dc:	d123      	bne.n	8012226 <__ieee754_pow+0x1ee>
 80121de:	f1b9 0f00 	cmp.w	r9, #0
 80121e2:	da05      	bge.n	80121f0 <__ieee754_pow+0x1b8>
 80121e4:	4602      	mov	r2, r0
 80121e6:	460b      	mov	r3, r1
 80121e8:	2000      	movs	r0, #0
 80121ea:	492a      	ldr	r1, [pc, #168]	; (8012294 <__ieee754_pow+0x25c>)
 80121ec:	f7ee fb2e 	bl	800084c <__aeabi_ddiv>
 80121f0:	2d00      	cmp	r5, #0
 80121f2:	f6bf af40 	bge.w	8012076 <__ieee754_pow+0x3e>
 80121f6:	9b04      	ldr	r3, [sp, #16]
 80121f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80121fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012200:	431c      	orrs	r4, r3
 8012202:	d108      	bne.n	8012216 <__ieee754_pow+0x1de>
 8012204:	4602      	mov	r2, r0
 8012206:	460b      	mov	r3, r1
 8012208:	4610      	mov	r0, r2
 801220a:	4619      	mov	r1, r3
 801220c:	f7ee f83c 	bl	8000288 <__aeabi_dsub>
 8012210:	4602      	mov	r2, r0
 8012212:	460b      	mov	r3, r1
 8012214:	e78f      	b.n	8012136 <__ieee754_pow+0xfe>
 8012216:	9b04      	ldr	r3, [sp, #16]
 8012218:	2b01      	cmp	r3, #1
 801221a:	f47f af2c 	bne.w	8012076 <__ieee754_pow+0x3e>
 801221e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012222:	4619      	mov	r1, r3
 8012224:	e727      	b.n	8012076 <__ieee754_pow+0x3e>
 8012226:	0feb      	lsrs	r3, r5, #31
 8012228:	3b01      	subs	r3, #1
 801222a:	9306      	str	r3, [sp, #24]
 801222c:	9a06      	ldr	r2, [sp, #24]
 801222e:	9b04      	ldr	r3, [sp, #16]
 8012230:	4313      	orrs	r3, r2
 8012232:	d102      	bne.n	801223a <__ieee754_pow+0x202>
 8012234:	4632      	mov	r2, r6
 8012236:	463b      	mov	r3, r7
 8012238:	e7e6      	b.n	8012208 <__ieee754_pow+0x1d0>
 801223a:	4b19      	ldr	r3, [pc, #100]	; (80122a0 <__ieee754_pow+0x268>)
 801223c:	4598      	cmp	r8, r3
 801223e:	f340 80fb 	ble.w	8012438 <__ieee754_pow+0x400>
 8012242:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012246:	4598      	cmp	r8, r3
 8012248:	4b13      	ldr	r3, [pc, #76]	; (8012298 <__ieee754_pow+0x260>)
 801224a:	dd0c      	ble.n	8012266 <__ieee754_pow+0x22e>
 801224c:	429c      	cmp	r4, r3
 801224e:	dc0f      	bgt.n	8012270 <__ieee754_pow+0x238>
 8012250:	f1b9 0f00 	cmp.w	r9, #0
 8012254:	da0f      	bge.n	8012276 <__ieee754_pow+0x23e>
 8012256:	2000      	movs	r0, #0
 8012258:	b009      	add	sp, #36	; 0x24
 801225a:	ecbd 8b06 	vpop	{d8-d10}
 801225e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012262:	f001 b86e 	b.w	8013342 <__math_oflow>
 8012266:	429c      	cmp	r4, r3
 8012268:	dbf2      	blt.n	8012250 <__ieee754_pow+0x218>
 801226a:	4b0a      	ldr	r3, [pc, #40]	; (8012294 <__ieee754_pow+0x25c>)
 801226c:	429c      	cmp	r4, r3
 801226e:	dd19      	ble.n	80122a4 <__ieee754_pow+0x26c>
 8012270:	f1b9 0f00 	cmp.w	r9, #0
 8012274:	dcef      	bgt.n	8012256 <__ieee754_pow+0x21e>
 8012276:	2000      	movs	r0, #0
 8012278:	b009      	add	sp, #36	; 0x24
 801227a:	ecbd 8b06 	vpop	{d8-d10}
 801227e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012282:	f001 b855 	b.w	8013330 <__math_uflow>
 8012286:	bf00      	nop
 8012288:	fff00000 	.word	0xfff00000
 801228c:	7ff00000 	.word	0x7ff00000
 8012290:	433fffff 	.word	0x433fffff
 8012294:	3ff00000 	.word	0x3ff00000
 8012298:	3fefffff 	.word	0x3fefffff
 801229c:	3fe00000 	.word	0x3fe00000
 80122a0:	41e00000 	.word	0x41e00000
 80122a4:	4b60      	ldr	r3, [pc, #384]	; (8012428 <__ieee754_pow+0x3f0>)
 80122a6:	2200      	movs	r2, #0
 80122a8:	f7ed ffee 	bl	8000288 <__aeabi_dsub>
 80122ac:	a354      	add	r3, pc, #336	; (adr r3, 8012400 <__ieee754_pow+0x3c8>)
 80122ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b2:	4604      	mov	r4, r0
 80122b4:	460d      	mov	r5, r1
 80122b6:	f7ee f99f 	bl	80005f8 <__aeabi_dmul>
 80122ba:	a353      	add	r3, pc, #332	; (adr r3, 8012408 <__ieee754_pow+0x3d0>)
 80122bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c0:	4606      	mov	r6, r0
 80122c2:	460f      	mov	r7, r1
 80122c4:	4620      	mov	r0, r4
 80122c6:	4629      	mov	r1, r5
 80122c8:	f7ee f996 	bl	80005f8 <__aeabi_dmul>
 80122cc:	4b57      	ldr	r3, [pc, #348]	; (801242c <__ieee754_pow+0x3f4>)
 80122ce:	4682      	mov	sl, r0
 80122d0:	468b      	mov	fp, r1
 80122d2:	2200      	movs	r2, #0
 80122d4:	4620      	mov	r0, r4
 80122d6:	4629      	mov	r1, r5
 80122d8:	f7ee f98e 	bl	80005f8 <__aeabi_dmul>
 80122dc:	4602      	mov	r2, r0
 80122de:	460b      	mov	r3, r1
 80122e0:	a14b      	add	r1, pc, #300	; (adr r1, 8012410 <__ieee754_pow+0x3d8>)
 80122e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122e6:	f7ed ffcf 	bl	8000288 <__aeabi_dsub>
 80122ea:	4622      	mov	r2, r4
 80122ec:	462b      	mov	r3, r5
 80122ee:	f7ee f983 	bl	80005f8 <__aeabi_dmul>
 80122f2:	4602      	mov	r2, r0
 80122f4:	460b      	mov	r3, r1
 80122f6:	2000      	movs	r0, #0
 80122f8:	494d      	ldr	r1, [pc, #308]	; (8012430 <__ieee754_pow+0x3f8>)
 80122fa:	f7ed ffc5 	bl	8000288 <__aeabi_dsub>
 80122fe:	4622      	mov	r2, r4
 8012300:	4680      	mov	r8, r0
 8012302:	4689      	mov	r9, r1
 8012304:	462b      	mov	r3, r5
 8012306:	4620      	mov	r0, r4
 8012308:	4629      	mov	r1, r5
 801230a:	f7ee f975 	bl	80005f8 <__aeabi_dmul>
 801230e:	4602      	mov	r2, r0
 8012310:	460b      	mov	r3, r1
 8012312:	4640      	mov	r0, r8
 8012314:	4649      	mov	r1, r9
 8012316:	f7ee f96f 	bl	80005f8 <__aeabi_dmul>
 801231a:	a33f      	add	r3, pc, #252	; (adr r3, 8012418 <__ieee754_pow+0x3e0>)
 801231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012320:	f7ee f96a 	bl	80005f8 <__aeabi_dmul>
 8012324:	4602      	mov	r2, r0
 8012326:	460b      	mov	r3, r1
 8012328:	4650      	mov	r0, sl
 801232a:	4659      	mov	r1, fp
 801232c:	f7ed ffac 	bl	8000288 <__aeabi_dsub>
 8012330:	4602      	mov	r2, r0
 8012332:	460b      	mov	r3, r1
 8012334:	4680      	mov	r8, r0
 8012336:	4689      	mov	r9, r1
 8012338:	4630      	mov	r0, r6
 801233a:	4639      	mov	r1, r7
 801233c:	f7ed ffa6 	bl	800028c <__adddf3>
 8012340:	2000      	movs	r0, #0
 8012342:	4632      	mov	r2, r6
 8012344:	463b      	mov	r3, r7
 8012346:	4604      	mov	r4, r0
 8012348:	460d      	mov	r5, r1
 801234a:	f7ed ff9d 	bl	8000288 <__aeabi_dsub>
 801234e:	4602      	mov	r2, r0
 8012350:	460b      	mov	r3, r1
 8012352:	4640      	mov	r0, r8
 8012354:	4649      	mov	r1, r9
 8012356:	f7ed ff97 	bl	8000288 <__aeabi_dsub>
 801235a:	9b04      	ldr	r3, [sp, #16]
 801235c:	9a06      	ldr	r2, [sp, #24]
 801235e:	3b01      	subs	r3, #1
 8012360:	4313      	orrs	r3, r2
 8012362:	4682      	mov	sl, r0
 8012364:	468b      	mov	fp, r1
 8012366:	f040 81e7 	bne.w	8012738 <__ieee754_pow+0x700>
 801236a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012420 <__ieee754_pow+0x3e8>
 801236e:	eeb0 8a47 	vmov.f32	s16, s14
 8012372:	eef0 8a67 	vmov.f32	s17, s15
 8012376:	e9dd 6700 	ldrd	r6, r7, [sp]
 801237a:	2600      	movs	r6, #0
 801237c:	4632      	mov	r2, r6
 801237e:	463b      	mov	r3, r7
 8012380:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012384:	f7ed ff80 	bl	8000288 <__aeabi_dsub>
 8012388:	4622      	mov	r2, r4
 801238a:	462b      	mov	r3, r5
 801238c:	f7ee f934 	bl	80005f8 <__aeabi_dmul>
 8012390:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012394:	4680      	mov	r8, r0
 8012396:	4689      	mov	r9, r1
 8012398:	4650      	mov	r0, sl
 801239a:	4659      	mov	r1, fp
 801239c:	f7ee f92c 	bl	80005f8 <__aeabi_dmul>
 80123a0:	4602      	mov	r2, r0
 80123a2:	460b      	mov	r3, r1
 80123a4:	4640      	mov	r0, r8
 80123a6:	4649      	mov	r1, r9
 80123a8:	f7ed ff70 	bl	800028c <__adddf3>
 80123ac:	4632      	mov	r2, r6
 80123ae:	463b      	mov	r3, r7
 80123b0:	4680      	mov	r8, r0
 80123b2:	4689      	mov	r9, r1
 80123b4:	4620      	mov	r0, r4
 80123b6:	4629      	mov	r1, r5
 80123b8:	f7ee f91e 	bl	80005f8 <__aeabi_dmul>
 80123bc:	460b      	mov	r3, r1
 80123be:	4604      	mov	r4, r0
 80123c0:	460d      	mov	r5, r1
 80123c2:	4602      	mov	r2, r0
 80123c4:	4649      	mov	r1, r9
 80123c6:	4640      	mov	r0, r8
 80123c8:	f7ed ff60 	bl	800028c <__adddf3>
 80123cc:	4b19      	ldr	r3, [pc, #100]	; (8012434 <__ieee754_pow+0x3fc>)
 80123ce:	4299      	cmp	r1, r3
 80123d0:	ec45 4b19 	vmov	d9, r4, r5
 80123d4:	4606      	mov	r6, r0
 80123d6:	460f      	mov	r7, r1
 80123d8:	468b      	mov	fp, r1
 80123da:	f340 82f0 	ble.w	80129be <__ieee754_pow+0x986>
 80123de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80123e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80123e6:	4303      	orrs	r3, r0
 80123e8:	f000 81e4 	beq.w	80127b4 <__ieee754_pow+0x77c>
 80123ec:	ec51 0b18 	vmov	r0, r1, d8
 80123f0:	2200      	movs	r2, #0
 80123f2:	2300      	movs	r3, #0
 80123f4:	f7ee fb72 	bl	8000adc <__aeabi_dcmplt>
 80123f8:	3800      	subs	r0, #0
 80123fa:	bf18      	it	ne
 80123fc:	2001      	movne	r0, #1
 80123fe:	e72b      	b.n	8012258 <__ieee754_pow+0x220>
 8012400:	60000000 	.word	0x60000000
 8012404:	3ff71547 	.word	0x3ff71547
 8012408:	f85ddf44 	.word	0xf85ddf44
 801240c:	3e54ae0b 	.word	0x3e54ae0b
 8012410:	55555555 	.word	0x55555555
 8012414:	3fd55555 	.word	0x3fd55555
 8012418:	652b82fe 	.word	0x652b82fe
 801241c:	3ff71547 	.word	0x3ff71547
 8012420:	00000000 	.word	0x00000000
 8012424:	bff00000 	.word	0xbff00000
 8012428:	3ff00000 	.word	0x3ff00000
 801242c:	3fd00000 	.word	0x3fd00000
 8012430:	3fe00000 	.word	0x3fe00000
 8012434:	408fffff 	.word	0x408fffff
 8012438:	4bd5      	ldr	r3, [pc, #852]	; (8012790 <__ieee754_pow+0x758>)
 801243a:	402b      	ands	r3, r5
 801243c:	2200      	movs	r2, #0
 801243e:	b92b      	cbnz	r3, 801244c <__ieee754_pow+0x414>
 8012440:	4bd4      	ldr	r3, [pc, #848]	; (8012794 <__ieee754_pow+0x75c>)
 8012442:	f7ee f8d9 	bl	80005f8 <__aeabi_dmul>
 8012446:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801244a:	460c      	mov	r4, r1
 801244c:	1523      	asrs	r3, r4, #20
 801244e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012452:	4413      	add	r3, r2
 8012454:	9305      	str	r3, [sp, #20]
 8012456:	4bd0      	ldr	r3, [pc, #832]	; (8012798 <__ieee754_pow+0x760>)
 8012458:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801245c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012460:	429c      	cmp	r4, r3
 8012462:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012466:	dd08      	ble.n	801247a <__ieee754_pow+0x442>
 8012468:	4bcc      	ldr	r3, [pc, #816]	; (801279c <__ieee754_pow+0x764>)
 801246a:	429c      	cmp	r4, r3
 801246c:	f340 8162 	ble.w	8012734 <__ieee754_pow+0x6fc>
 8012470:	9b05      	ldr	r3, [sp, #20]
 8012472:	3301      	adds	r3, #1
 8012474:	9305      	str	r3, [sp, #20]
 8012476:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801247a:	2400      	movs	r4, #0
 801247c:	00e3      	lsls	r3, r4, #3
 801247e:	9307      	str	r3, [sp, #28]
 8012480:	4bc7      	ldr	r3, [pc, #796]	; (80127a0 <__ieee754_pow+0x768>)
 8012482:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012486:	ed93 7b00 	vldr	d7, [r3]
 801248a:	4629      	mov	r1, r5
 801248c:	ec53 2b17 	vmov	r2, r3, d7
 8012490:	eeb0 9a47 	vmov.f32	s18, s14
 8012494:	eef0 9a67 	vmov.f32	s19, s15
 8012498:	4682      	mov	sl, r0
 801249a:	f7ed fef5 	bl	8000288 <__aeabi_dsub>
 801249e:	4652      	mov	r2, sl
 80124a0:	4606      	mov	r6, r0
 80124a2:	460f      	mov	r7, r1
 80124a4:	462b      	mov	r3, r5
 80124a6:	ec51 0b19 	vmov	r0, r1, d9
 80124aa:	f7ed feef 	bl	800028c <__adddf3>
 80124ae:	4602      	mov	r2, r0
 80124b0:	460b      	mov	r3, r1
 80124b2:	2000      	movs	r0, #0
 80124b4:	49bb      	ldr	r1, [pc, #748]	; (80127a4 <__ieee754_pow+0x76c>)
 80124b6:	f7ee f9c9 	bl	800084c <__aeabi_ddiv>
 80124ba:	ec41 0b1a 	vmov	d10, r0, r1
 80124be:	4602      	mov	r2, r0
 80124c0:	460b      	mov	r3, r1
 80124c2:	4630      	mov	r0, r6
 80124c4:	4639      	mov	r1, r7
 80124c6:	f7ee f897 	bl	80005f8 <__aeabi_dmul>
 80124ca:	2300      	movs	r3, #0
 80124cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124d0:	9302      	str	r3, [sp, #8]
 80124d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80124d6:	46ab      	mov	fp, r5
 80124d8:	106d      	asrs	r5, r5, #1
 80124da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80124de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80124e2:	ec41 0b18 	vmov	d8, r0, r1
 80124e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80124ea:	2200      	movs	r2, #0
 80124ec:	4640      	mov	r0, r8
 80124ee:	4649      	mov	r1, r9
 80124f0:	4614      	mov	r4, r2
 80124f2:	461d      	mov	r5, r3
 80124f4:	f7ee f880 	bl	80005f8 <__aeabi_dmul>
 80124f8:	4602      	mov	r2, r0
 80124fa:	460b      	mov	r3, r1
 80124fc:	4630      	mov	r0, r6
 80124fe:	4639      	mov	r1, r7
 8012500:	f7ed fec2 	bl	8000288 <__aeabi_dsub>
 8012504:	ec53 2b19 	vmov	r2, r3, d9
 8012508:	4606      	mov	r6, r0
 801250a:	460f      	mov	r7, r1
 801250c:	4620      	mov	r0, r4
 801250e:	4629      	mov	r1, r5
 8012510:	f7ed feba 	bl	8000288 <__aeabi_dsub>
 8012514:	4602      	mov	r2, r0
 8012516:	460b      	mov	r3, r1
 8012518:	4650      	mov	r0, sl
 801251a:	4659      	mov	r1, fp
 801251c:	f7ed feb4 	bl	8000288 <__aeabi_dsub>
 8012520:	4642      	mov	r2, r8
 8012522:	464b      	mov	r3, r9
 8012524:	f7ee f868 	bl	80005f8 <__aeabi_dmul>
 8012528:	4602      	mov	r2, r0
 801252a:	460b      	mov	r3, r1
 801252c:	4630      	mov	r0, r6
 801252e:	4639      	mov	r1, r7
 8012530:	f7ed feaa 	bl	8000288 <__aeabi_dsub>
 8012534:	ec53 2b1a 	vmov	r2, r3, d10
 8012538:	f7ee f85e 	bl	80005f8 <__aeabi_dmul>
 801253c:	ec53 2b18 	vmov	r2, r3, d8
 8012540:	ec41 0b19 	vmov	d9, r0, r1
 8012544:	ec51 0b18 	vmov	r0, r1, d8
 8012548:	f7ee f856 	bl	80005f8 <__aeabi_dmul>
 801254c:	a37c      	add	r3, pc, #496	; (adr r3, 8012740 <__ieee754_pow+0x708>)
 801254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012552:	4604      	mov	r4, r0
 8012554:	460d      	mov	r5, r1
 8012556:	f7ee f84f 	bl	80005f8 <__aeabi_dmul>
 801255a:	a37b      	add	r3, pc, #492	; (adr r3, 8012748 <__ieee754_pow+0x710>)
 801255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012560:	f7ed fe94 	bl	800028c <__adddf3>
 8012564:	4622      	mov	r2, r4
 8012566:	462b      	mov	r3, r5
 8012568:	f7ee f846 	bl	80005f8 <__aeabi_dmul>
 801256c:	a378      	add	r3, pc, #480	; (adr r3, 8012750 <__ieee754_pow+0x718>)
 801256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012572:	f7ed fe8b 	bl	800028c <__adddf3>
 8012576:	4622      	mov	r2, r4
 8012578:	462b      	mov	r3, r5
 801257a:	f7ee f83d 	bl	80005f8 <__aeabi_dmul>
 801257e:	a376      	add	r3, pc, #472	; (adr r3, 8012758 <__ieee754_pow+0x720>)
 8012580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012584:	f7ed fe82 	bl	800028c <__adddf3>
 8012588:	4622      	mov	r2, r4
 801258a:	462b      	mov	r3, r5
 801258c:	f7ee f834 	bl	80005f8 <__aeabi_dmul>
 8012590:	a373      	add	r3, pc, #460	; (adr r3, 8012760 <__ieee754_pow+0x728>)
 8012592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012596:	f7ed fe79 	bl	800028c <__adddf3>
 801259a:	4622      	mov	r2, r4
 801259c:	462b      	mov	r3, r5
 801259e:	f7ee f82b 	bl	80005f8 <__aeabi_dmul>
 80125a2:	a371      	add	r3, pc, #452	; (adr r3, 8012768 <__ieee754_pow+0x730>)
 80125a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a8:	f7ed fe70 	bl	800028c <__adddf3>
 80125ac:	4622      	mov	r2, r4
 80125ae:	4606      	mov	r6, r0
 80125b0:	460f      	mov	r7, r1
 80125b2:	462b      	mov	r3, r5
 80125b4:	4620      	mov	r0, r4
 80125b6:	4629      	mov	r1, r5
 80125b8:	f7ee f81e 	bl	80005f8 <__aeabi_dmul>
 80125bc:	4602      	mov	r2, r0
 80125be:	460b      	mov	r3, r1
 80125c0:	4630      	mov	r0, r6
 80125c2:	4639      	mov	r1, r7
 80125c4:	f7ee f818 	bl	80005f8 <__aeabi_dmul>
 80125c8:	4642      	mov	r2, r8
 80125ca:	4604      	mov	r4, r0
 80125cc:	460d      	mov	r5, r1
 80125ce:	464b      	mov	r3, r9
 80125d0:	ec51 0b18 	vmov	r0, r1, d8
 80125d4:	f7ed fe5a 	bl	800028c <__adddf3>
 80125d8:	ec53 2b19 	vmov	r2, r3, d9
 80125dc:	f7ee f80c 	bl	80005f8 <__aeabi_dmul>
 80125e0:	4622      	mov	r2, r4
 80125e2:	462b      	mov	r3, r5
 80125e4:	f7ed fe52 	bl	800028c <__adddf3>
 80125e8:	4642      	mov	r2, r8
 80125ea:	4682      	mov	sl, r0
 80125ec:	468b      	mov	fp, r1
 80125ee:	464b      	mov	r3, r9
 80125f0:	4640      	mov	r0, r8
 80125f2:	4649      	mov	r1, r9
 80125f4:	f7ee f800 	bl	80005f8 <__aeabi_dmul>
 80125f8:	4b6b      	ldr	r3, [pc, #428]	; (80127a8 <__ieee754_pow+0x770>)
 80125fa:	2200      	movs	r2, #0
 80125fc:	4606      	mov	r6, r0
 80125fe:	460f      	mov	r7, r1
 8012600:	f7ed fe44 	bl	800028c <__adddf3>
 8012604:	4652      	mov	r2, sl
 8012606:	465b      	mov	r3, fp
 8012608:	f7ed fe40 	bl	800028c <__adddf3>
 801260c:	2000      	movs	r0, #0
 801260e:	4604      	mov	r4, r0
 8012610:	460d      	mov	r5, r1
 8012612:	4602      	mov	r2, r0
 8012614:	460b      	mov	r3, r1
 8012616:	4640      	mov	r0, r8
 8012618:	4649      	mov	r1, r9
 801261a:	f7ed ffed 	bl	80005f8 <__aeabi_dmul>
 801261e:	4b62      	ldr	r3, [pc, #392]	; (80127a8 <__ieee754_pow+0x770>)
 8012620:	4680      	mov	r8, r0
 8012622:	4689      	mov	r9, r1
 8012624:	2200      	movs	r2, #0
 8012626:	4620      	mov	r0, r4
 8012628:	4629      	mov	r1, r5
 801262a:	f7ed fe2d 	bl	8000288 <__aeabi_dsub>
 801262e:	4632      	mov	r2, r6
 8012630:	463b      	mov	r3, r7
 8012632:	f7ed fe29 	bl	8000288 <__aeabi_dsub>
 8012636:	4602      	mov	r2, r0
 8012638:	460b      	mov	r3, r1
 801263a:	4650      	mov	r0, sl
 801263c:	4659      	mov	r1, fp
 801263e:	f7ed fe23 	bl	8000288 <__aeabi_dsub>
 8012642:	ec53 2b18 	vmov	r2, r3, d8
 8012646:	f7ed ffd7 	bl	80005f8 <__aeabi_dmul>
 801264a:	4622      	mov	r2, r4
 801264c:	4606      	mov	r6, r0
 801264e:	460f      	mov	r7, r1
 8012650:	462b      	mov	r3, r5
 8012652:	ec51 0b19 	vmov	r0, r1, d9
 8012656:	f7ed ffcf 	bl	80005f8 <__aeabi_dmul>
 801265a:	4602      	mov	r2, r0
 801265c:	460b      	mov	r3, r1
 801265e:	4630      	mov	r0, r6
 8012660:	4639      	mov	r1, r7
 8012662:	f7ed fe13 	bl	800028c <__adddf3>
 8012666:	4606      	mov	r6, r0
 8012668:	460f      	mov	r7, r1
 801266a:	4602      	mov	r2, r0
 801266c:	460b      	mov	r3, r1
 801266e:	4640      	mov	r0, r8
 8012670:	4649      	mov	r1, r9
 8012672:	f7ed fe0b 	bl	800028c <__adddf3>
 8012676:	a33e      	add	r3, pc, #248	; (adr r3, 8012770 <__ieee754_pow+0x738>)
 8012678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801267c:	2000      	movs	r0, #0
 801267e:	4604      	mov	r4, r0
 8012680:	460d      	mov	r5, r1
 8012682:	f7ed ffb9 	bl	80005f8 <__aeabi_dmul>
 8012686:	4642      	mov	r2, r8
 8012688:	ec41 0b18 	vmov	d8, r0, r1
 801268c:	464b      	mov	r3, r9
 801268e:	4620      	mov	r0, r4
 8012690:	4629      	mov	r1, r5
 8012692:	f7ed fdf9 	bl	8000288 <__aeabi_dsub>
 8012696:	4602      	mov	r2, r0
 8012698:	460b      	mov	r3, r1
 801269a:	4630      	mov	r0, r6
 801269c:	4639      	mov	r1, r7
 801269e:	f7ed fdf3 	bl	8000288 <__aeabi_dsub>
 80126a2:	a335      	add	r3, pc, #212	; (adr r3, 8012778 <__ieee754_pow+0x740>)
 80126a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a8:	f7ed ffa6 	bl	80005f8 <__aeabi_dmul>
 80126ac:	a334      	add	r3, pc, #208	; (adr r3, 8012780 <__ieee754_pow+0x748>)
 80126ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b2:	4606      	mov	r6, r0
 80126b4:	460f      	mov	r7, r1
 80126b6:	4620      	mov	r0, r4
 80126b8:	4629      	mov	r1, r5
 80126ba:	f7ed ff9d 	bl	80005f8 <__aeabi_dmul>
 80126be:	4602      	mov	r2, r0
 80126c0:	460b      	mov	r3, r1
 80126c2:	4630      	mov	r0, r6
 80126c4:	4639      	mov	r1, r7
 80126c6:	f7ed fde1 	bl	800028c <__adddf3>
 80126ca:	9a07      	ldr	r2, [sp, #28]
 80126cc:	4b37      	ldr	r3, [pc, #220]	; (80127ac <__ieee754_pow+0x774>)
 80126ce:	4413      	add	r3, r2
 80126d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d4:	f7ed fdda 	bl	800028c <__adddf3>
 80126d8:	4682      	mov	sl, r0
 80126da:	9805      	ldr	r0, [sp, #20]
 80126dc:	468b      	mov	fp, r1
 80126de:	f7ed ff21 	bl	8000524 <__aeabi_i2d>
 80126e2:	9a07      	ldr	r2, [sp, #28]
 80126e4:	4b32      	ldr	r3, [pc, #200]	; (80127b0 <__ieee754_pow+0x778>)
 80126e6:	4413      	add	r3, r2
 80126e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80126ec:	4606      	mov	r6, r0
 80126ee:	460f      	mov	r7, r1
 80126f0:	4652      	mov	r2, sl
 80126f2:	465b      	mov	r3, fp
 80126f4:	ec51 0b18 	vmov	r0, r1, d8
 80126f8:	f7ed fdc8 	bl	800028c <__adddf3>
 80126fc:	4642      	mov	r2, r8
 80126fe:	464b      	mov	r3, r9
 8012700:	f7ed fdc4 	bl	800028c <__adddf3>
 8012704:	4632      	mov	r2, r6
 8012706:	463b      	mov	r3, r7
 8012708:	f7ed fdc0 	bl	800028c <__adddf3>
 801270c:	2000      	movs	r0, #0
 801270e:	4632      	mov	r2, r6
 8012710:	463b      	mov	r3, r7
 8012712:	4604      	mov	r4, r0
 8012714:	460d      	mov	r5, r1
 8012716:	f7ed fdb7 	bl	8000288 <__aeabi_dsub>
 801271a:	4642      	mov	r2, r8
 801271c:	464b      	mov	r3, r9
 801271e:	f7ed fdb3 	bl	8000288 <__aeabi_dsub>
 8012722:	ec53 2b18 	vmov	r2, r3, d8
 8012726:	f7ed fdaf 	bl	8000288 <__aeabi_dsub>
 801272a:	4602      	mov	r2, r0
 801272c:	460b      	mov	r3, r1
 801272e:	4650      	mov	r0, sl
 8012730:	4659      	mov	r1, fp
 8012732:	e610      	b.n	8012356 <__ieee754_pow+0x31e>
 8012734:	2401      	movs	r4, #1
 8012736:	e6a1      	b.n	801247c <__ieee754_pow+0x444>
 8012738:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012788 <__ieee754_pow+0x750>
 801273c:	e617      	b.n	801236e <__ieee754_pow+0x336>
 801273e:	bf00      	nop
 8012740:	4a454eef 	.word	0x4a454eef
 8012744:	3fca7e28 	.word	0x3fca7e28
 8012748:	93c9db65 	.word	0x93c9db65
 801274c:	3fcd864a 	.word	0x3fcd864a
 8012750:	a91d4101 	.word	0xa91d4101
 8012754:	3fd17460 	.word	0x3fd17460
 8012758:	518f264d 	.word	0x518f264d
 801275c:	3fd55555 	.word	0x3fd55555
 8012760:	db6fabff 	.word	0xdb6fabff
 8012764:	3fdb6db6 	.word	0x3fdb6db6
 8012768:	33333303 	.word	0x33333303
 801276c:	3fe33333 	.word	0x3fe33333
 8012770:	e0000000 	.word	0xe0000000
 8012774:	3feec709 	.word	0x3feec709
 8012778:	dc3a03fd 	.word	0xdc3a03fd
 801277c:	3feec709 	.word	0x3feec709
 8012780:	145b01f5 	.word	0x145b01f5
 8012784:	be3e2fe0 	.word	0xbe3e2fe0
 8012788:	00000000 	.word	0x00000000
 801278c:	3ff00000 	.word	0x3ff00000
 8012790:	7ff00000 	.word	0x7ff00000
 8012794:	43400000 	.word	0x43400000
 8012798:	0003988e 	.word	0x0003988e
 801279c:	000bb679 	.word	0x000bb679
 80127a0:	08014058 	.word	0x08014058
 80127a4:	3ff00000 	.word	0x3ff00000
 80127a8:	40080000 	.word	0x40080000
 80127ac:	08014078 	.word	0x08014078
 80127b0:	08014068 	.word	0x08014068
 80127b4:	a3b3      	add	r3, pc, #716	; (adr r3, 8012a84 <__ieee754_pow+0xa4c>)
 80127b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ba:	4640      	mov	r0, r8
 80127bc:	4649      	mov	r1, r9
 80127be:	f7ed fd65 	bl	800028c <__adddf3>
 80127c2:	4622      	mov	r2, r4
 80127c4:	ec41 0b1a 	vmov	d10, r0, r1
 80127c8:	462b      	mov	r3, r5
 80127ca:	4630      	mov	r0, r6
 80127cc:	4639      	mov	r1, r7
 80127ce:	f7ed fd5b 	bl	8000288 <__aeabi_dsub>
 80127d2:	4602      	mov	r2, r0
 80127d4:	460b      	mov	r3, r1
 80127d6:	ec51 0b1a 	vmov	r0, r1, d10
 80127da:	f7ee f99d 	bl	8000b18 <__aeabi_dcmpgt>
 80127de:	2800      	cmp	r0, #0
 80127e0:	f47f ae04 	bne.w	80123ec <__ieee754_pow+0x3b4>
 80127e4:	4aa2      	ldr	r2, [pc, #648]	; (8012a70 <__ieee754_pow+0xa38>)
 80127e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80127ea:	4293      	cmp	r3, r2
 80127ec:	f340 8107 	ble.w	80129fe <__ieee754_pow+0x9c6>
 80127f0:	151b      	asrs	r3, r3, #20
 80127f2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80127f6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80127fa:	fa4a fa03 	asr.w	sl, sl, r3
 80127fe:	44da      	add	sl, fp
 8012800:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8012804:	489b      	ldr	r0, [pc, #620]	; (8012a74 <__ieee754_pow+0xa3c>)
 8012806:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801280a:	4108      	asrs	r0, r1
 801280c:	ea00 030a 	and.w	r3, r0, sl
 8012810:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012814:	f1c1 0114 	rsb	r1, r1, #20
 8012818:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801281c:	fa4a fa01 	asr.w	sl, sl, r1
 8012820:	f1bb 0f00 	cmp.w	fp, #0
 8012824:	f04f 0200 	mov.w	r2, #0
 8012828:	4620      	mov	r0, r4
 801282a:	4629      	mov	r1, r5
 801282c:	bfb8      	it	lt
 801282e:	f1ca 0a00 	rsblt	sl, sl, #0
 8012832:	f7ed fd29 	bl	8000288 <__aeabi_dsub>
 8012836:	ec41 0b19 	vmov	d9, r0, r1
 801283a:	4642      	mov	r2, r8
 801283c:	464b      	mov	r3, r9
 801283e:	ec51 0b19 	vmov	r0, r1, d9
 8012842:	f7ed fd23 	bl	800028c <__adddf3>
 8012846:	a37a      	add	r3, pc, #488	; (adr r3, 8012a30 <__ieee754_pow+0x9f8>)
 8012848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801284c:	2000      	movs	r0, #0
 801284e:	4604      	mov	r4, r0
 8012850:	460d      	mov	r5, r1
 8012852:	f7ed fed1 	bl	80005f8 <__aeabi_dmul>
 8012856:	ec53 2b19 	vmov	r2, r3, d9
 801285a:	4606      	mov	r6, r0
 801285c:	460f      	mov	r7, r1
 801285e:	4620      	mov	r0, r4
 8012860:	4629      	mov	r1, r5
 8012862:	f7ed fd11 	bl	8000288 <__aeabi_dsub>
 8012866:	4602      	mov	r2, r0
 8012868:	460b      	mov	r3, r1
 801286a:	4640      	mov	r0, r8
 801286c:	4649      	mov	r1, r9
 801286e:	f7ed fd0b 	bl	8000288 <__aeabi_dsub>
 8012872:	a371      	add	r3, pc, #452	; (adr r3, 8012a38 <__ieee754_pow+0xa00>)
 8012874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012878:	f7ed febe 	bl	80005f8 <__aeabi_dmul>
 801287c:	a370      	add	r3, pc, #448	; (adr r3, 8012a40 <__ieee754_pow+0xa08>)
 801287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012882:	4680      	mov	r8, r0
 8012884:	4689      	mov	r9, r1
 8012886:	4620      	mov	r0, r4
 8012888:	4629      	mov	r1, r5
 801288a:	f7ed feb5 	bl	80005f8 <__aeabi_dmul>
 801288e:	4602      	mov	r2, r0
 8012890:	460b      	mov	r3, r1
 8012892:	4640      	mov	r0, r8
 8012894:	4649      	mov	r1, r9
 8012896:	f7ed fcf9 	bl	800028c <__adddf3>
 801289a:	4604      	mov	r4, r0
 801289c:	460d      	mov	r5, r1
 801289e:	4602      	mov	r2, r0
 80128a0:	460b      	mov	r3, r1
 80128a2:	4630      	mov	r0, r6
 80128a4:	4639      	mov	r1, r7
 80128a6:	f7ed fcf1 	bl	800028c <__adddf3>
 80128aa:	4632      	mov	r2, r6
 80128ac:	463b      	mov	r3, r7
 80128ae:	4680      	mov	r8, r0
 80128b0:	4689      	mov	r9, r1
 80128b2:	f7ed fce9 	bl	8000288 <__aeabi_dsub>
 80128b6:	4602      	mov	r2, r0
 80128b8:	460b      	mov	r3, r1
 80128ba:	4620      	mov	r0, r4
 80128bc:	4629      	mov	r1, r5
 80128be:	f7ed fce3 	bl	8000288 <__aeabi_dsub>
 80128c2:	4642      	mov	r2, r8
 80128c4:	4606      	mov	r6, r0
 80128c6:	460f      	mov	r7, r1
 80128c8:	464b      	mov	r3, r9
 80128ca:	4640      	mov	r0, r8
 80128cc:	4649      	mov	r1, r9
 80128ce:	f7ed fe93 	bl	80005f8 <__aeabi_dmul>
 80128d2:	a35d      	add	r3, pc, #372	; (adr r3, 8012a48 <__ieee754_pow+0xa10>)
 80128d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d8:	4604      	mov	r4, r0
 80128da:	460d      	mov	r5, r1
 80128dc:	f7ed fe8c 	bl	80005f8 <__aeabi_dmul>
 80128e0:	a35b      	add	r3, pc, #364	; (adr r3, 8012a50 <__ieee754_pow+0xa18>)
 80128e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128e6:	f7ed fccf 	bl	8000288 <__aeabi_dsub>
 80128ea:	4622      	mov	r2, r4
 80128ec:	462b      	mov	r3, r5
 80128ee:	f7ed fe83 	bl	80005f8 <__aeabi_dmul>
 80128f2:	a359      	add	r3, pc, #356	; (adr r3, 8012a58 <__ieee754_pow+0xa20>)
 80128f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128f8:	f7ed fcc8 	bl	800028c <__adddf3>
 80128fc:	4622      	mov	r2, r4
 80128fe:	462b      	mov	r3, r5
 8012900:	f7ed fe7a 	bl	80005f8 <__aeabi_dmul>
 8012904:	a356      	add	r3, pc, #344	; (adr r3, 8012a60 <__ieee754_pow+0xa28>)
 8012906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801290a:	f7ed fcbd 	bl	8000288 <__aeabi_dsub>
 801290e:	4622      	mov	r2, r4
 8012910:	462b      	mov	r3, r5
 8012912:	f7ed fe71 	bl	80005f8 <__aeabi_dmul>
 8012916:	a354      	add	r3, pc, #336	; (adr r3, 8012a68 <__ieee754_pow+0xa30>)
 8012918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801291c:	f7ed fcb6 	bl	800028c <__adddf3>
 8012920:	4622      	mov	r2, r4
 8012922:	462b      	mov	r3, r5
 8012924:	f7ed fe68 	bl	80005f8 <__aeabi_dmul>
 8012928:	4602      	mov	r2, r0
 801292a:	460b      	mov	r3, r1
 801292c:	4640      	mov	r0, r8
 801292e:	4649      	mov	r1, r9
 8012930:	f7ed fcaa 	bl	8000288 <__aeabi_dsub>
 8012934:	4604      	mov	r4, r0
 8012936:	460d      	mov	r5, r1
 8012938:	4602      	mov	r2, r0
 801293a:	460b      	mov	r3, r1
 801293c:	4640      	mov	r0, r8
 801293e:	4649      	mov	r1, r9
 8012940:	f7ed fe5a 	bl	80005f8 <__aeabi_dmul>
 8012944:	2200      	movs	r2, #0
 8012946:	ec41 0b19 	vmov	d9, r0, r1
 801294a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801294e:	4620      	mov	r0, r4
 8012950:	4629      	mov	r1, r5
 8012952:	f7ed fc99 	bl	8000288 <__aeabi_dsub>
 8012956:	4602      	mov	r2, r0
 8012958:	460b      	mov	r3, r1
 801295a:	ec51 0b19 	vmov	r0, r1, d9
 801295e:	f7ed ff75 	bl	800084c <__aeabi_ddiv>
 8012962:	4632      	mov	r2, r6
 8012964:	4604      	mov	r4, r0
 8012966:	460d      	mov	r5, r1
 8012968:	463b      	mov	r3, r7
 801296a:	4640      	mov	r0, r8
 801296c:	4649      	mov	r1, r9
 801296e:	f7ed fe43 	bl	80005f8 <__aeabi_dmul>
 8012972:	4632      	mov	r2, r6
 8012974:	463b      	mov	r3, r7
 8012976:	f7ed fc89 	bl	800028c <__adddf3>
 801297a:	4602      	mov	r2, r0
 801297c:	460b      	mov	r3, r1
 801297e:	4620      	mov	r0, r4
 8012980:	4629      	mov	r1, r5
 8012982:	f7ed fc81 	bl	8000288 <__aeabi_dsub>
 8012986:	4642      	mov	r2, r8
 8012988:	464b      	mov	r3, r9
 801298a:	f7ed fc7d 	bl	8000288 <__aeabi_dsub>
 801298e:	460b      	mov	r3, r1
 8012990:	4602      	mov	r2, r0
 8012992:	4939      	ldr	r1, [pc, #228]	; (8012a78 <__ieee754_pow+0xa40>)
 8012994:	2000      	movs	r0, #0
 8012996:	f7ed fc77 	bl	8000288 <__aeabi_dsub>
 801299a:	ec41 0b10 	vmov	d0, r0, r1
 801299e:	ee10 3a90 	vmov	r3, s1
 80129a2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80129a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80129aa:	da2b      	bge.n	8012a04 <__ieee754_pow+0x9cc>
 80129ac:	4650      	mov	r0, sl
 80129ae:	f000 fc23 	bl	80131f8 <scalbn>
 80129b2:	ec51 0b10 	vmov	r0, r1, d0
 80129b6:	ec53 2b18 	vmov	r2, r3, d8
 80129ba:	f7ff bbee 	b.w	801219a <__ieee754_pow+0x162>
 80129be:	4b2f      	ldr	r3, [pc, #188]	; (8012a7c <__ieee754_pow+0xa44>)
 80129c0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80129c4:	429e      	cmp	r6, r3
 80129c6:	f77f af0d 	ble.w	80127e4 <__ieee754_pow+0x7ac>
 80129ca:	4b2d      	ldr	r3, [pc, #180]	; (8012a80 <__ieee754_pow+0xa48>)
 80129cc:	440b      	add	r3, r1
 80129ce:	4303      	orrs	r3, r0
 80129d0:	d009      	beq.n	80129e6 <__ieee754_pow+0x9ae>
 80129d2:	ec51 0b18 	vmov	r0, r1, d8
 80129d6:	2200      	movs	r2, #0
 80129d8:	2300      	movs	r3, #0
 80129da:	f7ee f87f 	bl	8000adc <__aeabi_dcmplt>
 80129de:	3800      	subs	r0, #0
 80129e0:	bf18      	it	ne
 80129e2:	2001      	movne	r0, #1
 80129e4:	e448      	b.n	8012278 <__ieee754_pow+0x240>
 80129e6:	4622      	mov	r2, r4
 80129e8:	462b      	mov	r3, r5
 80129ea:	f7ed fc4d 	bl	8000288 <__aeabi_dsub>
 80129ee:	4642      	mov	r2, r8
 80129f0:	464b      	mov	r3, r9
 80129f2:	f7ee f887 	bl	8000b04 <__aeabi_dcmpge>
 80129f6:	2800      	cmp	r0, #0
 80129f8:	f43f aef4 	beq.w	80127e4 <__ieee754_pow+0x7ac>
 80129fc:	e7e9      	b.n	80129d2 <__ieee754_pow+0x99a>
 80129fe:	f04f 0a00 	mov.w	sl, #0
 8012a02:	e71a      	b.n	801283a <__ieee754_pow+0x802>
 8012a04:	ec51 0b10 	vmov	r0, r1, d0
 8012a08:	4619      	mov	r1, r3
 8012a0a:	e7d4      	b.n	80129b6 <__ieee754_pow+0x97e>
 8012a0c:	491a      	ldr	r1, [pc, #104]	; (8012a78 <__ieee754_pow+0xa40>)
 8012a0e:	2000      	movs	r0, #0
 8012a10:	f7ff bb31 	b.w	8012076 <__ieee754_pow+0x3e>
 8012a14:	2000      	movs	r0, #0
 8012a16:	2100      	movs	r1, #0
 8012a18:	f7ff bb2d 	b.w	8012076 <__ieee754_pow+0x3e>
 8012a1c:	4630      	mov	r0, r6
 8012a1e:	4639      	mov	r1, r7
 8012a20:	f7ff bb29 	b.w	8012076 <__ieee754_pow+0x3e>
 8012a24:	9204      	str	r2, [sp, #16]
 8012a26:	f7ff bb7b 	b.w	8012120 <__ieee754_pow+0xe8>
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	f7ff bb65 	b.w	80120fa <__ieee754_pow+0xc2>
 8012a30:	00000000 	.word	0x00000000
 8012a34:	3fe62e43 	.word	0x3fe62e43
 8012a38:	fefa39ef 	.word	0xfefa39ef
 8012a3c:	3fe62e42 	.word	0x3fe62e42
 8012a40:	0ca86c39 	.word	0x0ca86c39
 8012a44:	be205c61 	.word	0xbe205c61
 8012a48:	72bea4d0 	.word	0x72bea4d0
 8012a4c:	3e663769 	.word	0x3e663769
 8012a50:	c5d26bf1 	.word	0xc5d26bf1
 8012a54:	3ebbbd41 	.word	0x3ebbbd41
 8012a58:	af25de2c 	.word	0xaf25de2c
 8012a5c:	3f11566a 	.word	0x3f11566a
 8012a60:	16bebd93 	.word	0x16bebd93
 8012a64:	3f66c16c 	.word	0x3f66c16c
 8012a68:	5555553e 	.word	0x5555553e
 8012a6c:	3fc55555 	.word	0x3fc55555
 8012a70:	3fe00000 	.word	0x3fe00000
 8012a74:	fff00000 	.word	0xfff00000
 8012a78:	3ff00000 	.word	0x3ff00000
 8012a7c:	4090cbff 	.word	0x4090cbff
 8012a80:	3f6f3400 	.word	0x3f6f3400
 8012a84:	652b82fe 	.word	0x652b82fe
 8012a88:	3c971547 	.word	0x3c971547
 8012a8c:	00000000 	.word	0x00000000

08012a90 <__ieee754_rem_pio2>:
 8012a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a94:	ed2d 8b02 	vpush	{d8}
 8012a98:	ec55 4b10 	vmov	r4, r5, d0
 8012a9c:	4bca      	ldr	r3, [pc, #808]	; (8012dc8 <__ieee754_rem_pio2+0x338>)
 8012a9e:	b08b      	sub	sp, #44	; 0x2c
 8012aa0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012aa4:	4598      	cmp	r8, r3
 8012aa6:	4682      	mov	sl, r0
 8012aa8:	9502      	str	r5, [sp, #8]
 8012aaa:	dc08      	bgt.n	8012abe <__ieee754_rem_pio2+0x2e>
 8012aac:	2200      	movs	r2, #0
 8012aae:	2300      	movs	r3, #0
 8012ab0:	ed80 0b00 	vstr	d0, [r0]
 8012ab4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012ab8:	f04f 0b00 	mov.w	fp, #0
 8012abc:	e028      	b.n	8012b10 <__ieee754_rem_pio2+0x80>
 8012abe:	4bc3      	ldr	r3, [pc, #780]	; (8012dcc <__ieee754_rem_pio2+0x33c>)
 8012ac0:	4598      	cmp	r8, r3
 8012ac2:	dc78      	bgt.n	8012bb6 <__ieee754_rem_pio2+0x126>
 8012ac4:	9b02      	ldr	r3, [sp, #8]
 8012ac6:	4ec2      	ldr	r6, [pc, #776]	; (8012dd0 <__ieee754_rem_pio2+0x340>)
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	ee10 0a10 	vmov	r0, s0
 8012ace:	a3b0      	add	r3, pc, #704	; (adr r3, 8012d90 <__ieee754_rem_pio2+0x300>)
 8012ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad4:	4629      	mov	r1, r5
 8012ad6:	dd39      	ble.n	8012b4c <__ieee754_rem_pio2+0xbc>
 8012ad8:	f7ed fbd6 	bl	8000288 <__aeabi_dsub>
 8012adc:	45b0      	cmp	r8, r6
 8012ade:	4604      	mov	r4, r0
 8012ae0:	460d      	mov	r5, r1
 8012ae2:	d01b      	beq.n	8012b1c <__ieee754_rem_pio2+0x8c>
 8012ae4:	a3ac      	add	r3, pc, #688	; (adr r3, 8012d98 <__ieee754_rem_pio2+0x308>)
 8012ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aea:	f7ed fbcd 	bl	8000288 <__aeabi_dsub>
 8012aee:	4602      	mov	r2, r0
 8012af0:	460b      	mov	r3, r1
 8012af2:	e9ca 2300 	strd	r2, r3, [sl]
 8012af6:	4620      	mov	r0, r4
 8012af8:	4629      	mov	r1, r5
 8012afa:	f7ed fbc5 	bl	8000288 <__aeabi_dsub>
 8012afe:	a3a6      	add	r3, pc, #664	; (adr r3, 8012d98 <__ieee754_rem_pio2+0x308>)
 8012b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b04:	f7ed fbc0 	bl	8000288 <__aeabi_dsub>
 8012b08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012b0c:	f04f 0b01 	mov.w	fp, #1
 8012b10:	4658      	mov	r0, fp
 8012b12:	b00b      	add	sp, #44	; 0x2c
 8012b14:	ecbd 8b02 	vpop	{d8}
 8012b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b1c:	a3a0      	add	r3, pc, #640	; (adr r3, 8012da0 <__ieee754_rem_pio2+0x310>)
 8012b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b22:	f7ed fbb1 	bl	8000288 <__aeabi_dsub>
 8012b26:	a3a0      	add	r3, pc, #640	; (adr r3, 8012da8 <__ieee754_rem_pio2+0x318>)
 8012b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2c:	4604      	mov	r4, r0
 8012b2e:	460d      	mov	r5, r1
 8012b30:	f7ed fbaa 	bl	8000288 <__aeabi_dsub>
 8012b34:	4602      	mov	r2, r0
 8012b36:	460b      	mov	r3, r1
 8012b38:	e9ca 2300 	strd	r2, r3, [sl]
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	4629      	mov	r1, r5
 8012b40:	f7ed fba2 	bl	8000288 <__aeabi_dsub>
 8012b44:	a398      	add	r3, pc, #608	; (adr r3, 8012da8 <__ieee754_rem_pio2+0x318>)
 8012b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b4a:	e7db      	b.n	8012b04 <__ieee754_rem_pio2+0x74>
 8012b4c:	f7ed fb9e 	bl	800028c <__adddf3>
 8012b50:	45b0      	cmp	r8, r6
 8012b52:	4604      	mov	r4, r0
 8012b54:	460d      	mov	r5, r1
 8012b56:	d016      	beq.n	8012b86 <__ieee754_rem_pio2+0xf6>
 8012b58:	a38f      	add	r3, pc, #572	; (adr r3, 8012d98 <__ieee754_rem_pio2+0x308>)
 8012b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b5e:	f7ed fb95 	bl	800028c <__adddf3>
 8012b62:	4602      	mov	r2, r0
 8012b64:	460b      	mov	r3, r1
 8012b66:	e9ca 2300 	strd	r2, r3, [sl]
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	4629      	mov	r1, r5
 8012b6e:	f7ed fb8b 	bl	8000288 <__aeabi_dsub>
 8012b72:	a389      	add	r3, pc, #548	; (adr r3, 8012d98 <__ieee754_rem_pio2+0x308>)
 8012b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b78:	f7ed fb88 	bl	800028c <__adddf3>
 8012b7c:	f04f 3bff 	mov.w	fp, #4294967295
 8012b80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012b84:	e7c4      	b.n	8012b10 <__ieee754_rem_pio2+0x80>
 8012b86:	a386      	add	r3, pc, #536	; (adr r3, 8012da0 <__ieee754_rem_pio2+0x310>)
 8012b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b8c:	f7ed fb7e 	bl	800028c <__adddf3>
 8012b90:	a385      	add	r3, pc, #532	; (adr r3, 8012da8 <__ieee754_rem_pio2+0x318>)
 8012b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b96:	4604      	mov	r4, r0
 8012b98:	460d      	mov	r5, r1
 8012b9a:	f7ed fb77 	bl	800028c <__adddf3>
 8012b9e:	4602      	mov	r2, r0
 8012ba0:	460b      	mov	r3, r1
 8012ba2:	e9ca 2300 	strd	r2, r3, [sl]
 8012ba6:	4620      	mov	r0, r4
 8012ba8:	4629      	mov	r1, r5
 8012baa:	f7ed fb6d 	bl	8000288 <__aeabi_dsub>
 8012bae:	a37e      	add	r3, pc, #504	; (adr r3, 8012da8 <__ieee754_rem_pio2+0x318>)
 8012bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bb4:	e7e0      	b.n	8012b78 <__ieee754_rem_pio2+0xe8>
 8012bb6:	4b87      	ldr	r3, [pc, #540]	; (8012dd4 <__ieee754_rem_pio2+0x344>)
 8012bb8:	4598      	cmp	r8, r3
 8012bba:	f300 80d8 	bgt.w	8012d6e <__ieee754_rem_pio2+0x2de>
 8012bbe:	f000 fb0f 	bl	80131e0 <fabs>
 8012bc2:	ec55 4b10 	vmov	r4, r5, d0
 8012bc6:	ee10 0a10 	vmov	r0, s0
 8012bca:	a379      	add	r3, pc, #484	; (adr r3, 8012db0 <__ieee754_rem_pio2+0x320>)
 8012bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd0:	4629      	mov	r1, r5
 8012bd2:	f7ed fd11 	bl	80005f8 <__aeabi_dmul>
 8012bd6:	4b80      	ldr	r3, [pc, #512]	; (8012dd8 <__ieee754_rem_pio2+0x348>)
 8012bd8:	2200      	movs	r2, #0
 8012bda:	f7ed fb57 	bl	800028c <__adddf3>
 8012bde:	f7ed ffbb 	bl	8000b58 <__aeabi_d2iz>
 8012be2:	4683      	mov	fp, r0
 8012be4:	f7ed fc9e 	bl	8000524 <__aeabi_i2d>
 8012be8:	4602      	mov	r2, r0
 8012bea:	460b      	mov	r3, r1
 8012bec:	ec43 2b18 	vmov	d8, r2, r3
 8012bf0:	a367      	add	r3, pc, #412	; (adr r3, 8012d90 <__ieee754_rem_pio2+0x300>)
 8012bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf6:	f7ed fcff 	bl	80005f8 <__aeabi_dmul>
 8012bfa:	4602      	mov	r2, r0
 8012bfc:	460b      	mov	r3, r1
 8012bfe:	4620      	mov	r0, r4
 8012c00:	4629      	mov	r1, r5
 8012c02:	f7ed fb41 	bl	8000288 <__aeabi_dsub>
 8012c06:	a364      	add	r3, pc, #400	; (adr r3, 8012d98 <__ieee754_rem_pio2+0x308>)
 8012c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c0c:	4606      	mov	r6, r0
 8012c0e:	460f      	mov	r7, r1
 8012c10:	ec51 0b18 	vmov	r0, r1, d8
 8012c14:	f7ed fcf0 	bl	80005f8 <__aeabi_dmul>
 8012c18:	f1bb 0f1f 	cmp.w	fp, #31
 8012c1c:	4604      	mov	r4, r0
 8012c1e:	460d      	mov	r5, r1
 8012c20:	dc0d      	bgt.n	8012c3e <__ieee754_rem_pio2+0x1ae>
 8012c22:	4b6e      	ldr	r3, [pc, #440]	; (8012ddc <__ieee754_rem_pio2+0x34c>)
 8012c24:	f10b 32ff 	add.w	r2, fp, #4294967295
 8012c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c2c:	4543      	cmp	r3, r8
 8012c2e:	d006      	beq.n	8012c3e <__ieee754_rem_pio2+0x1ae>
 8012c30:	4622      	mov	r2, r4
 8012c32:	462b      	mov	r3, r5
 8012c34:	4630      	mov	r0, r6
 8012c36:	4639      	mov	r1, r7
 8012c38:	f7ed fb26 	bl	8000288 <__aeabi_dsub>
 8012c3c:	e00e      	b.n	8012c5c <__ieee754_rem_pio2+0x1cc>
 8012c3e:	462b      	mov	r3, r5
 8012c40:	4622      	mov	r2, r4
 8012c42:	4630      	mov	r0, r6
 8012c44:	4639      	mov	r1, r7
 8012c46:	f7ed fb1f 	bl	8000288 <__aeabi_dsub>
 8012c4a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012c4e:	9303      	str	r3, [sp, #12]
 8012c50:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012c54:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012c58:	2b10      	cmp	r3, #16
 8012c5a:	dc02      	bgt.n	8012c62 <__ieee754_rem_pio2+0x1d2>
 8012c5c:	e9ca 0100 	strd	r0, r1, [sl]
 8012c60:	e039      	b.n	8012cd6 <__ieee754_rem_pio2+0x246>
 8012c62:	a34f      	add	r3, pc, #316	; (adr r3, 8012da0 <__ieee754_rem_pio2+0x310>)
 8012c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c68:	ec51 0b18 	vmov	r0, r1, d8
 8012c6c:	f7ed fcc4 	bl	80005f8 <__aeabi_dmul>
 8012c70:	4604      	mov	r4, r0
 8012c72:	460d      	mov	r5, r1
 8012c74:	4602      	mov	r2, r0
 8012c76:	460b      	mov	r3, r1
 8012c78:	4630      	mov	r0, r6
 8012c7a:	4639      	mov	r1, r7
 8012c7c:	f7ed fb04 	bl	8000288 <__aeabi_dsub>
 8012c80:	4602      	mov	r2, r0
 8012c82:	460b      	mov	r3, r1
 8012c84:	4680      	mov	r8, r0
 8012c86:	4689      	mov	r9, r1
 8012c88:	4630      	mov	r0, r6
 8012c8a:	4639      	mov	r1, r7
 8012c8c:	f7ed fafc 	bl	8000288 <__aeabi_dsub>
 8012c90:	4622      	mov	r2, r4
 8012c92:	462b      	mov	r3, r5
 8012c94:	f7ed faf8 	bl	8000288 <__aeabi_dsub>
 8012c98:	a343      	add	r3, pc, #268	; (adr r3, 8012da8 <__ieee754_rem_pio2+0x318>)
 8012c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c9e:	4604      	mov	r4, r0
 8012ca0:	460d      	mov	r5, r1
 8012ca2:	ec51 0b18 	vmov	r0, r1, d8
 8012ca6:	f7ed fca7 	bl	80005f8 <__aeabi_dmul>
 8012caa:	4622      	mov	r2, r4
 8012cac:	462b      	mov	r3, r5
 8012cae:	f7ed faeb 	bl	8000288 <__aeabi_dsub>
 8012cb2:	4602      	mov	r2, r0
 8012cb4:	460b      	mov	r3, r1
 8012cb6:	4604      	mov	r4, r0
 8012cb8:	460d      	mov	r5, r1
 8012cba:	4640      	mov	r0, r8
 8012cbc:	4649      	mov	r1, r9
 8012cbe:	f7ed fae3 	bl	8000288 <__aeabi_dsub>
 8012cc2:	9a03      	ldr	r2, [sp, #12]
 8012cc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012cc8:	1ad3      	subs	r3, r2, r3
 8012cca:	2b31      	cmp	r3, #49	; 0x31
 8012ccc:	dc24      	bgt.n	8012d18 <__ieee754_rem_pio2+0x288>
 8012cce:	e9ca 0100 	strd	r0, r1, [sl]
 8012cd2:	4646      	mov	r6, r8
 8012cd4:	464f      	mov	r7, r9
 8012cd6:	e9da 8900 	ldrd	r8, r9, [sl]
 8012cda:	4630      	mov	r0, r6
 8012cdc:	4642      	mov	r2, r8
 8012cde:	464b      	mov	r3, r9
 8012ce0:	4639      	mov	r1, r7
 8012ce2:	f7ed fad1 	bl	8000288 <__aeabi_dsub>
 8012ce6:	462b      	mov	r3, r5
 8012ce8:	4622      	mov	r2, r4
 8012cea:	f7ed facd 	bl	8000288 <__aeabi_dsub>
 8012cee:	9b02      	ldr	r3, [sp, #8]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012cf6:	f6bf af0b 	bge.w	8012b10 <__ieee754_rem_pio2+0x80>
 8012cfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012cfe:	f8ca 3004 	str.w	r3, [sl, #4]
 8012d02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d06:	f8ca 8000 	str.w	r8, [sl]
 8012d0a:	f8ca 0008 	str.w	r0, [sl, #8]
 8012d0e:	f8ca 300c 	str.w	r3, [sl, #12]
 8012d12:	f1cb 0b00 	rsb	fp, fp, #0
 8012d16:	e6fb      	b.n	8012b10 <__ieee754_rem_pio2+0x80>
 8012d18:	a327      	add	r3, pc, #156	; (adr r3, 8012db8 <__ieee754_rem_pio2+0x328>)
 8012d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d1e:	ec51 0b18 	vmov	r0, r1, d8
 8012d22:	f7ed fc69 	bl	80005f8 <__aeabi_dmul>
 8012d26:	4604      	mov	r4, r0
 8012d28:	460d      	mov	r5, r1
 8012d2a:	4602      	mov	r2, r0
 8012d2c:	460b      	mov	r3, r1
 8012d2e:	4640      	mov	r0, r8
 8012d30:	4649      	mov	r1, r9
 8012d32:	f7ed faa9 	bl	8000288 <__aeabi_dsub>
 8012d36:	4602      	mov	r2, r0
 8012d38:	460b      	mov	r3, r1
 8012d3a:	4606      	mov	r6, r0
 8012d3c:	460f      	mov	r7, r1
 8012d3e:	4640      	mov	r0, r8
 8012d40:	4649      	mov	r1, r9
 8012d42:	f7ed faa1 	bl	8000288 <__aeabi_dsub>
 8012d46:	4622      	mov	r2, r4
 8012d48:	462b      	mov	r3, r5
 8012d4a:	f7ed fa9d 	bl	8000288 <__aeabi_dsub>
 8012d4e:	a31c      	add	r3, pc, #112	; (adr r3, 8012dc0 <__ieee754_rem_pio2+0x330>)
 8012d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d54:	4604      	mov	r4, r0
 8012d56:	460d      	mov	r5, r1
 8012d58:	ec51 0b18 	vmov	r0, r1, d8
 8012d5c:	f7ed fc4c 	bl	80005f8 <__aeabi_dmul>
 8012d60:	4622      	mov	r2, r4
 8012d62:	462b      	mov	r3, r5
 8012d64:	f7ed fa90 	bl	8000288 <__aeabi_dsub>
 8012d68:	4604      	mov	r4, r0
 8012d6a:	460d      	mov	r5, r1
 8012d6c:	e760      	b.n	8012c30 <__ieee754_rem_pio2+0x1a0>
 8012d6e:	4b1c      	ldr	r3, [pc, #112]	; (8012de0 <__ieee754_rem_pio2+0x350>)
 8012d70:	4598      	cmp	r8, r3
 8012d72:	dd37      	ble.n	8012de4 <__ieee754_rem_pio2+0x354>
 8012d74:	ee10 2a10 	vmov	r2, s0
 8012d78:	462b      	mov	r3, r5
 8012d7a:	4620      	mov	r0, r4
 8012d7c:	4629      	mov	r1, r5
 8012d7e:	f7ed fa83 	bl	8000288 <__aeabi_dsub>
 8012d82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012d86:	e9ca 0100 	strd	r0, r1, [sl]
 8012d8a:	e695      	b.n	8012ab8 <__ieee754_rem_pio2+0x28>
 8012d8c:	f3af 8000 	nop.w
 8012d90:	54400000 	.word	0x54400000
 8012d94:	3ff921fb 	.word	0x3ff921fb
 8012d98:	1a626331 	.word	0x1a626331
 8012d9c:	3dd0b461 	.word	0x3dd0b461
 8012da0:	1a600000 	.word	0x1a600000
 8012da4:	3dd0b461 	.word	0x3dd0b461
 8012da8:	2e037073 	.word	0x2e037073
 8012dac:	3ba3198a 	.word	0x3ba3198a
 8012db0:	6dc9c883 	.word	0x6dc9c883
 8012db4:	3fe45f30 	.word	0x3fe45f30
 8012db8:	2e000000 	.word	0x2e000000
 8012dbc:	3ba3198a 	.word	0x3ba3198a
 8012dc0:	252049c1 	.word	0x252049c1
 8012dc4:	397b839a 	.word	0x397b839a
 8012dc8:	3fe921fb 	.word	0x3fe921fb
 8012dcc:	4002d97b 	.word	0x4002d97b
 8012dd0:	3ff921fb 	.word	0x3ff921fb
 8012dd4:	413921fb 	.word	0x413921fb
 8012dd8:	3fe00000 	.word	0x3fe00000
 8012ddc:	08014088 	.word	0x08014088
 8012de0:	7fefffff 	.word	0x7fefffff
 8012de4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8012de8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8012dec:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8012df0:	4620      	mov	r0, r4
 8012df2:	460d      	mov	r5, r1
 8012df4:	f7ed feb0 	bl	8000b58 <__aeabi_d2iz>
 8012df8:	f7ed fb94 	bl	8000524 <__aeabi_i2d>
 8012dfc:	4602      	mov	r2, r0
 8012dfe:	460b      	mov	r3, r1
 8012e00:	4620      	mov	r0, r4
 8012e02:	4629      	mov	r1, r5
 8012e04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012e08:	f7ed fa3e 	bl	8000288 <__aeabi_dsub>
 8012e0c:	4b21      	ldr	r3, [pc, #132]	; (8012e94 <__ieee754_rem_pio2+0x404>)
 8012e0e:	2200      	movs	r2, #0
 8012e10:	f7ed fbf2 	bl	80005f8 <__aeabi_dmul>
 8012e14:	460d      	mov	r5, r1
 8012e16:	4604      	mov	r4, r0
 8012e18:	f7ed fe9e 	bl	8000b58 <__aeabi_d2iz>
 8012e1c:	f7ed fb82 	bl	8000524 <__aeabi_i2d>
 8012e20:	4602      	mov	r2, r0
 8012e22:	460b      	mov	r3, r1
 8012e24:	4620      	mov	r0, r4
 8012e26:	4629      	mov	r1, r5
 8012e28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012e2c:	f7ed fa2c 	bl	8000288 <__aeabi_dsub>
 8012e30:	4b18      	ldr	r3, [pc, #96]	; (8012e94 <__ieee754_rem_pio2+0x404>)
 8012e32:	2200      	movs	r2, #0
 8012e34:	f7ed fbe0 	bl	80005f8 <__aeabi_dmul>
 8012e38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012e3c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8012e40:	2703      	movs	r7, #3
 8012e42:	2400      	movs	r4, #0
 8012e44:	2500      	movs	r5, #0
 8012e46:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8012e4a:	4622      	mov	r2, r4
 8012e4c:	462b      	mov	r3, r5
 8012e4e:	46b9      	mov	r9, r7
 8012e50:	3f01      	subs	r7, #1
 8012e52:	f7ed fe39 	bl	8000ac8 <__aeabi_dcmpeq>
 8012e56:	2800      	cmp	r0, #0
 8012e58:	d1f5      	bne.n	8012e46 <__ieee754_rem_pio2+0x3b6>
 8012e5a:	4b0f      	ldr	r3, [pc, #60]	; (8012e98 <__ieee754_rem_pio2+0x408>)
 8012e5c:	9301      	str	r3, [sp, #4]
 8012e5e:	2302      	movs	r3, #2
 8012e60:	9300      	str	r3, [sp, #0]
 8012e62:	4632      	mov	r2, r6
 8012e64:	464b      	mov	r3, r9
 8012e66:	4651      	mov	r1, sl
 8012e68:	a804      	add	r0, sp, #16
 8012e6a:	f000 fa75 	bl	8013358 <__kernel_rem_pio2>
 8012e6e:	9b02      	ldr	r3, [sp, #8]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	4683      	mov	fp, r0
 8012e74:	f6bf ae4c 	bge.w	8012b10 <__ieee754_rem_pio2+0x80>
 8012e78:	e9da 2100 	ldrd	r2, r1, [sl]
 8012e7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e80:	e9ca 2300 	strd	r2, r3, [sl]
 8012e84:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8012e88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e8c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8012e90:	e73f      	b.n	8012d12 <__ieee754_rem_pio2+0x282>
 8012e92:	bf00      	nop
 8012e94:	41700000 	.word	0x41700000
 8012e98:	08014108 	.word	0x08014108
 8012e9c:	00000000 	.word	0x00000000

08012ea0 <atan>:
 8012ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea4:	ec55 4b10 	vmov	r4, r5, d0
 8012ea8:	4bc3      	ldr	r3, [pc, #780]	; (80131b8 <atan+0x318>)
 8012eaa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012eae:	429e      	cmp	r6, r3
 8012eb0:	46ab      	mov	fp, r5
 8012eb2:	dd18      	ble.n	8012ee6 <atan+0x46>
 8012eb4:	4bc1      	ldr	r3, [pc, #772]	; (80131bc <atan+0x31c>)
 8012eb6:	429e      	cmp	r6, r3
 8012eb8:	dc01      	bgt.n	8012ebe <atan+0x1e>
 8012eba:	d109      	bne.n	8012ed0 <atan+0x30>
 8012ebc:	b144      	cbz	r4, 8012ed0 <atan+0x30>
 8012ebe:	4622      	mov	r2, r4
 8012ec0:	462b      	mov	r3, r5
 8012ec2:	4620      	mov	r0, r4
 8012ec4:	4629      	mov	r1, r5
 8012ec6:	f7ed f9e1 	bl	800028c <__adddf3>
 8012eca:	4604      	mov	r4, r0
 8012ecc:	460d      	mov	r5, r1
 8012ece:	e006      	b.n	8012ede <atan+0x3e>
 8012ed0:	f1bb 0f00 	cmp.w	fp, #0
 8012ed4:	f300 8131 	bgt.w	801313a <atan+0x29a>
 8012ed8:	a59b      	add	r5, pc, #620	; (adr r5, 8013148 <atan+0x2a8>)
 8012eda:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012ede:	ec45 4b10 	vmov	d0, r4, r5
 8012ee2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ee6:	4bb6      	ldr	r3, [pc, #728]	; (80131c0 <atan+0x320>)
 8012ee8:	429e      	cmp	r6, r3
 8012eea:	dc14      	bgt.n	8012f16 <atan+0x76>
 8012eec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012ef0:	429e      	cmp	r6, r3
 8012ef2:	dc0d      	bgt.n	8012f10 <atan+0x70>
 8012ef4:	a396      	add	r3, pc, #600	; (adr r3, 8013150 <atan+0x2b0>)
 8012ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efa:	ee10 0a10 	vmov	r0, s0
 8012efe:	4629      	mov	r1, r5
 8012f00:	f7ed f9c4 	bl	800028c <__adddf3>
 8012f04:	4baf      	ldr	r3, [pc, #700]	; (80131c4 <atan+0x324>)
 8012f06:	2200      	movs	r2, #0
 8012f08:	f7ed fe06 	bl	8000b18 <__aeabi_dcmpgt>
 8012f0c:	2800      	cmp	r0, #0
 8012f0e:	d1e6      	bne.n	8012ede <atan+0x3e>
 8012f10:	f04f 3aff 	mov.w	sl, #4294967295
 8012f14:	e02b      	b.n	8012f6e <atan+0xce>
 8012f16:	f000 f963 	bl	80131e0 <fabs>
 8012f1a:	4bab      	ldr	r3, [pc, #684]	; (80131c8 <atan+0x328>)
 8012f1c:	429e      	cmp	r6, r3
 8012f1e:	ec55 4b10 	vmov	r4, r5, d0
 8012f22:	f300 80bf 	bgt.w	80130a4 <atan+0x204>
 8012f26:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012f2a:	429e      	cmp	r6, r3
 8012f2c:	f300 80a0 	bgt.w	8013070 <atan+0x1d0>
 8012f30:	ee10 2a10 	vmov	r2, s0
 8012f34:	ee10 0a10 	vmov	r0, s0
 8012f38:	462b      	mov	r3, r5
 8012f3a:	4629      	mov	r1, r5
 8012f3c:	f7ed f9a6 	bl	800028c <__adddf3>
 8012f40:	4ba0      	ldr	r3, [pc, #640]	; (80131c4 <atan+0x324>)
 8012f42:	2200      	movs	r2, #0
 8012f44:	f7ed f9a0 	bl	8000288 <__aeabi_dsub>
 8012f48:	2200      	movs	r2, #0
 8012f4a:	4606      	mov	r6, r0
 8012f4c:	460f      	mov	r7, r1
 8012f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012f52:	4620      	mov	r0, r4
 8012f54:	4629      	mov	r1, r5
 8012f56:	f7ed f999 	bl	800028c <__adddf3>
 8012f5a:	4602      	mov	r2, r0
 8012f5c:	460b      	mov	r3, r1
 8012f5e:	4630      	mov	r0, r6
 8012f60:	4639      	mov	r1, r7
 8012f62:	f7ed fc73 	bl	800084c <__aeabi_ddiv>
 8012f66:	f04f 0a00 	mov.w	sl, #0
 8012f6a:	4604      	mov	r4, r0
 8012f6c:	460d      	mov	r5, r1
 8012f6e:	4622      	mov	r2, r4
 8012f70:	462b      	mov	r3, r5
 8012f72:	4620      	mov	r0, r4
 8012f74:	4629      	mov	r1, r5
 8012f76:	f7ed fb3f 	bl	80005f8 <__aeabi_dmul>
 8012f7a:	4602      	mov	r2, r0
 8012f7c:	460b      	mov	r3, r1
 8012f7e:	4680      	mov	r8, r0
 8012f80:	4689      	mov	r9, r1
 8012f82:	f7ed fb39 	bl	80005f8 <__aeabi_dmul>
 8012f86:	a374      	add	r3, pc, #464	; (adr r3, 8013158 <atan+0x2b8>)
 8012f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f8c:	4606      	mov	r6, r0
 8012f8e:	460f      	mov	r7, r1
 8012f90:	f7ed fb32 	bl	80005f8 <__aeabi_dmul>
 8012f94:	a372      	add	r3, pc, #456	; (adr r3, 8013160 <atan+0x2c0>)
 8012f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f9a:	f7ed f977 	bl	800028c <__adddf3>
 8012f9e:	4632      	mov	r2, r6
 8012fa0:	463b      	mov	r3, r7
 8012fa2:	f7ed fb29 	bl	80005f8 <__aeabi_dmul>
 8012fa6:	a370      	add	r3, pc, #448	; (adr r3, 8013168 <atan+0x2c8>)
 8012fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fac:	f7ed f96e 	bl	800028c <__adddf3>
 8012fb0:	4632      	mov	r2, r6
 8012fb2:	463b      	mov	r3, r7
 8012fb4:	f7ed fb20 	bl	80005f8 <__aeabi_dmul>
 8012fb8:	a36d      	add	r3, pc, #436	; (adr r3, 8013170 <atan+0x2d0>)
 8012fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fbe:	f7ed f965 	bl	800028c <__adddf3>
 8012fc2:	4632      	mov	r2, r6
 8012fc4:	463b      	mov	r3, r7
 8012fc6:	f7ed fb17 	bl	80005f8 <__aeabi_dmul>
 8012fca:	a36b      	add	r3, pc, #428	; (adr r3, 8013178 <atan+0x2d8>)
 8012fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd0:	f7ed f95c 	bl	800028c <__adddf3>
 8012fd4:	4632      	mov	r2, r6
 8012fd6:	463b      	mov	r3, r7
 8012fd8:	f7ed fb0e 	bl	80005f8 <__aeabi_dmul>
 8012fdc:	a368      	add	r3, pc, #416	; (adr r3, 8013180 <atan+0x2e0>)
 8012fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe2:	f7ed f953 	bl	800028c <__adddf3>
 8012fe6:	4642      	mov	r2, r8
 8012fe8:	464b      	mov	r3, r9
 8012fea:	f7ed fb05 	bl	80005f8 <__aeabi_dmul>
 8012fee:	a366      	add	r3, pc, #408	; (adr r3, 8013188 <atan+0x2e8>)
 8012ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff4:	4680      	mov	r8, r0
 8012ff6:	4689      	mov	r9, r1
 8012ff8:	4630      	mov	r0, r6
 8012ffa:	4639      	mov	r1, r7
 8012ffc:	f7ed fafc 	bl	80005f8 <__aeabi_dmul>
 8013000:	a363      	add	r3, pc, #396	; (adr r3, 8013190 <atan+0x2f0>)
 8013002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013006:	f7ed f93f 	bl	8000288 <__aeabi_dsub>
 801300a:	4632      	mov	r2, r6
 801300c:	463b      	mov	r3, r7
 801300e:	f7ed faf3 	bl	80005f8 <__aeabi_dmul>
 8013012:	a361      	add	r3, pc, #388	; (adr r3, 8013198 <atan+0x2f8>)
 8013014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013018:	f7ed f936 	bl	8000288 <__aeabi_dsub>
 801301c:	4632      	mov	r2, r6
 801301e:	463b      	mov	r3, r7
 8013020:	f7ed faea 	bl	80005f8 <__aeabi_dmul>
 8013024:	a35e      	add	r3, pc, #376	; (adr r3, 80131a0 <atan+0x300>)
 8013026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801302a:	f7ed f92d 	bl	8000288 <__aeabi_dsub>
 801302e:	4632      	mov	r2, r6
 8013030:	463b      	mov	r3, r7
 8013032:	f7ed fae1 	bl	80005f8 <__aeabi_dmul>
 8013036:	a35c      	add	r3, pc, #368	; (adr r3, 80131a8 <atan+0x308>)
 8013038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801303c:	f7ed f924 	bl	8000288 <__aeabi_dsub>
 8013040:	4632      	mov	r2, r6
 8013042:	463b      	mov	r3, r7
 8013044:	f7ed fad8 	bl	80005f8 <__aeabi_dmul>
 8013048:	4602      	mov	r2, r0
 801304a:	460b      	mov	r3, r1
 801304c:	4640      	mov	r0, r8
 801304e:	4649      	mov	r1, r9
 8013050:	f7ed f91c 	bl	800028c <__adddf3>
 8013054:	4622      	mov	r2, r4
 8013056:	462b      	mov	r3, r5
 8013058:	f7ed face 	bl	80005f8 <__aeabi_dmul>
 801305c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8013060:	4602      	mov	r2, r0
 8013062:	460b      	mov	r3, r1
 8013064:	d14b      	bne.n	80130fe <atan+0x25e>
 8013066:	4620      	mov	r0, r4
 8013068:	4629      	mov	r1, r5
 801306a:	f7ed f90d 	bl	8000288 <__aeabi_dsub>
 801306e:	e72c      	b.n	8012eca <atan+0x2a>
 8013070:	ee10 0a10 	vmov	r0, s0
 8013074:	4b53      	ldr	r3, [pc, #332]	; (80131c4 <atan+0x324>)
 8013076:	2200      	movs	r2, #0
 8013078:	4629      	mov	r1, r5
 801307a:	f7ed f905 	bl	8000288 <__aeabi_dsub>
 801307e:	4b51      	ldr	r3, [pc, #324]	; (80131c4 <atan+0x324>)
 8013080:	4606      	mov	r6, r0
 8013082:	460f      	mov	r7, r1
 8013084:	2200      	movs	r2, #0
 8013086:	4620      	mov	r0, r4
 8013088:	4629      	mov	r1, r5
 801308a:	f7ed f8ff 	bl	800028c <__adddf3>
 801308e:	4602      	mov	r2, r0
 8013090:	460b      	mov	r3, r1
 8013092:	4630      	mov	r0, r6
 8013094:	4639      	mov	r1, r7
 8013096:	f7ed fbd9 	bl	800084c <__aeabi_ddiv>
 801309a:	f04f 0a01 	mov.w	sl, #1
 801309e:	4604      	mov	r4, r0
 80130a0:	460d      	mov	r5, r1
 80130a2:	e764      	b.n	8012f6e <atan+0xce>
 80130a4:	4b49      	ldr	r3, [pc, #292]	; (80131cc <atan+0x32c>)
 80130a6:	429e      	cmp	r6, r3
 80130a8:	da1d      	bge.n	80130e6 <atan+0x246>
 80130aa:	ee10 0a10 	vmov	r0, s0
 80130ae:	4b48      	ldr	r3, [pc, #288]	; (80131d0 <atan+0x330>)
 80130b0:	2200      	movs	r2, #0
 80130b2:	4629      	mov	r1, r5
 80130b4:	f7ed f8e8 	bl	8000288 <__aeabi_dsub>
 80130b8:	4b45      	ldr	r3, [pc, #276]	; (80131d0 <atan+0x330>)
 80130ba:	4606      	mov	r6, r0
 80130bc:	460f      	mov	r7, r1
 80130be:	2200      	movs	r2, #0
 80130c0:	4620      	mov	r0, r4
 80130c2:	4629      	mov	r1, r5
 80130c4:	f7ed fa98 	bl	80005f8 <__aeabi_dmul>
 80130c8:	4b3e      	ldr	r3, [pc, #248]	; (80131c4 <atan+0x324>)
 80130ca:	2200      	movs	r2, #0
 80130cc:	f7ed f8de 	bl	800028c <__adddf3>
 80130d0:	4602      	mov	r2, r0
 80130d2:	460b      	mov	r3, r1
 80130d4:	4630      	mov	r0, r6
 80130d6:	4639      	mov	r1, r7
 80130d8:	f7ed fbb8 	bl	800084c <__aeabi_ddiv>
 80130dc:	f04f 0a02 	mov.w	sl, #2
 80130e0:	4604      	mov	r4, r0
 80130e2:	460d      	mov	r5, r1
 80130e4:	e743      	b.n	8012f6e <atan+0xce>
 80130e6:	462b      	mov	r3, r5
 80130e8:	ee10 2a10 	vmov	r2, s0
 80130ec:	4939      	ldr	r1, [pc, #228]	; (80131d4 <atan+0x334>)
 80130ee:	2000      	movs	r0, #0
 80130f0:	f7ed fbac 	bl	800084c <__aeabi_ddiv>
 80130f4:	f04f 0a03 	mov.w	sl, #3
 80130f8:	4604      	mov	r4, r0
 80130fa:	460d      	mov	r5, r1
 80130fc:	e737      	b.n	8012f6e <atan+0xce>
 80130fe:	4b36      	ldr	r3, [pc, #216]	; (80131d8 <atan+0x338>)
 8013100:	4e36      	ldr	r6, [pc, #216]	; (80131dc <atan+0x33c>)
 8013102:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310a:	f7ed f8bd 	bl	8000288 <__aeabi_dsub>
 801310e:	4622      	mov	r2, r4
 8013110:	462b      	mov	r3, r5
 8013112:	f7ed f8b9 	bl	8000288 <__aeabi_dsub>
 8013116:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801311a:	4602      	mov	r2, r0
 801311c:	460b      	mov	r3, r1
 801311e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013122:	f7ed f8b1 	bl	8000288 <__aeabi_dsub>
 8013126:	f1bb 0f00 	cmp.w	fp, #0
 801312a:	4604      	mov	r4, r0
 801312c:	460d      	mov	r5, r1
 801312e:	f6bf aed6 	bge.w	8012ede <atan+0x3e>
 8013132:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013136:	461d      	mov	r5, r3
 8013138:	e6d1      	b.n	8012ede <atan+0x3e>
 801313a:	a51d      	add	r5, pc, #116	; (adr r5, 80131b0 <atan+0x310>)
 801313c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013140:	e6cd      	b.n	8012ede <atan+0x3e>
 8013142:	bf00      	nop
 8013144:	f3af 8000 	nop.w
 8013148:	54442d18 	.word	0x54442d18
 801314c:	bff921fb 	.word	0xbff921fb
 8013150:	8800759c 	.word	0x8800759c
 8013154:	7e37e43c 	.word	0x7e37e43c
 8013158:	e322da11 	.word	0xe322da11
 801315c:	3f90ad3a 	.word	0x3f90ad3a
 8013160:	24760deb 	.word	0x24760deb
 8013164:	3fa97b4b 	.word	0x3fa97b4b
 8013168:	a0d03d51 	.word	0xa0d03d51
 801316c:	3fb10d66 	.word	0x3fb10d66
 8013170:	c54c206e 	.word	0xc54c206e
 8013174:	3fb745cd 	.word	0x3fb745cd
 8013178:	920083ff 	.word	0x920083ff
 801317c:	3fc24924 	.word	0x3fc24924
 8013180:	5555550d 	.word	0x5555550d
 8013184:	3fd55555 	.word	0x3fd55555
 8013188:	2c6a6c2f 	.word	0x2c6a6c2f
 801318c:	bfa2b444 	.word	0xbfa2b444
 8013190:	52defd9a 	.word	0x52defd9a
 8013194:	3fadde2d 	.word	0x3fadde2d
 8013198:	af749a6d 	.word	0xaf749a6d
 801319c:	3fb3b0f2 	.word	0x3fb3b0f2
 80131a0:	fe231671 	.word	0xfe231671
 80131a4:	3fbc71c6 	.word	0x3fbc71c6
 80131a8:	9998ebc4 	.word	0x9998ebc4
 80131ac:	3fc99999 	.word	0x3fc99999
 80131b0:	54442d18 	.word	0x54442d18
 80131b4:	3ff921fb 	.word	0x3ff921fb
 80131b8:	440fffff 	.word	0x440fffff
 80131bc:	7ff00000 	.word	0x7ff00000
 80131c0:	3fdbffff 	.word	0x3fdbffff
 80131c4:	3ff00000 	.word	0x3ff00000
 80131c8:	3ff2ffff 	.word	0x3ff2ffff
 80131cc:	40038000 	.word	0x40038000
 80131d0:	3ff80000 	.word	0x3ff80000
 80131d4:	bff00000 	.word	0xbff00000
 80131d8:	08014230 	.word	0x08014230
 80131dc:	08014210 	.word	0x08014210

080131e0 <fabs>:
 80131e0:	ec51 0b10 	vmov	r0, r1, d0
 80131e4:	ee10 2a10 	vmov	r2, s0
 80131e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80131ec:	ec43 2b10 	vmov	d0, r2, r3
 80131f0:	4770      	bx	lr
 80131f2:	0000      	movs	r0, r0
 80131f4:	0000      	movs	r0, r0
	...

080131f8 <scalbn>:
 80131f8:	b570      	push	{r4, r5, r6, lr}
 80131fa:	ec55 4b10 	vmov	r4, r5, d0
 80131fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013202:	4606      	mov	r6, r0
 8013204:	462b      	mov	r3, r5
 8013206:	b999      	cbnz	r1, 8013230 <scalbn+0x38>
 8013208:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801320c:	4323      	orrs	r3, r4
 801320e:	d03f      	beq.n	8013290 <scalbn+0x98>
 8013210:	4b35      	ldr	r3, [pc, #212]	; (80132e8 <scalbn+0xf0>)
 8013212:	4629      	mov	r1, r5
 8013214:	ee10 0a10 	vmov	r0, s0
 8013218:	2200      	movs	r2, #0
 801321a:	f7ed f9ed 	bl	80005f8 <__aeabi_dmul>
 801321e:	4b33      	ldr	r3, [pc, #204]	; (80132ec <scalbn+0xf4>)
 8013220:	429e      	cmp	r6, r3
 8013222:	4604      	mov	r4, r0
 8013224:	460d      	mov	r5, r1
 8013226:	da10      	bge.n	801324a <scalbn+0x52>
 8013228:	a327      	add	r3, pc, #156	; (adr r3, 80132c8 <scalbn+0xd0>)
 801322a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801322e:	e01f      	b.n	8013270 <scalbn+0x78>
 8013230:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8013234:	4291      	cmp	r1, r2
 8013236:	d10c      	bne.n	8013252 <scalbn+0x5a>
 8013238:	ee10 2a10 	vmov	r2, s0
 801323c:	4620      	mov	r0, r4
 801323e:	4629      	mov	r1, r5
 8013240:	f7ed f824 	bl	800028c <__adddf3>
 8013244:	4604      	mov	r4, r0
 8013246:	460d      	mov	r5, r1
 8013248:	e022      	b.n	8013290 <scalbn+0x98>
 801324a:	460b      	mov	r3, r1
 801324c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013250:	3936      	subs	r1, #54	; 0x36
 8013252:	f24c 3250 	movw	r2, #50000	; 0xc350
 8013256:	4296      	cmp	r6, r2
 8013258:	dd0d      	ble.n	8013276 <scalbn+0x7e>
 801325a:	2d00      	cmp	r5, #0
 801325c:	a11c      	add	r1, pc, #112	; (adr r1, 80132d0 <scalbn+0xd8>)
 801325e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013262:	da02      	bge.n	801326a <scalbn+0x72>
 8013264:	a11c      	add	r1, pc, #112	; (adr r1, 80132d8 <scalbn+0xe0>)
 8013266:	e9d1 0100 	ldrd	r0, r1, [r1]
 801326a:	a319      	add	r3, pc, #100	; (adr r3, 80132d0 <scalbn+0xd8>)
 801326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013270:	f7ed f9c2 	bl	80005f8 <__aeabi_dmul>
 8013274:	e7e6      	b.n	8013244 <scalbn+0x4c>
 8013276:	1872      	adds	r2, r6, r1
 8013278:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801327c:	428a      	cmp	r2, r1
 801327e:	dcec      	bgt.n	801325a <scalbn+0x62>
 8013280:	2a00      	cmp	r2, #0
 8013282:	dd08      	ble.n	8013296 <scalbn+0x9e>
 8013284:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013288:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801328c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013290:	ec45 4b10 	vmov	d0, r4, r5
 8013294:	bd70      	pop	{r4, r5, r6, pc}
 8013296:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801329a:	da08      	bge.n	80132ae <scalbn+0xb6>
 801329c:	2d00      	cmp	r5, #0
 801329e:	a10a      	add	r1, pc, #40	; (adr r1, 80132c8 <scalbn+0xd0>)
 80132a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132a4:	dac0      	bge.n	8013228 <scalbn+0x30>
 80132a6:	a10e      	add	r1, pc, #56	; (adr r1, 80132e0 <scalbn+0xe8>)
 80132a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80132ac:	e7bc      	b.n	8013228 <scalbn+0x30>
 80132ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80132b2:	3236      	adds	r2, #54	; 0x36
 80132b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80132b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80132bc:	4620      	mov	r0, r4
 80132be:	4b0c      	ldr	r3, [pc, #48]	; (80132f0 <scalbn+0xf8>)
 80132c0:	2200      	movs	r2, #0
 80132c2:	e7d5      	b.n	8013270 <scalbn+0x78>
 80132c4:	f3af 8000 	nop.w
 80132c8:	c2f8f359 	.word	0xc2f8f359
 80132cc:	01a56e1f 	.word	0x01a56e1f
 80132d0:	8800759c 	.word	0x8800759c
 80132d4:	7e37e43c 	.word	0x7e37e43c
 80132d8:	8800759c 	.word	0x8800759c
 80132dc:	fe37e43c 	.word	0xfe37e43c
 80132e0:	c2f8f359 	.word	0xc2f8f359
 80132e4:	81a56e1f 	.word	0x81a56e1f
 80132e8:	43500000 	.word	0x43500000
 80132ec:	ffff3cb0 	.word	0xffff3cb0
 80132f0:	3c900000 	.word	0x3c900000

080132f4 <with_errno>:
 80132f4:	b570      	push	{r4, r5, r6, lr}
 80132f6:	4604      	mov	r4, r0
 80132f8:	460d      	mov	r5, r1
 80132fa:	4616      	mov	r6, r2
 80132fc:	f7fb fbda 	bl	800eab4 <__errno>
 8013300:	4629      	mov	r1, r5
 8013302:	6006      	str	r6, [r0, #0]
 8013304:	4620      	mov	r0, r4
 8013306:	bd70      	pop	{r4, r5, r6, pc}

08013308 <xflow>:
 8013308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801330a:	4614      	mov	r4, r2
 801330c:	461d      	mov	r5, r3
 801330e:	b108      	cbz	r0, 8013314 <xflow+0xc>
 8013310:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013314:	e9cd 2300 	strd	r2, r3, [sp]
 8013318:	e9dd 2300 	ldrd	r2, r3, [sp]
 801331c:	4620      	mov	r0, r4
 801331e:	4629      	mov	r1, r5
 8013320:	f7ed f96a 	bl	80005f8 <__aeabi_dmul>
 8013324:	2222      	movs	r2, #34	; 0x22
 8013326:	b003      	add	sp, #12
 8013328:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801332c:	f7ff bfe2 	b.w	80132f4 <with_errno>

08013330 <__math_uflow>:
 8013330:	b508      	push	{r3, lr}
 8013332:	2200      	movs	r2, #0
 8013334:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013338:	f7ff ffe6 	bl	8013308 <xflow>
 801333c:	ec41 0b10 	vmov	d0, r0, r1
 8013340:	bd08      	pop	{r3, pc}

08013342 <__math_oflow>:
 8013342:	b508      	push	{r3, lr}
 8013344:	2200      	movs	r2, #0
 8013346:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801334a:	f7ff ffdd 	bl	8013308 <xflow>
 801334e:	ec41 0b10 	vmov	d0, r0, r1
 8013352:	bd08      	pop	{r3, pc}
 8013354:	0000      	movs	r0, r0
	...

08013358 <__kernel_rem_pio2>:
 8013358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801335c:	ed2d 8b02 	vpush	{d8}
 8013360:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8013364:	f112 0f14 	cmn.w	r2, #20
 8013368:	9306      	str	r3, [sp, #24]
 801336a:	9104      	str	r1, [sp, #16]
 801336c:	4bc2      	ldr	r3, [pc, #776]	; (8013678 <__kernel_rem_pio2+0x320>)
 801336e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8013370:	9009      	str	r0, [sp, #36]	; 0x24
 8013372:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013376:	9300      	str	r3, [sp, #0]
 8013378:	9b06      	ldr	r3, [sp, #24]
 801337a:	f103 33ff 	add.w	r3, r3, #4294967295
 801337e:	bfa8      	it	ge
 8013380:	1ed4      	subge	r4, r2, #3
 8013382:	9305      	str	r3, [sp, #20]
 8013384:	bfb2      	itee	lt
 8013386:	2400      	movlt	r4, #0
 8013388:	2318      	movge	r3, #24
 801338a:	fb94 f4f3 	sdivge	r4, r4, r3
 801338e:	f06f 0317 	mvn.w	r3, #23
 8013392:	fb04 3303 	mla	r3, r4, r3, r3
 8013396:	eb03 0a02 	add.w	sl, r3, r2
 801339a:	9b00      	ldr	r3, [sp, #0]
 801339c:	9a05      	ldr	r2, [sp, #20]
 801339e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8013668 <__kernel_rem_pio2+0x310>
 80133a2:	eb03 0802 	add.w	r8, r3, r2
 80133a6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80133a8:	1aa7      	subs	r7, r4, r2
 80133aa:	ae20      	add	r6, sp, #128	; 0x80
 80133ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80133b0:	2500      	movs	r5, #0
 80133b2:	4545      	cmp	r5, r8
 80133b4:	dd13      	ble.n	80133de <__kernel_rem_pio2+0x86>
 80133b6:	9b06      	ldr	r3, [sp, #24]
 80133b8:	aa20      	add	r2, sp, #128	; 0x80
 80133ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80133be:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80133c2:	f04f 0800 	mov.w	r8, #0
 80133c6:	9b00      	ldr	r3, [sp, #0]
 80133c8:	4598      	cmp	r8, r3
 80133ca:	dc31      	bgt.n	8013430 <__kernel_rem_pio2+0xd8>
 80133cc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8013668 <__kernel_rem_pio2+0x310>
 80133d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80133d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80133d8:	462f      	mov	r7, r5
 80133da:	2600      	movs	r6, #0
 80133dc:	e01b      	b.n	8013416 <__kernel_rem_pio2+0xbe>
 80133de:	42ef      	cmn	r7, r5
 80133e0:	d407      	bmi.n	80133f2 <__kernel_rem_pio2+0x9a>
 80133e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80133e6:	f7ed f89d 	bl	8000524 <__aeabi_i2d>
 80133ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80133ee:	3501      	adds	r5, #1
 80133f0:	e7df      	b.n	80133b2 <__kernel_rem_pio2+0x5a>
 80133f2:	ec51 0b18 	vmov	r0, r1, d8
 80133f6:	e7f8      	b.n	80133ea <__kernel_rem_pio2+0x92>
 80133f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013400:	f7ed f8fa 	bl	80005f8 <__aeabi_dmul>
 8013404:	4602      	mov	r2, r0
 8013406:	460b      	mov	r3, r1
 8013408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801340c:	f7ec ff3e 	bl	800028c <__adddf3>
 8013410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013414:	3601      	adds	r6, #1
 8013416:	9b05      	ldr	r3, [sp, #20]
 8013418:	429e      	cmp	r6, r3
 801341a:	f1a7 0708 	sub.w	r7, r7, #8
 801341e:	ddeb      	ble.n	80133f8 <__kernel_rem_pio2+0xa0>
 8013420:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013424:	f108 0801 	add.w	r8, r8, #1
 8013428:	ecab 7b02 	vstmia	fp!, {d7}
 801342c:	3508      	adds	r5, #8
 801342e:	e7ca      	b.n	80133c6 <__kernel_rem_pio2+0x6e>
 8013430:	9b00      	ldr	r3, [sp, #0]
 8013432:	aa0c      	add	r2, sp, #48	; 0x30
 8013434:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013438:	930b      	str	r3, [sp, #44]	; 0x2c
 801343a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801343c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013440:	9c00      	ldr	r4, [sp, #0]
 8013442:	930a      	str	r3, [sp, #40]	; 0x28
 8013444:	00e3      	lsls	r3, r4, #3
 8013446:	9308      	str	r3, [sp, #32]
 8013448:	ab98      	add	r3, sp, #608	; 0x260
 801344a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801344e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8013452:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8013456:	ab70      	add	r3, sp, #448	; 0x1c0
 8013458:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801345c:	46c3      	mov	fp, r8
 801345e:	46a1      	mov	r9, r4
 8013460:	f1b9 0f00 	cmp.w	r9, #0
 8013464:	f1a5 0508 	sub.w	r5, r5, #8
 8013468:	dc77      	bgt.n	801355a <__kernel_rem_pio2+0x202>
 801346a:	ec47 6b10 	vmov	d0, r6, r7
 801346e:	4650      	mov	r0, sl
 8013470:	f7ff fec2 	bl	80131f8 <scalbn>
 8013474:	ec57 6b10 	vmov	r6, r7, d0
 8013478:	2200      	movs	r2, #0
 801347a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801347e:	ee10 0a10 	vmov	r0, s0
 8013482:	4639      	mov	r1, r7
 8013484:	f7ed f8b8 	bl	80005f8 <__aeabi_dmul>
 8013488:	ec41 0b10 	vmov	d0, r0, r1
 801348c:	f000 fab4 	bl	80139f8 <floor>
 8013490:	4b7a      	ldr	r3, [pc, #488]	; (801367c <__kernel_rem_pio2+0x324>)
 8013492:	ec51 0b10 	vmov	r0, r1, d0
 8013496:	2200      	movs	r2, #0
 8013498:	f7ed f8ae 	bl	80005f8 <__aeabi_dmul>
 801349c:	4602      	mov	r2, r0
 801349e:	460b      	mov	r3, r1
 80134a0:	4630      	mov	r0, r6
 80134a2:	4639      	mov	r1, r7
 80134a4:	f7ec fef0 	bl	8000288 <__aeabi_dsub>
 80134a8:	460f      	mov	r7, r1
 80134aa:	4606      	mov	r6, r0
 80134ac:	f7ed fb54 	bl	8000b58 <__aeabi_d2iz>
 80134b0:	9002      	str	r0, [sp, #8]
 80134b2:	f7ed f837 	bl	8000524 <__aeabi_i2d>
 80134b6:	4602      	mov	r2, r0
 80134b8:	460b      	mov	r3, r1
 80134ba:	4630      	mov	r0, r6
 80134bc:	4639      	mov	r1, r7
 80134be:	f7ec fee3 	bl	8000288 <__aeabi_dsub>
 80134c2:	f1ba 0f00 	cmp.w	sl, #0
 80134c6:	4606      	mov	r6, r0
 80134c8:	460f      	mov	r7, r1
 80134ca:	dd6d      	ble.n	80135a8 <__kernel_rem_pio2+0x250>
 80134cc:	1e61      	subs	r1, r4, #1
 80134ce:	ab0c      	add	r3, sp, #48	; 0x30
 80134d0:	9d02      	ldr	r5, [sp, #8]
 80134d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80134d6:	f1ca 0018 	rsb	r0, sl, #24
 80134da:	fa43 f200 	asr.w	r2, r3, r0
 80134de:	4415      	add	r5, r2
 80134e0:	4082      	lsls	r2, r0
 80134e2:	1a9b      	subs	r3, r3, r2
 80134e4:	aa0c      	add	r2, sp, #48	; 0x30
 80134e6:	9502      	str	r5, [sp, #8]
 80134e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80134ec:	f1ca 0217 	rsb	r2, sl, #23
 80134f0:	fa43 fb02 	asr.w	fp, r3, r2
 80134f4:	f1bb 0f00 	cmp.w	fp, #0
 80134f8:	dd65      	ble.n	80135c6 <__kernel_rem_pio2+0x26e>
 80134fa:	9b02      	ldr	r3, [sp, #8]
 80134fc:	2200      	movs	r2, #0
 80134fe:	3301      	adds	r3, #1
 8013500:	9302      	str	r3, [sp, #8]
 8013502:	4615      	mov	r5, r2
 8013504:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013508:	4294      	cmp	r4, r2
 801350a:	f300 809f 	bgt.w	801364c <__kernel_rem_pio2+0x2f4>
 801350e:	f1ba 0f00 	cmp.w	sl, #0
 8013512:	dd07      	ble.n	8013524 <__kernel_rem_pio2+0x1cc>
 8013514:	f1ba 0f01 	cmp.w	sl, #1
 8013518:	f000 80c1 	beq.w	801369e <__kernel_rem_pio2+0x346>
 801351c:	f1ba 0f02 	cmp.w	sl, #2
 8013520:	f000 80c7 	beq.w	80136b2 <__kernel_rem_pio2+0x35a>
 8013524:	f1bb 0f02 	cmp.w	fp, #2
 8013528:	d14d      	bne.n	80135c6 <__kernel_rem_pio2+0x26e>
 801352a:	4632      	mov	r2, r6
 801352c:	463b      	mov	r3, r7
 801352e:	4954      	ldr	r1, [pc, #336]	; (8013680 <__kernel_rem_pio2+0x328>)
 8013530:	2000      	movs	r0, #0
 8013532:	f7ec fea9 	bl	8000288 <__aeabi_dsub>
 8013536:	4606      	mov	r6, r0
 8013538:	460f      	mov	r7, r1
 801353a:	2d00      	cmp	r5, #0
 801353c:	d043      	beq.n	80135c6 <__kernel_rem_pio2+0x26e>
 801353e:	4650      	mov	r0, sl
 8013540:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8013670 <__kernel_rem_pio2+0x318>
 8013544:	f7ff fe58 	bl	80131f8 <scalbn>
 8013548:	4630      	mov	r0, r6
 801354a:	4639      	mov	r1, r7
 801354c:	ec53 2b10 	vmov	r2, r3, d0
 8013550:	f7ec fe9a 	bl	8000288 <__aeabi_dsub>
 8013554:	4606      	mov	r6, r0
 8013556:	460f      	mov	r7, r1
 8013558:	e035      	b.n	80135c6 <__kernel_rem_pio2+0x26e>
 801355a:	4b4a      	ldr	r3, [pc, #296]	; (8013684 <__kernel_rem_pio2+0x32c>)
 801355c:	2200      	movs	r2, #0
 801355e:	4630      	mov	r0, r6
 8013560:	4639      	mov	r1, r7
 8013562:	f7ed f849 	bl	80005f8 <__aeabi_dmul>
 8013566:	f7ed faf7 	bl	8000b58 <__aeabi_d2iz>
 801356a:	f7ec ffdb 	bl	8000524 <__aeabi_i2d>
 801356e:	4602      	mov	r2, r0
 8013570:	460b      	mov	r3, r1
 8013572:	ec43 2b18 	vmov	d8, r2, r3
 8013576:	4b44      	ldr	r3, [pc, #272]	; (8013688 <__kernel_rem_pio2+0x330>)
 8013578:	2200      	movs	r2, #0
 801357a:	f7ed f83d 	bl	80005f8 <__aeabi_dmul>
 801357e:	4602      	mov	r2, r0
 8013580:	460b      	mov	r3, r1
 8013582:	4630      	mov	r0, r6
 8013584:	4639      	mov	r1, r7
 8013586:	f7ec fe7f 	bl	8000288 <__aeabi_dsub>
 801358a:	f7ed fae5 	bl	8000b58 <__aeabi_d2iz>
 801358e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013592:	f84b 0b04 	str.w	r0, [fp], #4
 8013596:	ec51 0b18 	vmov	r0, r1, d8
 801359a:	f7ec fe77 	bl	800028c <__adddf3>
 801359e:	f109 39ff 	add.w	r9, r9, #4294967295
 80135a2:	4606      	mov	r6, r0
 80135a4:	460f      	mov	r7, r1
 80135a6:	e75b      	b.n	8013460 <__kernel_rem_pio2+0x108>
 80135a8:	d106      	bne.n	80135b8 <__kernel_rem_pio2+0x260>
 80135aa:	1e63      	subs	r3, r4, #1
 80135ac:	aa0c      	add	r2, sp, #48	; 0x30
 80135ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135b2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80135b6:	e79d      	b.n	80134f4 <__kernel_rem_pio2+0x19c>
 80135b8:	4b34      	ldr	r3, [pc, #208]	; (801368c <__kernel_rem_pio2+0x334>)
 80135ba:	2200      	movs	r2, #0
 80135bc:	f7ed faa2 	bl	8000b04 <__aeabi_dcmpge>
 80135c0:	2800      	cmp	r0, #0
 80135c2:	d140      	bne.n	8013646 <__kernel_rem_pio2+0x2ee>
 80135c4:	4683      	mov	fp, r0
 80135c6:	2200      	movs	r2, #0
 80135c8:	2300      	movs	r3, #0
 80135ca:	4630      	mov	r0, r6
 80135cc:	4639      	mov	r1, r7
 80135ce:	f7ed fa7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80135d2:	2800      	cmp	r0, #0
 80135d4:	f000 80c1 	beq.w	801375a <__kernel_rem_pio2+0x402>
 80135d8:	1e65      	subs	r5, r4, #1
 80135da:	462b      	mov	r3, r5
 80135dc:	2200      	movs	r2, #0
 80135de:	9900      	ldr	r1, [sp, #0]
 80135e0:	428b      	cmp	r3, r1
 80135e2:	da6d      	bge.n	80136c0 <__kernel_rem_pio2+0x368>
 80135e4:	2a00      	cmp	r2, #0
 80135e6:	f000 808a 	beq.w	80136fe <__kernel_rem_pio2+0x3a6>
 80135ea:	ab0c      	add	r3, sp, #48	; 0x30
 80135ec:	f1aa 0a18 	sub.w	sl, sl, #24
 80135f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	f000 80ae 	beq.w	8013756 <__kernel_rem_pio2+0x3fe>
 80135fa:	4650      	mov	r0, sl
 80135fc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8013670 <__kernel_rem_pio2+0x318>
 8013600:	f7ff fdfa 	bl	80131f8 <scalbn>
 8013604:	1c6b      	adds	r3, r5, #1
 8013606:	00da      	lsls	r2, r3, #3
 8013608:	9205      	str	r2, [sp, #20]
 801360a:	ec57 6b10 	vmov	r6, r7, d0
 801360e:	aa70      	add	r2, sp, #448	; 0x1c0
 8013610:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8013684 <__kernel_rem_pio2+0x32c>
 8013614:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8013618:	462c      	mov	r4, r5
 801361a:	f04f 0800 	mov.w	r8, #0
 801361e:	2c00      	cmp	r4, #0
 8013620:	f280 80d4 	bge.w	80137cc <__kernel_rem_pio2+0x474>
 8013624:	462c      	mov	r4, r5
 8013626:	2c00      	cmp	r4, #0
 8013628:	f2c0 8102 	blt.w	8013830 <__kernel_rem_pio2+0x4d8>
 801362c:	4b18      	ldr	r3, [pc, #96]	; (8013690 <__kernel_rem_pio2+0x338>)
 801362e:	461e      	mov	r6, r3
 8013630:	ab70      	add	r3, sp, #448	; 0x1c0
 8013632:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8013636:	1b2b      	subs	r3, r5, r4
 8013638:	f04f 0900 	mov.w	r9, #0
 801363c:	f04f 0a00 	mov.w	sl, #0
 8013640:	2700      	movs	r7, #0
 8013642:	9306      	str	r3, [sp, #24]
 8013644:	e0e6      	b.n	8013814 <__kernel_rem_pio2+0x4bc>
 8013646:	f04f 0b02 	mov.w	fp, #2
 801364a:	e756      	b.n	80134fa <__kernel_rem_pio2+0x1a2>
 801364c:	f8d8 3000 	ldr.w	r3, [r8]
 8013650:	bb05      	cbnz	r5, 8013694 <__kernel_rem_pio2+0x33c>
 8013652:	b123      	cbz	r3, 801365e <__kernel_rem_pio2+0x306>
 8013654:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013658:	f8c8 3000 	str.w	r3, [r8]
 801365c:	2301      	movs	r3, #1
 801365e:	3201      	adds	r2, #1
 8013660:	f108 0804 	add.w	r8, r8, #4
 8013664:	461d      	mov	r5, r3
 8013666:	e74f      	b.n	8013508 <__kernel_rem_pio2+0x1b0>
	...
 8013674:	3ff00000 	.word	0x3ff00000
 8013678:	08014290 	.word	0x08014290
 801367c:	40200000 	.word	0x40200000
 8013680:	3ff00000 	.word	0x3ff00000
 8013684:	3e700000 	.word	0x3e700000
 8013688:	41700000 	.word	0x41700000
 801368c:	3fe00000 	.word	0x3fe00000
 8013690:	08014250 	.word	0x08014250
 8013694:	1acb      	subs	r3, r1, r3
 8013696:	f8c8 3000 	str.w	r3, [r8]
 801369a:	462b      	mov	r3, r5
 801369c:	e7df      	b.n	801365e <__kernel_rem_pio2+0x306>
 801369e:	1e62      	subs	r2, r4, #1
 80136a0:	ab0c      	add	r3, sp, #48	; 0x30
 80136a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136a6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80136aa:	a90c      	add	r1, sp, #48	; 0x30
 80136ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80136b0:	e738      	b.n	8013524 <__kernel_rem_pio2+0x1cc>
 80136b2:	1e62      	subs	r2, r4, #1
 80136b4:	ab0c      	add	r3, sp, #48	; 0x30
 80136b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136ba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80136be:	e7f4      	b.n	80136aa <__kernel_rem_pio2+0x352>
 80136c0:	a90c      	add	r1, sp, #48	; 0x30
 80136c2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80136c6:	3b01      	subs	r3, #1
 80136c8:	430a      	orrs	r2, r1
 80136ca:	e788      	b.n	80135de <__kernel_rem_pio2+0x286>
 80136cc:	3301      	adds	r3, #1
 80136ce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80136d2:	2900      	cmp	r1, #0
 80136d4:	d0fa      	beq.n	80136cc <__kernel_rem_pio2+0x374>
 80136d6:	9a08      	ldr	r2, [sp, #32]
 80136d8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80136dc:	446a      	add	r2, sp
 80136de:	3a98      	subs	r2, #152	; 0x98
 80136e0:	9208      	str	r2, [sp, #32]
 80136e2:	9a06      	ldr	r2, [sp, #24]
 80136e4:	a920      	add	r1, sp, #128	; 0x80
 80136e6:	18a2      	adds	r2, r4, r2
 80136e8:	18e3      	adds	r3, r4, r3
 80136ea:	f104 0801 	add.w	r8, r4, #1
 80136ee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80136f2:	9302      	str	r3, [sp, #8]
 80136f4:	9b02      	ldr	r3, [sp, #8]
 80136f6:	4543      	cmp	r3, r8
 80136f8:	da04      	bge.n	8013704 <__kernel_rem_pio2+0x3ac>
 80136fa:	461c      	mov	r4, r3
 80136fc:	e6a2      	b.n	8013444 <__kernel_rem_pio2+0xec>
 80136fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013700:	2301      	movs	r3, #1
 8013702:	e7e4      	b.n	80136ce <__kernel_rem_pio2+0x376>
 8013704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013706:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801370a:	f7ec ff0b 	bl	8000524 <__aeabi_i2d>
 801370e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8013712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013714:	46ab      	mov	fp, r5
 8013716:	461c      	mov	r4, r3
 8013718:	f04f 0900 	mov.w	r9, #0
 801371c:	2600      	movs	r6, #0
 801371e:	2700      	movs	r7, #0
 8013720:	9b05      	ldr	r3, [sp, #20]
 8013722:	4599      	cmp	r9, r3
 8013724:	dd06      	ble.n	8013734 <__kernel_rem_pio2+0x3dc>
 8013726:	9b08      	ldr	r3, [sp, #32]
 8013728:	e8e3 6702 	strd	r6, r7, [r3], #8
 801372c:	f108 0801 	add.w	r8, r8, #1
 8013730:	9308      	str	r3, [sp, #32]
 8013732:	e7df      	b.n	80136f4 <__kernel_rem_pio2+0x39c>
 8013734:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013738:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801373c:	f7ec ff5c 	bl	80005f8 <__aeabi_dmul>
 8013740:	4602      	mov	r2, r0
 8013742:	460b      	mov	r3, r1
 8013744:	4630      	mov	r0, r6
 8013746:	4639      	mov	r1, r7
 8013748:	f7ec fda0 	bl	800028c <__adddf3>
 801374c:	f109 0901 	add.w	r9, r9, #1
 8013750:	4606      	mov	r6, r0
 8013752:	460f      	mov	r7, r1
 8013754:	e7e4      	b.n	8013720 <__kernel_rem_pio2+0x3c8>
 8013756:	3d01      	subs	r5, #1
 8013758:	e747      	b.n	80135ea <__kernel_rem_pio2+0x292>
 801375a:	ec47 6b10 	vmov	d0, r6, r7
 801375e:	f1ca 0000 	rsb	r0, sl, #0
 8013762:	f7ff fd49 	bl	80131f8 <scalbn>
 8013766:	ec57 6b10 	vmov	r6, r7, d0
 801376a:	4ba0      	ldr	r3, [pc, #640]	; (80139ec <__kernel_rem_pio2+0x694>)
 801376c:	ee10 0a10 	vmov	r0, s0
 8013770:	2200      	movs	r2, #0
 8013772:	4639      	mov	r1, r7
 8013774:	f7ed f9c6 	bl	8000b04 <__aeabi_dcmpge>
 8013778:	b1f8      	cbz	r0, 80137ba <__kernel_rem_pio2+0x462>
 801377a:	4b9d      	ldr	r3, [pc, #628]	; (80139f0 <__kernel_rem_pio2+0x698>)
 801377c:	2200      	movs	r2, #0
 801377e:	4630      	mov	r0, r6
 8013780:	4639      	mov	r1, r7
 8013782:	f7ec ff39 	bl	80005f8 <__aeabi_dmul>
 8013786:	f7ed f9e7 	bl	8000b58 <__aeabi_d2iz>
 801378a:	4680      	mov	r8, r0
 801378c:	f7ec feca 	bl	8000524 <__aeabi_i2d>
 8013790:	4b96      	ldr	r3, [pc, #600]	; (80139ec <__kernel_rem_pio2+0x694>)
 8013792:	2200      	movs	r2, #0
 8013794:	f7ec ff30 	bl	80005f8 <__aeabi_dmul>
 8013798:	460b      	mov	r3, r1
 801379a:	4602      	mov	r2, r0
 801379c:	4639      	mov	r1, r7
 801379e:	4630      	mov	r0, r6
 80137a0:	f7ec fd72 	bl	8000288 <__aeabi_dsub>
 80137a4:	f7ed f9d8 	bl	8000b58 <__aeabi_d2iz>
 80137a8:	1c65      	adds	r5, r4, #1
 80137aa:	ab0c      	add	r3, sp, #48	; 0x30
 80137ac:	f10a 0a18 	add.w	sl, sl, #24
 80137b0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80137b4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80137b8:	e71f      	b.n	80135fa <__kernel_rem_pio2+0x2a2>
 80137ba:	4630      	mov	r0, r6
 80137bc:	4639      	mov	r1, r7
 80137be:	f7ed f9cb 	bl	8000b58 <__aeabi_d2iz>
 80137c2:	ab0c      	add	r3, sp, #48	; 0x30
 80137c4:	4625      	mov	r5, r4
 80137c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80137ca:	e716      	b.n	80135fa <__kernel_rem_pio2+0x2a2>
 80137cc:	ab0c      	add	r3, sp, #48	; 0x30
 80137ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80137d2:	f7ec fea7 	bl	8000524 <__aeabi_i2d>
 80137d6:	4632      	mov	r2, r6
 80137d8:	463b      	mov	r3, r7
 80137da:	f7ec ff0d 	bl	80005f8 <__aeabi_dmul>
 80137de:	4642      	mov	r2, r8
 80137e0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80137e4:	464b      	mov	r3, r9
 80137e6:	4630      	mov	r0, r6
 80137e8:	4639      	mov	r1, r7
 80137ea:	f7ec ff05 	bl	80005f8 <__aeabi_dmul>
 80137ee:	3c01      	subs	r4, #1
 80137f0:	4606      	mov	r6, r0
 80137f2:	460f      	mov	r7, r1
 80137f4:	e713      	b.n	801361e <__kernel_rem_pio2+0x2c6>
 80137f6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80137fa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80137fe:	f7ec fefb 	bl	80005f8 <__aeabi_dmul>
 8013802:	4602      	mov	r2, r0
 8013804:	460b      	mov	r3, r1
 8013806:	4648      	mov	r0, r9
 8013808:	4651      	mov	r1, sl
 801380a:	f7ec fd3f 	bl	800028c <__adddf3>
 801380e:	3701      	adds	r7, #1
 8013810:	4681      	mov	r9, r0
 8013812:	468a      	mov	sl, r1
 8013814:	9b00      	ldr	r3, [sp, #0]
 8013816:	429f      	cmp	r7, r3
 8013818:	dc02      	bgt.n	8013820 <__kernel_rem_pio2+0x4c8>
 801381a:	9b06      	ldr	r3, [sp, #24]
 801381c:	429f      	cmp	r7, r3
 801381e:	ddea      	ble.n	80137f6 <__kernel_rem_pio2+0x49e>
 8013820:	9a06      	ldr	r2, [sp, #24]
 8013822:	ab48      	add	r3, sp, #288	; 0x120
 8013824:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8013828:	e9c6 9a00 	strd	r9, sl, [r6]
 801382c:	3c01      	subs	r4, #1
 801382e:	e6fa      	b.n	8013626 <__kernel_rem_pio2+0x2ce>
 8013830:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013832:	2b02      	cmp	r3, #2
 8013834:	dc0b      	bgt.n	801384e <__kernel_rem_pio2+0x4f6>
 8013836:	2b00      	cmp	r3, #0
 8013838:	dc39      	bgt.n	80138ae <__kernel_rem_pio2+0x556>
 801383a:	d05d      	beq.n	80138f8 <__kernel_rem_pio2+0x5a0>
 801383c:	9b02      	ldr	r3, [sp, #8]
 801383e:	f003 0007 	and.w	r0, r3, #7
 8013842:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8013846:	ecbd 8b02 	vpop	{d8}
 801384a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801384e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8013850:	2b03      	cmp	r3, #3
 8013852:	d1f3      	bne.n	801383c <__kernel_rem_pio2+0x4e4>
 8013854:	9b05      	ldr	r3, [sp, #20]
 8013856:	9500      	str	r5, [sp, #0]
 8013858:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801385c:	eb0d 0403 	add.w	r4, sp, r3
 8013860:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8013864:	46a2      	mov	sl, r4
 8013866:	9b00      	ldr	r3, [sp, #0]
 8013868:	2b00      	cmp	r3, #0
 801386a:	f1aa 0a08 	sub.w	sl, sl, #8
 801386e:	dc69      	bgt.n	8013944 <__kernel_rem_pio2+0x5ec>
 8013870:	46aa      	mov	sl, r5
 8013872:	f1ba 0f01 	cmp.w	sl, #1
 8013876:	f1a4 0408 	sub.w	r4, r4, #8
 801387a:	f300 8083 	bgt.w	8013984 <__kernel_rem_pio2+0x62c>
 801387e:	9c05      	ldr	r4, [sp, #20]
 8013880:	ab48      	add	r3, sp, #288	; 0x120
 8013882:	441c      	add	r4, r3
 8013884:	2000      	movs	r0, #0
 8013886:	2100      	movs	r1, #0
 8013888:	2d01      	cmp	r5, #1
 801388a:	f300 809a 	bgt.w	80139c2 <__kernel_rem_pio2+0x66a>
 801388e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8013892:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8013896:	f1bb 0f00 	cmp.w	fp, #0
 801389a:	f040 8098 	bne.w	80139ce <__kernel_rem_pio2+0x676>
 801389e:	9b04      	ldr	r3, [sp, #16]
 80138a0:	e9c3 7800 	strd	r7, r8, [r3]
 80138a4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80138a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80138ac:	e7c6      	b.n	801383c <__kernel_rem_pio2+0x4e4>
 80138ae:	9e05      	ldr	r6, [sp, #20]
 80138b0:	ab48      	add	r3, sp, #288	; 0x120
 80138b2:	441e      	add	r6, r3
 80138b4:	462c      	mov	r4, r5
 80138b6:	2000      	movs	r0, #0
 80138b8:	2100      	movs	r1, #0
 80138ba:	2c00      	cmp	r4, #0
 80138bc:	da33      	bge.n	8013926 <__kernel_rem_pio2+0x5ce>
 80138be:	f1bb 0f00 	cmp.w	fp, #0
 80138c2:	d036      	beq.n	8013932 <__kernel_rem_pio2+0x5da>
 80138c4:	4602      	mov	r2, r0
 80138c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80138ca:	9c04      	ldr	r4, [sp, #16]
 80138cc:	e9c4 2300 	strd	r2, r3, [r4]
 80138d0:	4602      	mov	r2, r0
 80138d2:	460b      	mov	r3, r1
 80138d4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80138d8:	f7ec fcd6 	bl	8000288 <__aeabi_dsub>
 80138dc:	ae4a      	add	r6, sp, #296	; 0x128
 80138de:	2401      	movs	r4, #1
 80138e0:	42a5      	cmp	r5, r4
 80138e2:	da29      	bge.n	8013938 <__kernel_rem_pio2+0x5e0>
 80138e4:	f1bb 0f00 	cmp.w	fp, #0
 80138e8:	d002      	beq.n	80138f0 <__kernel_rem_pio2+0x598>
 80138ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80138ee:	4619      	mov	r1, r3
 80138f0:	9b04      	ldr	r3, [sp, #16]
 80138f2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80138f6:	e7a1      	b.n	801383c <__kernel_rem_pio2+0x4e4>
 80138f8:	9c05      	ldr	r4, [sp, #20]
 80138fa:	ab48      	add	r3, sp, #288	; 0x120
 80138fc:	441c      	add	r4, r3
 80138fe:	2000      	movs	r0, #0
 8013900:	2100      	movs	r1, #0
 8013902:	2d00      	cmp	r5, #0
 8013904:	da09      	bge.n	801391a <__kernel_rem_pio2+0x5c2>
 8013906:	f1bb 0f00 	cmp.w	fp, #0
 801390a:	d002      	beq.n	8013912 <__kernel_rem_pio2+0x5ba>
 801390c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013910:	4619      	mov	r1, r3
 8013912:	9b04      	ldr	r3, [sp, #16]
 8013914:	e9c3 0100 	strd	r0, r1, [r3]
 8013918:	e790      	b.n	801383c <__kernel_rem_pio2+0x4e4>
 801391a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801391e:	f7ec fcb5 	bl	800028c <__adddf3>
 8013922:	3d01      	subs	r5, #1
 8013924:	e7ed      	b.n	8013902 <__kernel_rem_pio2+0x5aa>
 8013926:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801392a:	f7ec fcaf 	bl	800028c <__adddf3>
 801392e:	3c01      	subs	r4, #1
 8013930:	e7c3      	b.n	80138ba <__kernel_rem_pio2+0x562>
 8013932:	4602      	mov	r2, r0
 8013934:	460b      	mov	r3, r1
 8013936:	e7c8      	b.n	80138ca <__kernel_rem_pio2+0x572>
 8013938:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801393c:	f7ec fca6 	bl	800028c <__adddf3>
 8013940:	3401      	adds	r4, #1
 8013942:	e7cd      	b.n	80138e0 <__kernel_rem_pio2+0x588>
 8013944:	e9da 8900 	ldrd	r8, r9, [sl]
 8013948:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801394c:	9b00      	ldr	r3, [sp, #0]
 801394e:	3b01      	subs	r3, #1
 8013950:	9300      	str	r3, [sp, #0]
 8013952:	4632      	mov	r2, r6
 8013954:	463b      	mov	r3, r7
 8013956:	4640      	mov	r0, r8
 8013958:	4649      	mov	r1, r9
 801395a:	f7ec fc97 	bl	800028c <__adddf3>
 801395e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013962:	4602      	mov	r2, r0
 8013964:	460b      	mov	r3, r1
 8013966:	4640      	mov	r0, r8
 8013968:	4649      	mov	r1, r9
 801396a:	f7ec fc8d 	bl	8000288 <__aeabi_dsub>
 801396e:	4632      	mov	r2, r6
 8013970:	463b      	mov	r3, r7
 8013972:	f7ec fc8b 	bl	800028c <__adddf3>
 8013976:	ed9d 7b06 	vldr	d7, [sp, #24]
 801397a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801397e:	ed8a 7b00 	vstr	d7, [sl]
 8013982:	e770      	b.n	8013866 <__kernel_rem_pio2+0x50e>
 8013984:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013988:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801398c:	4640      	mov	r0, r8
 801398e:	4632      	mov	r2, r6
 8013990:	463b      	mov	r3, r7
 8013992:	4649      	mov	r1, r9
 8013994:	f7ec fc7a 	bl	800028c <__adddf3>
 8013998:	e9cd 0100 	strd	r0, r1, [sp]
 801399c:	4602      	mov	r2, r0
 801399e:	460b      	mov	r3, r1
 80139a0:	4640      	mov	r0, r8
 80139a2:	4649      	mov	r1, r9
 80139a4:	f7ec fc70 	bl	8000288 <__aeabi_dsub>
 80139a8:	4632      	mov	r2, r6
 80139aa:	463b      	mov	r3, r7
 80139ac:	f7ec fc6e 	bl	800028c <__adddf3>
 80139b0:	ed9d 7b00 	vldr	d7, [sp]
 80139b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80139b8:	ed84 7b00 	vstr	d7, [r4]
 80139bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80139c0:	e757      	b.n	8013872 <__kernel_rem_pio2+0x51a>
 80139c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80139c6:	f7ec fc61 	bl	800028c <__adddf3>
 80139ca:	3d01      	subs	r5, #1
 80139cc:	e75c      	b.n	8013888 <__kernel_rem_pio2+0x530>
 80139ce:	9b04      	ldr	r3, [sp, #16]
 80139d0:	9a04      	ldr	r2, [sp, #16]
 80139d2:	601f      	str	r7, [r3, #0]
 80139d4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80139d8:	605c      	str	r4, [r3, #4]
 80139da:	609d      	str	r5, [r3, #8]
 80139dc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80139e0:	60d3      	str	r3, [r2, #12]
 80139e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80139e6:	6110      	str	r0, [r2, #16]
 80139e8:	6153      	str	r3, [r2, #20]
 80139ea:	e727      	b.n	801383c <__kernel_rem_pio2+0x4e4>
 80139ec:	41700000 	.word	0x41700000
 80139f0:	3e700000 	.word	0x3e700000
 80139f4:	00000000 	.word	0x00000000

080139f8 <floor>:
 80139f8:	ec51 0b10 	vmov	r0, r1, d0
 80139fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a04:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8013a08:	2e13      	cmp	r6, #19
 8013a0a:	ee10 5a10 	vmov	r5, s0
 8013a0e:	ee10 8a10 	vmov	r8, s0
 8013a12:	460c      	mov	r4, r1
 8013a14:	dc31      	bgt.n	8013a7a <floor+0x82>
 8013a16:	2e00      	cmp	r6, #0
 8013a18:	da14      	bge.n	8013a44 <floor+0x4c>
 8013a1a:	a333      	add	r3, pc, #204	; (adr r3, 8013ae8 <floor+0xf0>)
 8013a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a20:	f7ec fc34 	bl	800028c <__adddf3>
 8013a24:	2200      	movs	r2, #0
 8013a26:	2300      	movs	r3, #0
 8013a28:	f7ed f876 	bl	8000b18 <__aeabi_dcmpgt>
 8013a2c:	b138      	cbz	r0, 8013a3e <floor+0x46>
 8013a2e:	2c00      	cmp	r4, #0
 8013a30:	da53      	bge.n	8013ada <floor+0xe2>
 8013a32:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8013a36:	4325      	orrs	r5, r4
 8013a38:	d052      	beq.n	8013ae0 <floor+0xe8>
 8013a3a:	4c2d      	ldr	r4, [pc, #180]	; (8013af0 <floor+0xf8>)
 8013a3c:	2500      	movs	r5, #0
 8013a3e:	4621      	mov	r1, r4
 8013a40:	4628      	mov	r0, r5
 8013a42:	e024      	b.n	8013a8e <floor+0x96>
 8013a44:	4f2b      	ldr	r7, [pc, #172]	; (8013af4 <floor+0xfc>)
 8013a46:	4137      	asrs	r7, r6
 8013a48:	ea01 0307 	and.w	r3, r1, r7
 8013a4c:	4303      	orrs	r3, r0
 8013a4e:	d01e      	beq.n	8013a8e <floor+0x96>
 8013a50:	a325      	add	r3, pc, #148	; (adr r3, 8013ae8 <floor+0xf0>)
 8013a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a56:	f7ec fc19 	bl	800028c <__adddf3>
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	f7ed f85b 	bl	8000b18 <__aeabi_dcmpgt>
 8013a62:	2800      	cmp	r0, #0
 8013a64:	d0eb      	beq.n	8013a3e <floor+0x46>
 8013a66:	2c00      	cmp	r4, #0
 8013a68:	bfbe      	ittt	lt
 8013a6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013a6e:	4133      	asrlt	r3, r6
 8013a70:	18e4      	addlt	r4, r4, r3
 8013a72:	ea24 0407 	bic.w	r4, r4, r7
 8013a76:	2500      	movs	r5, #0
 8013a78:	e7e1      	b.n	8013a3e <floor+0x46>
 8013a7a:	2e33      	cmp	r6, #51	; 0x33
 8013a7c:	dd0b      	ble.n	8013a96 <floor+0x9e>
 8013a7e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013a82:	d104      	bne.n	8013a8e <floor+0x96>
 8013a84:	ee10 2a10 	vmov	r2, s0
 8013a88:	460b      	mov	r3, r1
 8013a8a:	f7ec fbff 	bl	800028c <__adddf3>
 8013a8e:	ec41 0b10 	vmov	d0, r0, r1
 8013a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a96:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8013a9a:	f04f 37ff 	mov.w	r7, #4294967295
 8013a9e:	40df      	lsrs	r7, r3
 8013aa0:	4238      	tst	r0, r7
 8013aa2:	d0f4      	beq.n	8013a8e <floor+0x96>
 8013aa4:	a310      	add	r3, pc, #64	; (adr r3, 8013ae8 <floor+0xf0>)
 8013aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aaa:	f7ec fbef 	bl	800028c <__adddf3>
 8013aae:	2200      	movs	r2, #0
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	f7ed f831 	bl	8000b18 <__aeabi_dcmpgt>
 8013ab6:	2800      	cmp	r0, #0
 8013ab8:	d0c1      	beq.n	8013a3e <floor+0x46>
 8013aba:	2c00      	cmp	r4, #0
 8013abc:	da0a      	bge.n	8013ad4 <floor+0xdc>
 8013abe:	2e14      	cmp	r6, #20
 8013ac0:	d101      	bne.n	8013ac6 <floor+0xce>
 8013ac2:	3401      	adds	r4, #1
 8013ac4:	e006      	b.n	8013ad4 <floor+0xdc>
 8013ac6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013aca:	2301      	movs	r3, #1
 8013acc:	40b3      	lsls	r3, r6
 8013ace:	441d      	add	r5, r3
 8013ad0:	45a8      	cmp	r8, r5
 8013ad2:	d8f6      	bhi.n	8013ac2 <floor+0xca>
 8013ad4:	ea25 0507 	bic.w	r5, r5, r7
 8013ad8:	e7b1      	b.n	8013a3e <floor+0x46>
 8013ada:	2500      	movs	r5, #0
 8013adc:	462c      	mov	r4, r5
 8013ade:	e7ae      	b.n	8013a3e <floor+0x46>
 8013ae0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8013ae4:	e7ab      	b.n	8013a3e <floor+0x46>
 8013ae6:	bf00      	nop
 8013ae8:	8800759c 	.word	0x8800759c
 8013aec:	7e37e43c 	.word	0x7e37e43c
 8013af0:	bff00000 	.word	0xbff00000
 8013af4:	000fffff 	.word	0x000fffff

08013af8 <_init>:
 8013af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013afa:	bf00      	nop
 8013afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013afe:	bc08      	pop	{r3}
 8013b00:	469e      	mov	lr, r3
 8013b02:	4770      	bx	lr

08013b04 <_fini>:
 8013b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b06:	bf00      	nop
 8013b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b0a:	bc08      	pop	{r3}
 8013b0c:	469e      	mov	lr, r3
 8013b0e:	4770      	bx	lr
